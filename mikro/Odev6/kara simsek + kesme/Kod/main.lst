CCS PCM C Compiler, Version 5.015, 5967               10-Nis-23 23:12

               Filename:   E:\Okul\Mikro\mikro\Odev6\kara simsek + kesme\Kod\main.lst

               ROM used:   261 words (3%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           24 (7%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   08B
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   044
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses HS, NOWDT, NOPROTECT  
.................... #use delay(clock=4000000) 
002F:  MOVLW  32
0030:  MOVWF  04
0031:  BCF    03.7
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   043
0035:  MOVLW  01
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  4A
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  GOTO   041
0041:  DECFSZ 00,F
0042:  GOTO   035
0043:  RETURN
.................... #define pin_start pin_A0 
.................... #define pin_stop pin_A1 
.................... #define pin_led pin_B1 
.................... int start,stop= 0; 
.................... int led = 0x01; 
.................... int number =0; 
....................  
.................... #int_timer0 
.................... void timer0_intt() 
.................... { 
....................    set_timer0(248); 
0044:  MOVLW  F8
0045:  MOVWF  01
....................    number++; 
0046:  INCF   2B,F
....................    output_b(number); 
0047:  BSF    03.5
0048:  CLRF   06
0049:  BCF    03.5
004A:  MOVF   2B,W
004B:  MOVWF  06
....................    if(number==15) 
004C:  MOVF   2B,W
004D:  SUBLW  0F
004E:  BTFSC  03.2
....................    number=0; 
004F:  CLRF   2B
....................     
....................     for(int o=0;o<25;o++) 
0050:  CLRF   31
0051:  MOVF   31,W
0052:  SUBLW  18
0053:  BTFSS  03.0
0054:  GOTO   066
....................    { 
....................       output_d(0xFF); 
0055:  BSF    03.5
0056:  CLRF   08
0057:  MOVLW  FF
0058:  BCF    03.5
0059:  MOVWF  08
....................       delay_ms(10); 
005A:  MOVLW  0A
005B:  MOVWF  32
005C:  CALL   02F
....................       output_d(0x00); 
005D:  BSF    03.5
005E:  CLRF   08
005F:  BCF    03.5
0060:  CLRF   08
....................       delay_ms(10); 
0061:  MOVLW  0A
0062:  MOVWF  32
0063:  CALL   02F
0064:  INCF   31,F
0065:  GOTO   051
....................    } 
....................     
....................  
0066:  BCF    0B.2
0067:  BCF    0A.3
0068:  BCF    0A.4
0069:  GOTO   01B
.................... } 
....................  
.................... void start_f() 
.................... {   
....................    if(input(pin_start) && !input(pin_stop)) 
006A:  BSF    03.5
006B:  BSF    05.0
006C:  BCF    03.5
006D:  BTFSS  05.0
006E:  GOTO   077
006F:  BSF    03.5
0070:  BSF    05.1
0071:  BCF    03.5
0072:  BTFSC  05.1
0073:  GOTO   077
....................    { 
....................       start = 1; 
0074:  MOVLW  01
0075:  MOVWF  28
....................       stop = 0; 
0076:  CLRF   29
....................    } 
0077:  BCF    0A.3
0078:  BCF    0A.4
0079:  GOTO   0B3 (RETURN)
.................... } 
....................  
.................... void stop_f() 
.................... {   
....................    if(!input(pin_start) && input(pin_stop)) 
007A:  BSF    03.5
007B:  BSF    05.0
007C:  BCF    03.5
007D:  BTFSC  05.0
007E:  GOTO   088
007F:  BSF    03.5
0080:  BSF    05.1
0081:  BCF    03.5
0082:  BTFSS  05.1
0083:  GOTO   088
....................    { 
....................       start = 0; 
0084:  CLRF   28
....................       stop = 1; 
0085:  MOVLW  01
0086:  MOVWF  29
....................       led = 0x01; 
0087:  MOVWF  2A
....................    } 
....................    if(stop == 1) 
0088:  DECFSZ 29,W
0089:  GOTO   08A
....................    break; 
008A:  RETURN
.................... } 
....................  
....................  
.................... void main() 
008B:  MOVF   03,W
008C:  ANDLW  1F
008D:  MOVWF  03
008E:  CLRF   29
008F:  MOVLW  01
0090:  MOVWF  2A
0091:  CLRF   2B
0092:  BSF    03.5
0093:  BSF    1F.0
0094:  BSF    1F.1
0095:  BSF    1F.2
0096:  BCF    1F.3
0097:  MOVLW  07
0098:  MOVWF  1C
0099:  BCF    03.7
.................... {   
....................    set_tris_a(0xFF);   
009A:  MOVLW  FF
009B:  MOVWF  05
....................    set_tris_b(0x00); 
009C:  MOVLW  00
009D:  MOVWF  06
....................    set_tris_d(0x00); 
009E:  MOVWF  08
....................     
....................    output_d(0x00); 
009F:  CLRF   08
00A0:  BCF    03.5
00A1:  CLRF   08
....................    output_b(number); 
00A2:  BSF    03.5
00A3:  CLRF   06
00A4:  BCF    03.5
00A5:  MOVF   2B,W
00A6:  MOVWF  06
....................     
....................    setup_timer_0(RTCC_EXT_H_TO_L | RTCC_DIV_2); 
00A7:  BSF    03.5
00A8:  MOVF   01,W
00A9:  ANDLW  C0
00AA:  IORLW  30
00AB:  MOVWF  01
....................    set_timer0(248); 
00AC:  MOVLW  F8
00AD:  BCF    03.5
00AE:  MOVWF  01
....................    enable_interrupts(INT_timer0); 
00AF:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
00B0:  MOVLW  C0
00B1:  IORWF  0B,F
....................     
....................    while(TRUE) 
....................    { 
....................       start_f(); 
00B2:  GOTO   06A
....................       stop_f(); 
00B3:  CALL   07A
....................       output_d(0x00); 
00B4:  BSF    03.5
00B5:  CLRF   08
00B6:  BCF    03.5
00B7:  CLRF   08
....................       while(start == 1) 
00B8:  DECFSZ 28,W
00B9:  GOTO   103
....................       { 
....................          for(int i=0 ; i<7 ; i++) 
00BA:  CLRF   2C
00BB:  MOVF   2C,W
00BC:  SUBLW  06
00BD:  BTFSS  03.0
00BE:  GOTO   0DC
....................          {   
....................             output_d(led); 
00BF:  BSF    03.5
00C0:  CLRF   08
00C1:  BCF    03.5
00C2:  MOVF   2A,W
00C3:  MOVWF  08
....................             led = led << 1 ; 
00C4:  BCF    03.0
00C5:  RLF    2A,F
....................             for(int k = 0; k<20; k++) 
00C6:  CLRF   2D
00C7:  MOVF   2D,W
00C8:  SUBLW  13
00C9:  BTFSS  03.0
00CA:  GOTO   0D7
....................             { 
....................                stop_f(); 
00CB:  CALL   07A
00CC:  CLRF   27
00CD:  BTFSC  0B.7
00CE:  BSF    27.7
00CF:  BCF    0B.7
....................                delay_ms(5); 
00D0:  MOVLW  05
00D1:  MOVWF  32
00D2:  CALL   02F
00D3:  BTFSC  27.7
00D4:  BSF    0B.7
00D5:  INCF   2D,F
00D6:  GOTO   0C7
....................             } 
....................             if(stop == 1) 
00D7:  DECFSZ 29,W
00D8:  GOTO   0DA
....................             break; 
00D9:  GOTO   0DC
00DA:  INCF   2C,F
00DB:  GOTO   0BB
....................          } 
....................          if(stop == 1) 
00DC:  DECFSZ 29,W
00DD:  GOTO   0DF
....................          break; 
00DE:  GOTO   103
....................          stop_f(); 
00DF:  CALL   07A
....................          for(int y =0; y<7; y++) 
00E0:  CLRF   2E
00E1:  MOVF   2E,W
00E2:  SUBLW  06
00E3:  BTFSS  03.0
00E4:  GOTO   102
....................          { 
....................             output_d(led); 
00E5:  BSF    03.5
00E6:  CLRF   08
00E7:  BCF    03.5
00E8:  MOVF   2A,W
00E9:  MOVWF  08
....................             led = led >> 1 ; 
00EA:  BCF    03.0
00EB:  RRF    2A,F
....................             for(int k = 0; k<20; k++) 
00EC:  CLRF   2F
00ED:  MOVF   2F,W
00EE:  SUBLW  13
00EF:  BTFSS  03.0
00F0:  GOTO   0FD
....................             { 
....................                stop_f(); 
00F1:  CALL   07A
00F2:  CLRF   27
00F3:  BTFSC  0B.7
00F4:  BSF    27.7
00F5:  BCF    0B.7
....................                delay_ms(5);   
00F6:  MOVLW  05
00F7:  MOVWF  32
00F8:  CALL   02F
00F9:  BTFSC  27.7
00FA:  BSF    0B.7
00FB:  INCF   2F,F
00FC:  GOTO   0ED
....................             } 
....................             if(stop == 1) 
00FD:  DECFSZ 29,W
00FE:  GOTO   100
....................             break; 
00FF:  GOTO   102
0100:  INCF   2E,F
0101:  GOTO   0E1
....................          } 
0102:  GOTO   0B8
....................           
....................       } 
0103:  GOTO   0B2
....................        
....................    } 
....................  
.................... } 
0104:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
