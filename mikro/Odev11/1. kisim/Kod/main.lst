CCS PCM C Compiler, Version 5.015, 5967               30-May-23 19:51

               Filename:   C:\Users\edaoz\Desktop\mikro\mikro\ödev11\main.lst

               ROM used:   525 words (6%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           18 (5%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   154
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,18
000D:  DATA AE,36
000E:  DATA 6F,3A
000F:  DATA 6F,39
0010:  DATA A0,34
0011:  DATA EC,32
0012:  DATA F2,34
0013:  DATA 00,00
0014:  DATA 0C,05
0015:  DATA 31,17
0016:  DATA ED,37
0017:  DATA F4,37
0018:  DATA 72,10
0019:  DATA E7,32
001A:  DATA F2,34
001B:  DATA 00,01
001C:  DATA 0C,05
001D:  DATA 0A,19
001E:  DATA AE,36
001F:  DATA 6F,3A
0020:  DATA 6F,39
0021:  DATA A0,34
0022:  DATA EC,32
0023:  DATA F2,34
0024:  DATA 00,01
0025:  DATA 0C,05
0026:  DATA 0A,05
0027:  DATA 32,17
0028:  DATA ED,37
0029:  DATA F4,37
002A:  DATA 72,10
002B:  DATA E7,32
002C:  DATA F2,34
002D:  DATA 00,00
*
00CF:  BCF    0A.0
00D0:  BCF    0A.1
00D1:  BCF    0A.2
00D2:  ADDWF  02,F
00D3:  GOTO   0BC
00D4:  GOTO   0BF
00D5:  GOTO   0C2
00D6:  GOTO   0C5
*
00FE:  MOVF   0B,W
00FF:  MOVWF  21
0100:  BCF    0B.7
0101:  BSF    03.5
0102:  BSF    03.6
0103:  BSF    0C.7
0104:  BSF    0C.0
0105:  NOP
0106:  NOP
0107:  BCF    03.5
0108:  BCF    03.6
0109:  BTFSC  21.7
010A:  BSF    0B.7
010B:  BSF    03.6
010C:  MOVF   0C,W
010D:  ANDLW  7F
010E:  BTFSC  03.2
010F:  GOTO   152
0110:  BCF    03.6
0111:  MOVWF  21
0112:  BSF    03.6
0113:  MOVF   0D,W
0114:  BCF    03.6
0115:  MOVWF  22
0116:  BSF    03.6
0117:  MOVF   0F,W
0118:  BCF    03.6
0119:  MOVWF  23
011A:  MOVF   21,W
011B:  MOVWF  24
011C:  CALL   0D7
011D:  MOVF   22,W
011E:  BSF    03.6
011F:  MOVWF  0D
0120:  BCF    03.6
0121:  MOVF   23,W
0122:  BSF    03.6
0123:  MOVWF  0F
0124:  BCF    03.6
0125:  MOVF   0B,W
0126:  MOVWF  24
0127:  BCF    0B.7
0128:  BSF    03.5
0129:  BSF    03.6
012A:  BSF    0C.7
012B:  BSF    0C.0
012C:  NOP
012D:  NOP
012E:  BCF    03.5
012F:  BCF    03.6
0130:  BTFSC  24.7
0131:  BSF    0B.7
0132:  BSF    03.6
0133:  RLF    0C,W
0134:  RLF    0E,W
0135:  ANDLW  7F
0136:  BTFSC  03.2
0137:  GOTO   152
0138:  BCF    03.6
0139:  MOVWF  21
013A:  BSF    03.6
013B:  MOVF   0D,W
013C:  BCF    03.6
013D:  MOVWF  22
013E:  BSF    03.6
013F:  MOVF   0F,W
0140:  BCF    03.6
0141:  MOVWF  23
0142:  MOVF   21,W
0143:  MOVWF  24
0144:  CALL   0D7
0145:  MOVF   22,W
0146:  BSF    03.6
0147:  MOVWF  0D
0148:  BCF    03.6
0149:  MOVF   23,W
014A:  BSF    03.6
014B:  MOVWF  0F
014C:  INCF   0D,F
014D:  BTFSC  03.2
014E:  INCF   0F,F
014F:  BCF    03.6
0150:  GOTO   0FE
0151:  BSF    03.6
0152:  BCF    03.6
0153:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
....................  
.................... #fuses XT, NOWDT,NOPROTECT 
.................... #use delay(clock=4000000) 
*
002E:  MOVLW  25
002F:  MOVWF  04
0030:  BCF    03.7
0031:  MOVF   00,W
0032:  BTFSC  03.2
0033:  GOTO   042
0034:  MOVLW  01
0035:  MOVWF  78
0036:  CLRF   77
0037:  DECFSZ 77,F
0038:  GOTO   037
0039:  DECFSZ 78,F
003A:  GOTO   036
003B:  MOVLW  4A
003C:  MOVWF  77
003D:  DECFSZ 77,F
003E:  GOTO   03D
003F:  GOTO   040
0040:  DECFSZ 00,F
0041:  GOTO   034
0042:  RETURN
.................... #include <lcd420.c>  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0050:  MOVLW  F0
0051:  BSF    03.5
0052:  MOVWF  06
....................       lcd.rw = 1; 
0053:  BCF    03.5
0054:  BSF    06.2
....................       delay_cycles(1); 
0055:  NOP
....................       lcd.enable = 1; 
0056:  BSF    06.0
....................       delay_cycles(1); 
0057:  NOP
....................       high = lcd.data; 
0058:  MOVF   06,W
0059:  SWAPF  06,W
005A:  ANDLW  0F
005B:  MOVWF  2B
....................       lcd.enable = 0; 
005C:  BCF    06.0
....................       delay_cycles(1); 
005D:  NOP
....................       lcd.enable = 1; 
005E:  BSF    06.0
....................       delay_us(1); 
005F:  NOP
....................       low = lcd.data; 
0060:  MOVF   06,W
0061:  SWAPF  06,W
0062:  ANDLW  0F
0063:  MOVWF  2A
....................       lcd.enable = 0; 
0064:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0065:  MOVLW  00
0066:  BSF    03.5
0067:  MOVWF  06
....................       return( (high<<4) | low); 
0068:  BCF    03.5
0069:  SWAPF  2B,W
006A:  MOVWF  77
006B:  MOVLW  F0
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  IORWF  2A,W
006F:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0043:  SWAPF  2B,W
0044:  ANDLW  F0
0045:  MOVWF  77
0046:  MOVLW  0F
0047:  ANDWF  06,W
0048:  IORWF  77,W
0049:  MOVWF  06
....................       delay_cycles(1); 
004A:  NOP
....................       lcd.enable = 1; 
004B:  BSF    06.0
....................       delay_us(2); 
004C:  GOTO   04D
....................       lcd.enable = 0; 
004D:  BCF    06.0
004E:  RETURN
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
004F:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0070:  MOVF   78,W
0071:  MOVWF  2A
0072:  BTFSC  2A.7
0073:  GOTO   050
....................       lcd.rs = address; 
0074:  BTFSS  28.0
0075:  BCF    06.1
0076:  BTFSC  28.0
0077:  BSF    06.1
....................       delay_cycles(1); 
0078:  NOP
....................       lcd.rw = 0; 
0079:  BCF    06.2
....................       delay_cycles(1); 
007A:  NOP
....................       lcd.enable = 0; 
007B:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
007C:  SWAPF  29,W
007D:  MOVWF  2A
007E:  MOVLW  0F
007F:  ANDWF  2A,F
0080:  MOVF   2A,W
0081:  MOVWF  2B
0082:  CALL   043
....................       lcd_send_nibble(n & 0xf); 
0083:  MOVF   29,W
0084:  ANDLW  0F
0085:  MOVWF  2A
0086:  MOVWF  2B
0087:  CALL   043
0088:  RETURN
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0089:  MOVLW  00
008A:  BSF    03.5
008B:  MOVWF  06
....................     lcd.rs = 0; 
008C:  BCF    03.5
008D:  BCF    06.1
....................     lcd.rw = 0; 
008E:  BCF    06.2
....................     lcd.enable = 0; 
008F:  BCF    06.0
....................     delay_ms(15); 
0090:  MOVLW  0F
0091:  MOVWF  25
0092:  CALL   02E
....................     for(i=1;i<=3;++i) { 
0093:  MOVLW  01
0094:  MOVWF  21
0095:  MOVF   21,W
0096:  SUBLW  03
0097:  BTFSS  03.0
0098:  GOTO   0A1
....................        lcd_send_nibble(3); 
0099:  MOVLW  03
009A:  MOVWF  2B
009B:  CALL   043
....................        delay_ms(5); 
009C:  MOVLW  05
009D:  MOVWF  25
009E:  CALL   02E
009F:  INCF   21,F
00A0:  GOTO   095
....................     } 
....................     lcd_send_nibble(2); 
00A1:  MOVLW  02
00A2:  MOVWF  2B
00A3:  CALL   043
....................     for(i=0;i<=3;++i) 
00A4:  CLRF   21
00A5:  MOVF   21,W
00A6:  SUBLW  03
00A7:  BTFSS  03.0
00A8:  GOTO   0B2
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
00A9:  MOVF   21,W
00AA:  CALL   004
00AB:  MOVWF  22
00AC:  CLRF   28
00AD:  MOVF   22,W
00AE:  MOVWF  29
00AF:  CALL   04F
00B0:  INCF   21,F
00B1:  GOTO   0A5
00B2:  BCF    0A.3
00B3:  BCF    0A.4
00B4:  GOTO   16C (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
00B5:  MOVLW  01
00B6:  SUBWF  26,W
00B7:  ADDLW  FC
00B8:  BTFSC  03.0
00B9:  GOTO   0C7
00BA:  ADDLW  04
00BB:  GOTO   0CF
....................      case 1 : address=0x80;break; 
00BC:  MOVLW  80
00BD:  MOVWF  27
00BE:  GOTO   0C7
....................      case 2 : address=0xc0;break; 
00BF:  MOVLW  C0
00C0:  MOVWF  27
00C1:  GOTO   0C7
....................      case 3 : address=0x94;break; 
00C2:  MOVLW  94
00C3:  MOVWF  27
00C4:  GOTO   0C7
....................      case 4 : address=0xd4;break; 
00C5:  MOVLW  D4
00C6:  MOVWF  27
....................    } 
....................    address+=x-1; 
00C7:  MOVLW  01
00C8:  SUBWF  25,W
00C9:  ADDWF  27,F
....................    lcd_send_byte(0,address); 
00CA:  CLRF   28
00CB:  MOVF   27,W
00CC:  MOVWF  29
00CD:  CALL   04F
00CE:  RETURN
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00D7:  MOVF   24,W
00D8:  XORLW  0C
00D9:  BTFSC  03.2
00DA:  GOTO   0E2
00DB:  XORLW  06
00DC:  BTFSC  03.2
00DD:  GOTO   0EC
00DE:  XORLW  02
00DF:  BTFSC  03.2
00E0:  GOTO   0F3
00E1:  GOTO   0F8
....................      case '\f'   : lcd_send_byte(0,1); 
00E2:  CLRF   28
00E3:  MOVLW  01
00E4:  MOVWF  29
00E5:  CALL   04F
....................                    lcdline=1; 
00E6:  MOVLW  01
00E7:  MOVWF  20
....................                    delay_ms(2); 
00E8:  MOVLW  02
00E9:  MOVWF  25
00EA:  CALL   02E
....................                                            break; 
00EB:  GOTO   0FD
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
00EC:  INCF   20,F
00ED:  MOVLW  01
00EE:  MOVWF  25
00EF:  MOVF   20,W
00F0:  MOVWF  26
00F1:  CALL   0B5
00F2:  GOTO   0FD
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00F3:  CLRF   28
00F4:  MOVLW  10
00F5:  MOVWF  29
00F6:  CALL   04F
00F7:  GOTO   0FD
....................      default     : lcd_send_byte(1,c);     break; 
00F8:  MOVLW  01
00F9:  MOVWF  28
00FA:  MOVF   24,W
00FB:  MOVWF  29
00FC:  CALL   04F
....................    } 
00FD:  RETURN
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #define ileri1 pin_a0 
.................... #define geri1 pin_a1 
.................... #define ileri2 pin_a2 
.................... #define geri2 pin_a3 
.................... #define in1   pin_d0 
.................... #define in2   pin_d1 
.................... #define in3   pin_d4 
.................... #define in4   pin_d5 
.................... void main() 
*
0154:  MOVF   03,W
0155:  ANDLW  1F
0156:  MOVWF  03
0157:  BSF    03.5
0158:  BSF    1F.0
0159:  BSF    1F.1
015A:  BSF    1F.2
015B:  BCF    1F.3
015C:  MOVLW  07
015D:  MOVWF  1C
015E:  BCF    03.7
.................... { 
....................    set_tris_a(0xFF); 
015F:  MOVLW  FF
0160:  MOVWF  05
....................    set_tris_b(0x00); 
0161:  MOVLW  00
0162:  MOVWF  06
....................    set_tris_d(0x00); 
0163:  MOVWF  08
....................    output_b(0x00); 
0164:  CLRF   06
0165:  BCF    03.5
0166:  CLRF   06
....................    output_d(0x00); 
0167:  BSF    03.5
0168:  CLRF   08
0169:  BCF    03.5
016A:  CLRF   08
....................    lcd_init(); 
016B:  GOTO   089
....................     
....................      
....................    while(TRUE) 
....................    { 
....................    
....................            
....................          if(input(ileri1)) 
016C:  BSF    03.5
016D:  BSF    05.0
016E:  BCF    03.5
016F:  BTFSS  05.0
0170:  GOTO   193
....................          {  
....................            output_high(pin_d2); 
0171:  BSF    03.5
0172:  BCF    08.2
0173:  BCF    03.5
0174:  BSF    08.2
....................            output_low(pin_d3); 
0175:  BSF    03.5
0176:  BCF    08.3
0177:  BCF    03.5
0178:  BCF    08.3
....................            output_high(in1); 
0179:  BSF    03.5
017A:  BCF    08.0
017B:  BCF    03.5
017C:  BSF    08.0
....................            output_low(in2); 
017D:  BSF    03.5
017E:  BCF    08.1
017F:  BCF    03.5
0180:  BCF    08.1
....................            lcd_gotoxy(1,1); 
0181:  MOVLW  01
0182:  MOVWF  25
0183:  MOVWF  26
0184:  CALL   0B5
....................            printf(lcd_putc, "\f1.motor ileri"); 
0185:  MOVLW  0C
0186:  BSF    03.6
0187:  MOVWF  0D
0188:  MOVLW  00
0189:  MOVWF  0F
018A:  BCF    03.6
018B:  CALL   0FE
....................            delay_ms(1000); 
018C:  MOVLW  04
018D:  MOVWF  21
018E:  MOVLW  FA
018F:  MOVWF  25
0190:  CALL   02E
0191:  DECFSZ 21,F
0192:  GOTO   18E
....................          } 
....................           
....................           
....................           if(input(geri1)) 
0193:  BSF    03.5
0194:  BSF    05.1
0195:  BCF    03.5
0196:  BTFSS  05.1
0197:  GOTO   1BB
....................          {  
....................            output_high(pin_d2); 
0198:  BSF    03.5
0199:  BCF    08.2
019A:  BCF    03.5
019B:  BSF    08.2
....................            output_low(pin_d3); 
019C:  BSF    03.5
019D:  BCF    08.3
019E:  BCF    03.5
019F:  BCF    08.3
....................            output_low(in1); 
01A0:  BSF    03.5
01A1:  BCF    08.0
01A2:  BCF    03.5
01A3:  BCF    08.0
....................            output_high(in2); 
01A4:  BSF    03.5
01A5:  BCF    08.1
01A6:  BCF    03.5
01A7:  BSF    08.1
....................            lcd_gotoxy(1,2); 
01A8:  MOVLW  01
01A9:  MOVWF  25
01AA:  MOVLW  02
01AB:  MOVWF  26
01AC:  CALL   0B5
....................            printf(lcd_putc, "\f\n1.motor geri"); 
01AD:  MOVLW  14
01AE:  BSF    03.6
01AF:  MOVWF  0D
01B0:  MOVLW  00
01B1:  MOVWF  0F
01B2:  BCF    03.6
01B3:  CALL   0FE
....................            delay_ms(1000); 
01B4:  MOVLW  04
01B5:  MOVWF  21
01B6:  MOVLW  FA
01B7:  MOVWF  25
01B8:  CALL   02E
01B9:  DECFSZ 21,F
01BA:  GOTO   1B6
....................          } 
....................           
....................           
....................           
....................         if(input(ileri2)) 
01BB:  BSF    03.5
01BC:  BSF    05.2
01BD:  BCF    03.5
01BE:  BTFSS  05.2
01BF:  GOTO   1E3
....................          {  
....................            output_high(pin_d3); 
01C0:  BSF    03.5
01C1:  BCF    08.3
01C2:  BCF    03.5
01C3:  BSF    08.3
....................            output_low(pin_d2); 
01C4:  BSF    03.5
01C5:  BCF    08.2
01C6:  BCF    03.5
01C7:  BCF    08.2
....................            output_high(in3); 
01C8:  BSF    03.5
01C9:  BCF    08.4
01CA:  BCF    03.5
01CB:  BSF    08.4
....................            output_low(in4); 
01CC:  BSF    03.5
01CD:  BCF    08.5
01CE:  BCF    03.5
01CF:  BCF    08.5
....................            lcd_gotoxy(1,3); 
01D0:  MOVLW  01
01D1:  MOVWF  25
01D2:  MOVLW  03
01D3:  MOVWF  26
01D4:  CALL   0B5
....................            printf(lcd_putc,"\f\n\n2.motor ileri"); 
01D5:  MOVLW  1C
01D6:  BSF    03.6
01D7:  MOVWF  0D
01D8:  MOVLW  00
01D9:  MOVWF  0F
01DA:  BCF    03.6
01DB:  CALL   0FE
....................            delay_ms(1000); 
01DC:  MOVLW  04
01DD:  MOVWF  21
01DE:  MOVLW  FA
01DF:  MOVWF  25
01E0:  CALL   02E
01E1:  DECFSZ 21,F
01E2:  GOTO   1DE
....................          } 
....................           
....................           
....................           if(input(geri2)) 
01E3:  BSF    03.5
01E4:  BSF    05.3
01E5:  BCF    03.5
01E6:  BTFSS  05.3
01E7:  GOTO   20B
....................          {  
....................            output_high(pin_d3); 
01E8:  BSF    03.5
01E9:  BCF    08.3
01EA:  BCF    03.5
01EB:  BSF    08.3
....................            output_low(pin_d2); 
01EC:  BSF    03.5
01ED:  BCF    08.2
01EE:  BCF    03.5
01EF:  BCF    08.2
....................            output_low(in3); 
01F0:  BSF    03.5
01F1:  BCF    08.4
01F2:  BCF    03.5
01F3:  BCF    08.4
....................            output_high(in4); 
01F4:  BSF    03.5
01F5:  BCF    08.5
01F6:  BCF    03.5
01F7:  BSF    08.5
....................            lcd_gotoxy(1,4); 
01F8:  MOVLW  01
01F9:  MOVWF  25
01FA:  MOVLW  04
01FB:  MOVWF  26
01FC:  CALL   0B5
....................            printf(lcd_putc,"\f\n\n\n2.motor geri"); 
01FD:  MOVLW  25
01FE:  BSF    03.6
01FF:  MOVWF  0D
0200:  MOVLW  00
0201:  MOVWF  0F
0202:  BCF    03.6
0203:  CALL   0FE
....................            delay_ms(1000); 
0204:  MOVLW  04
0205:  MOVWF  21
0206:  MOVLW  FA
0207:  MOVWF  25
0208:  CALL   02E
0209:  DECFSZ 21,F
020A:  GOTO   206
....................          } 
020B:  GOTO   16C
....................  
.................... } 
.................... } 
....................  
020C:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
