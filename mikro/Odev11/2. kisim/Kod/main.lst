CCS PCM C Compiler, Version 5.015, 5967               30-May-23 20:17

               Filename:   E:\Okul\Mikroislemci\mikro\Odev15\Kod\main.lst

               ROM used:   781 words (10%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           34 (9%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   250
0003:  NOP
.................... #include <16f877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  03
0009:  RETLW  06
000A:  RETLW  0C
000B:  RETLW  09
000C:  DATA 8C,29
000D:  DATA F4,30
000E:  DATA 72,3A
000F:  DATA 69,37
0010:  DATA 67,17
0011:  DATA 2E,17
0012:  DATA 00,00
0013:  DATA 0C,22
0014:  DATA 65,39
0015:  DATA E5,31
0016:  DATA 65,10
0017:  DATA 3D,10
0018:  DATA 25,36
0019:  DATA 64,00
001A:  DATA 0C,22
001B:  DATA 65,39
001C:  DATA E5,31
001D:  DATA 65,10
001E:  DATA 3D,10
001F:  DATA 25,36
0020:  DATA 64,00
*
0104:  MOVF   0B,W
0105:  MOVWF  2A
0106:  BCF    0B.7
0107:  BSF    03.5
0108:  BSF    03.6
0109:  BSF    0C.7
010A:  BSF    0C.0
010B:  NOP
010C:  NOP
010D:  BCF    03.5
010E:  BCF    03.6
010F:  BTFSC  2A.7
0110:  BSF    0B.7
0111:  BSF    03.6
0112:  MOVF   0C,W
0113:  ANDLW  7F
0114:  BTFSC  03.2
0115:  GOTO   158
0116:  BCF    03.6
0117:  MOVWF  2A
0118:  BSF    03.6
0119:  MOVF   0D,W
011A:  BCF    03.6
011B:  MOVWF  2B
011C:  BSF    03.6
011D:  MOVF   0F,W
011E:  BCF    03.6
011F:  MOVWF  2C
0120:  MOVF   2A,W
0121:  MOVWF  33
0122:  CALL   0D8
0123:  MOVF   2B,W
0124:  BSF    03.6
0125:  MOVWF  0D
0126:  BCF    03.6
0127:  MOVF   2C,W
0128:  BSF    03.6
0129:  MOVWF  0F
012A:  BCF    03.6
012B:  MOVF   0B,W
012C:  MOVWF  2D
012D:  BCF    0B.7
012E:  BSF    03.5
012F:  BSF    03.6
0130:  BSF    0C.7
0131:  BSF    0C.0
0132:  NOP
0133:  NOP
0134:  BCF    03.5
0135:  BCF    03.6
0136:  BTFSC  2D.7
0137:  BSF    0B.7
0138:  BSF    03.6
0139:  RLF    0C,W
013A:  RLF    0E,W
013B:  ANDLW  7F
013C:  BTFSC  03.2
013D:  GOTO   158
013E:  BCF    03.6
013F:  MOVWF  2A
0140:  BSF    03.6
0141:  MOVF   0D,W
0142:  BCF    03.6
0143:  MOVWF  2B
0144:  BSF    03.6
0145:  MOVF   0F,W
0146:  BCF    03.6
0147:  MOVWF  2C
0148:  MOVF   2A,W
0149:  MOVWF  33
014A:  CALL   0D8
014B:  MOVF   2B,W
014C:  BSF    03.6
014D:  MOVWF  0D
014E:  BCF    03.6
014F:  MOVF   2C,W
0150:  BSF    03.6
0151:  MOVWF  0F
0152:  INCF   0D,F
0153:  BTFSC  03.2
0154:  INCF   0F,F
0155:  BCF    03.6
0156:  GOTO   104
0157:  BSF    03.6
0158:  BCF    03.6
0159:  BCF    0A.3
015A:  BCF    0A.4
015B:  GOTO   273 (RETURN)
*
016D:  MOVF   0B,W
016E:  MOVWF  2B
016F:  BCF    0B.7
0170:  BSF    03.5
0171:  BSF    03.6
0172:  BSF    0C.7
0173:  BSF    0C.0
0174:  NOP
0175:  NOP
0176:  BCF    03.5
0177:  BCF    03.6
0178:  BTFSC  2B.7
0179:  BSF    0B.7
017A:  BTFSC  03.0
017B:  GOTO   1A4
017C:  BSF    03.6
017D:  MOVF   0C,W
017E:  ANDLW  7F
017F:  BCF    03.6
0180:  MOVWF  2B
0181:  BSF    03.6
0182:  MOVF   0D,W
0183:  BCF    03.6
0184:  MOVWF  2C
0185:  BSF    03.6
0186:  MOVF   0F,W
0187:  BCF    03.6
0188:  MOVWF  2D
0189:  MOVF   2B,W
018A:  MOVWF  33
018B:  CALL   0D8
018C:  MOVF   2C,W
018D:  BSF    03.6
018E:  MOVWF  0D
018F:  BCF    03.6
0190:  MOVF   2D,W
0191:  BSF    03.6
0192:  MOVWF  0F
0193:  BCF    03.6
0194:  MOVF   0B,W
0195:  MOVWF  2E
0196:  BCF    0B.7
0197:  BSF    03.5
0198:  BSF    03.6
0199:  BSF    0C.7
019A:  BSF    0C.0
019B:  NOP
019C:  NOP
019D:  BCF    03.5
019E:  BCF    03.6
019F:  BTFSC  2E.7
01A0:  BSF    0B.7
01A1:  DECFSZ 2A,F
01A2:  GOTO   1A4
01A3:  GOTO   1C3
01A4:  BSF    03.6
01A5:  RLF    0C,W
01A6:  RLF    0E,W
01A7:  ANDLW  7F
01A8:  BCF    03.6
01A9:  MOVWF  2B
01AA:  BSF    03.6
01AB:  MOVF   0D,W
01AC:  BCF    03.6
01AD:  MOVWF  2C
01AE:  BSF    03.6
01AF:  MOVF   0F,W
01B0:  BCF    03.6
01B1:  MOVWF  2D
01B2:  MOVF   2B,W
01B3:  MOVWF  33
01B4:  CALL   0D8
01B5:  MOVF   2C,W
01B6:  BSF    03.6
01B7:  MOVWF  0D
01B8:  BCF    03.6
01B9:  MOVF   2D,W
01BA:  BSF    03.6
01BB:  MOVWF  0F
01BC:  INCF   0D,F
01BD:  BTFSC  03.2
01BE:  INCF   0F,F
01BF:  BCF    03.0
01C0:  BCF    03.6
01C1:  DECFSZ 2A,F
01C2:  GOTO   16D
01C3:  RETURN
01C4:  CLRF   32
01C5:  MOVF   04,W
01C6:  MOVWF  31
01C7:  BCF    32.0
01C8:  BTFSC  03.7
01C9:  BSF    32.0
01CA:  BTFSS  2B.7
01CB:  GOTO   1D4
01CC:  BSF    31.7
01CD:  BTFSS  31.4
01CE:  INCF   31,F
01CF:  COMF   2A,F
01D0:  COMF   2B,F
01D1:  INCF   2A,F
01D2:  BTFSC  03.2
01D3:  INCF   2B,F
01D4:  SWAPF  2B,W
01D5:  IORLW  F0
01D6:  MOVWF  2D
01D7:  ADDWF  2D,F
01D8:  ADDLW  E2
01D9:  MOVWF  2E
01DA:  ADDLW  32
01DB:  MOVWF  30
01DC:  MOVF   2B,W
01DD:  ANDLW  0F
01DE:  ADDWF  2E,F
01DF:  ADDWF  2E,F
01E0:  ADDWF  30,F
01E1:  ADDLW  E9
01E2:  MOVWF  2F
01E3:  ADDWF  2F,F
01E4:  ADDWF  2F,F
01E5:  SWAPF  2A,W
01E6:  ANDLW  0F
01E7:  ADDWF  2F,F
01E8:  ADDWF  30,F
01E9:  RLF    2F,F
01EA:  RLF    30,F
01EB:  COMF   30,F
01EC:  RLF    30,F
01ED:  MOVF   2A,W
01EE:  ANDLW  0F
01EF:  ADDWF  30,F
01F0:  RLF    2D,F
01F1:  MOVLW  07
01F2:  MOVWF  2C
01F3:  MOVLW  0A
01F4:  ADDWF  30,F
01F5:  DECF   2F,F
01F6:  BTFSS  03.0
01F7:  GOTO   1F4
01F8:  ADDWF  2F,F
01F9:  DECF   2E,F
01FA:  BTFSS  03.0
01FB:  GOTO   1F8
01FC:  ADDWF  2E,F
01FD:  DECF   2D,F
01FE:  BTFSS  03.0
01FF:  GOTO   1FC
0200:  ADDWF  2D,F
0201:  DECF   2C,F
0202:  BTFSS  03.0
0203:  GOTO   200
0204:  MOVLW  2C
0205:  MOVWF  04
0206:  BCF    03.7
0207:  MOVLW  07
0208:  ANDWF  31,W
0209:  BCF    31.6
020A:  DECF   04,F
020B:  ANDWF  31,W
020C:  BTFSS  03.2
020D:  GOTO   215
020E:  BTFSC  31.4
020F:  INCF   04,F
0210:  BTFSC  31.4
0211:  GOTO   215
0212:  MOVLW  20
0213:  MOVWF  77
0214:  GOTO   232
0215:  ADDWF  04,F
0216:  MOVLW  30
0217:  SUBWF  04,W
0218:  BTFSC  03.2
0219:  BSF    31.6
021A:  MOVF   00,W
021B:  MOVWF  77
021C:  BTFSS  03.2
021D:  GOTO   226
021E:  BTFSC  31.6
021F:  GOTO   226
0220:  BTFSC  31.4
0221:  GOTO   240
0222:  BTFSC  31.3
0223:  GOTO   226
0224:  MOVLW  20
0225:  GOTO   231
0226:  BTFSS  31.7
0227:  GOTO   22E
0228:  MOVLW  2D
0229:  MOVWF  77
022A:  DECF   04,F
022B:  BCF    31.6
022C:  BCF    31.7
022D:  GOTO   232
022E:  BSF    31.3
022F:  BCF    31.4
0230:  MOVLW  30
0231:  ADDWF  77,F
0232:  CLRF   2B
0233:  MOVF   04,W
0234:  MOVWF  2A
0235:  BCF    2B.0
0236:  BTFSC  03.7
0237:  BSF    2B.0
0238:  MOVF   77,W
0239:  MOVWF  33
023A:  CALL   0D8
023B:  MOVF   2A,W
023C:  MOVWF  04
023D:  BCF    03.7
023E:  BTFSC  2B.0
023F:  BSF    03.7
0240:  INCF   04,F
0241:  BTFSS  31.6
0242:  GOTO   216
0243:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT 
.................... #use delay(clock=4000000) 
*
0021:  MOVLW  34
0022:  MOVWF  04
0023:  BCF    03.7
0024:  MOVF   00,W
0025:  BTFSC  03.2
0026:  GOTO   035
0027:  MOVLW  01
0028:  MOVWF  78
0029:  CLRF   77
002A:  DECFSZ 77,F
002B:  GOTO   02A
002C:  DECFSZ 78,F
002D:  GOTO   029
002E:  MOVLW  4A
002F:  MOVWF  77
0030:  DECFSZ 77,F
0031:  GOTO   030
0032:  GOTO   033
0033:  DECFSZ 00,F
0034:  GOTO   027
0035:  RETURN
....................  
.................... #define buton_1 pin_A0 
.................... #define buton_2 pin_A1 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
004E:  MOVLW  0F
004F:  BSF    03.5
0050:  ANDWF  08,W
0051:  IORLW  F0
0052:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0053:  BCF    03.5
0054:  BSF    08.2
....................    delay_cycles(1); 
0055:  NOP
....................    lcd_output_enable(1); 
0056:  BSF    08.0
....................    delay_cycles(1); 
0057:  NOP
....................    high = lcd_read_nibble(); 
0058:  CALL   042
0059:  MOVF   78,W
005A:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
005B:  BCF    08.0
....................    delay_cycles(1); 
005C:  NOP
....................    lcd_output_enable(1); 
005D:  BSF    08.0
....................    delay_us(1); 
005E:  NOP
....................    low = lcd_read_nibble(); 
005F:  CALL   042
0060:  MOVF   78,W
0061:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
0062:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0063:  MOVLW  0F
0064:  BSF    03.5
0065:  ANDWF  08,W
0066:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0067:  BCF    03.5
0068:  SWAPF  3B,W
0069:  MOVWF  77
006A:  MOVLW  F0
006B:  ANDWF  77,F
006C:  MOVF   77,W
006D:  IORWF  3A,W
006E:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0042:  MOVF   08,W
0043:  MOVWF  77
0044:  SWAPF  08,W
0045:  ANDLW  0F
0046:  MOVWF  78
....................   #endif 
0047:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0036:  SWAPF  3B,W
0037:  ANDLW  F0
0038:  MOVWF  77
0039:  MOVLW  0F
003A:  ANDWF  08,W
003B:  IORWF  77,W
003C:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
003D:  NOP
....................    lcd_output_enable(1); 
003E:  BSF    08.0
....................    delay_us(2); 
003F:  GOTO   040
....................    lcd_output_enable(0); 
0040:  BCF    08.0
0041:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0048:  BSF    03.5
0049:  BCF    08.0
....................    lcd_rs_tris(); 
004A:  BCF    08.1
....................    lcd_rw_tris(); 
004B:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
004C:  BCF    03.5
004D:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
006F:  MOVF   78,W
0070:  MOVWF  3A
0071:  BTFSC  3A.7
0072:  GOTO   04E
....................    lcd_output_rs(address); 
0073:  BTFSS  38.0
0074:  BCF    08.1
0075:  BTFSC  38.0
0076:  BSF    08.1
....................    delay_cycles(1); 
0077:  NOP
....................    lcd_output_rw(0); 
0078:  BCF    08.2
....................    delay_cycles(1); 
0079:  NOP
....................    lcd_output_enable(0); 
007A:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
007B:  SWAPF  39,W
007C:  MOVWF  3A
007D:  MOVLW  0F
007E:  ANDWF  3A,F
007F:  MOVF   3A,W
0080:  MOVWF  3B
0081:  CALL   036
....................    lcd_send_nibble(n & 0xf); 
0082:  MOVF   39,W
0083:  ANDLW  0F
0084:  MOVWF  3A
0085:  MOVWF  3B
0086:  CALL   036
0087:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0088:  MOVLW  28
0089:  MOVWF  2B
008A:  MOVLW  0C
008B:  MOVWF  2C
008C:  MOVLW  01
008D:  MOVWF  2D
008E:  MOVLW  06
008F:  MOVWF  2E
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0090:  BCF    08.0
....................    lcd_output_rs(0); 
0091:  BCF    08.1
....................    lcd_output_rw(0); 
0092:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0093:  MOVLW  0F
0094:  BSF    03.5
0095:  ANDWF  08,W
0096:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0097:  BCF    08.0
....................    lcd_rs_tris(); 
0098:  BCF    08.1
....................    lcd_rw_tris(); 
0099:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
009A:  MOVLW  0F
009B:  BCF    03.5
009C:  MOVWF  34
009D:  CALL   021
....................    for(i=1;i<=3;++i) 
009E:  MOVLW  01
009F:  MOVWF  2A
00A0:  MOVF   2A,W
00A1:  SUBLW  03
00A2:  BTFSS  03.0
00A3:  GOTO   0AC
....................    { 
....................        lcd_send_nibble(3); 
00A4:  MOVLW  03
00A5:  MOVWF  3B
00A6:  CALL   036
....................        delay_ms(5); 
00A7:  MOVLW  05
00A8:  MOVWF  34
00A9:  CALL   021
00AA:  INCF   2A,F
00AB:  GOTO   0A0
....................    } 
....................     
....................    lcd_send_nibble(2); 
00AC:  MOVLW  02
00AD:  MOVWF  3B
00AE:  CALL   036
....................    delay_ms(5); 
00AF:  MOVLW  05
00B0:  MOVWF  34
00B1:  CALL   021
....................    for(i=0;i<=3;++i) 
00B2:  CLRF   2A
00B3:  MOVF   2A,W
00B4:  SUBLW  03
00B5:  BTFSS  03.0
00B6:  GOTO   0C3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B7:  MOVLW  2B
00B8:  ADDWF  2A,W
00B9:  MOVWF  04
00BA:  BCF    03.7
00BB:  MOVF   00,W
00BC:  MOVWF  2F
00BD:  CLRF   38
00BE:  MOVF   2F,W
00BF:  MOVWF  39
00C0:  CALL   048
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C1:  INCF   2A,F
00C2:  GOTO   0B3
00C3:  BCF    0A.3
00C4:  BCF    0A.4
00C5:  GOTO   26C (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C6:  DECFSZ 35,W
00C7:  GOTO   0C9
00C8:  GOTO   0CC
....................       address=LCD_LINE_TWO; 
00C9:  MOVLW  40
00CA:  MOVWF  36
00CB:  GOTO   0CD
....................    else 
....................       address=0; 
00CC:  CLRF   36
....................       
....................    address+=x-1; 
00CD:  MOVLW  01
00CE:  SUBWF  34,W
00CF:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
00D0:  MOVF   36,W
00D1:  IORLW  80
00D2:  MOVWF  37
00D3:  CLRF   38
00D4:  MOVF   37,W
00D5:  MOVWF  39
00D6:  CALL   048
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D7:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D8:  MOVF   33,W
00D9:  XORLW  07
00DA:  BTFSC  03.2
00DB:  GOTO   0E6
00DC:  XORLW  0B
00DD:  BTFSC  03.2
00DE:  GOTO   0EB
00DF:  XORLW  06
00E0:  BTFSC  03.2
00E1:  GOTO   0F3
00E2:  XORLW  02
00E3:  BTFSC  03.2
00E4:  GOTO   0F9
00E5:  GOTO   0FE
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E6:  MOVLW  01
00E7:  MOVWF  34
00E8:  MOVWF  35
00E9:  CALL   0C6
00EA:  GOTO   103
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00EB:  CLRF   38
00EC:  MOVLW  01
00ED:  MOVWF  39
00EE:  CALL   048
....................                      delay_ms(2); 
00EF:  MOVLW  02
00F0:  MOVWF  34
00F1:  CALL   021
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F2:  GOTO   103
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00F3:  MOVLW  01
00F4:  MOVWF  34
00F5:  MOVLW  02
00F6:  MOVWF  35
00F7:  CALL   0C6
00F8:  GOTO   103
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F9:  CLRF   38
00FA:  MOVLW  10
00FB:  MOVWF  39
00FC:  CALL   048
00FD:  GOTO   103
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00FE:  MOVLW  01
00FF:  MOVWF  38
0100:  MOVF   33,W
0101:  MOVWF  39
0102:  CALL   048
....................      #endif 
....................    } 
0103:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const int digit[4] = {0x03, 0x06 , 0x0C, 0x09}; 
....................  
.................... int k,i,y,j, adim=0; 
.................... int geri = 0; 
.................... int ileri = 0; 
.................... long int drc; 
....................  
.................... void buton() 
.................... { 
....................    if(input(buton_1)) //ileri butonu 
*
015C:  BSF    03.5
015D:  BSF    05.0
015E:  BCF    03.5
015F:  BTFSS  05.0
0160:  GOTO   164
....................    { 
....................       ileri = 1;  
0161:  MOVLW  01
0162:  MOVWF  26
....................       geri = 0; 
0163:  CLRF   25
....................    } 
....................     
....................    if(input(buton_2)) //ileri butonu 
0164:  BSF    03.5
0165:  BSF    05.1
0166:  BCF    03.5
0167:  BTFSS  05.1
0168:  GOTO   16C
....................    { 
....................       ileri = 0;  
0169:  CLRF   26
....................       geri = 1; 
016A:  MOVLW  01
016B:  MOVWF  25
....................    } 
016C:  RETURN
....................  
.................... } 
....................  
.................... void delay_buton() 
.................... { 
....................    for(int t=0; t<100; t++) 
*
0244:  CLRF   2A
0245:  MOVF   2A,W
0246:  SUBLW  63
0247:  BTFSS  03.0
0248:  GOTO   24F
....................    { 
....................       buton(); 
0249:  CALL   15C
....................       delay_ms(10); 
024A:  MOVLW  0A
024B:  MOVWF  34
024C:  CALL   021
024D:  INCF   2A,F
024E:  GOTO   245
....................    } 
024F:  RETURN
....................     
.................... } 
....................  
....................  
.................... void main() 
0250:  MOVF   03,W
0251:  ANDLW  1F
0252:  MOVWF  03
0253:  CLRF   24
0254:  CLRF   25
0255:  CLRF   26
0256:  MOVLW  FF
0257:  MOVWF  29
0258:  BSF    03.5
0259:  BSF    1F.0
025A:  BSF    1F.1
025B:  BSF    1F.2
025C:  BCF    1F.3
025D:  MOVLW  07
025E:  MOVWF  1C
025F:  BCF    03.7
.................... { 
....................    set_tris_a(0xff); 
0260:  MOVLW  FF
0261:  MOVWF  05
....................    set_tris_c(0x00);  
0262:  MOVLW  00
0263:  MOVWF  07
0264:  BCF    03.5
0265:  MOVWF  29
....................    output_c(0x00);  
0266:  MOVWF  29
0267:  BSF    03.5
0268:  CLRF   07
0269:  BCF    03.5
026A:  CLRF   07
....................    lcd_init(); 
026B:  GOTO   088
....................  
....................    printf(lcd_putc, "\fStarting..."); 
026C:  MOVLW  0C
026D:  BSF    03.6
026E:  MOVWF  0D
026F:  MOVLW  00
0270:  MOVWF  0F
0271:  BCF    03.6
0272:  GOTO   104
....................    delay_ms(1000); 
0273:  MOVLW  04
0274:  MOVWF  2A
0275:  MOVLW  FA
0276:  MOVWF  34
0277:  CALL   021
0278:  DECFSZ 2A,F
0279:  GOTO   275
....................     
.................... while(1) 
.................... {  
....................    buton(); 
027A:  CALL   15C
....................     
....................    while(ileri == 1 && geri == 0)  
027B:  DECFSZ 26,W
027C:  GOTO   2C0
027D:  MOVF   25,F
027E:  BTFSS  03.2
027F:  GOTO   2C0
....................    { 
....................       for( ; ; ) 
....................       { 
....................          for(k=0; k<4; k++)   
0280:  CLRF   20
0281:  MOVF   20,W
0282:  SUBLW  03
0283:  BTFSS  03.0
0284:  GOTO   2B8
....................          { 
....................             if(drc == 360) 
0285:  MOVF   27,W
0286:  SUBLW  68
0287:  BTFSS  03.2
0288:  GOTO   28D
0289:  DECFSZ 28,W
028A:  GOTO   28D
....................             drc = 0; 
028B:  CLRF   28
028C:  CLRF   27
....................              
....................             adim = (adim+1)%4; 
028D:  MOVLW  01
028E:  ADDWF  24,W
028F:  ANDLW  03
0290:  MOVWF  24
....................             output_c(digit[adim]); 
0291:  MOVF   24,W
0292:  CALL   004
0293:  MOVWF  2A
0294:  MOVLW  00
0295:  MOVWF  29
0296:  BSF    03.5
0297:  CLRF   07
0298:  BCF    03.5
0299:  MOVF   2A,W
029A:  MOVWF  07
....................             drc += 45; 
029B:  MOVLW  2D
029C:  ADDWF  27,F
029D:  BTFSC  03.0
029E:  INCF   28,F
....................             printf(lcd_putc, "\fDerece = %ld", drc); 
029F:  MOVLW  13
02A0:  BSF    03.6
02A1:  MOVWF  0D
02A2:  MOVLW  00
02A3:  MOVWF  0F
02A4:  BCF    03.0
02A5:  MOVLW  0A
02A6:  BCF    03.6
02A7:  MOVWF  2A
02A8:  CALL   16D
02A9:  MOVLW  10
02AA:  MOVWF  04
02AB:  MOVF   28,W
02AC:  MOVWF  2B
02AD:  MOVF   27,W
02AE:  MOVWF  2A
02AF:  CALL   1C4
....................             delay_buton(); 
02B0:  CALL   244
....................             if(geri == 1 && ileri == 0) 
02B1:  DECFSZ 25,W
02B2:  GOTO   2B6
02B3:  MOVF   26,F
02B4:  BTFSC  03.2
....................             break; 
02B5:  GOTO   2B8
02B6:  INCF   20,F
02B7:  GOTO   281
....................              
....................          } 
....................           
....................          if(geri == 1 && ileri == 0) 
02B8:  DECFSZ 25,W
02B9:  GOTO   2BD
02BA:  MOVF   26,F
02BB:  BTFSC  03.2
....................          break; 
02BC:  GOTO   2BE
02BD:  GOTO   280
....................       } 
....................       ileri = 0; 
02BE:  CLRF   26
02BF:  GOTO   27B
....................    } 
....................     
....................     while(ileri == 0 && geri == 1) 
02C0:  MOVF   26,F
02C1:  BTFSS  03.2
02C2:  GOTO   30B
02C3:  DECFSZ 25,W
02C4:  GOTO   30B
....................    { 
....................       for( ; ; ) 
....................       { 
....................          for(j=0; j<4; j++)   
02C5:  CLRF   23
02C6:  MOVF   23,W
02C7:  SUBLW  03
02C8:  BTFSS  03.0
02C9:  GOTO   302
....................          { 
....................             if(drc == -360) 
02CA:  MOVF   27,W
02CB:  SUBLW  98
02CC:  BTFSS  03.2
02CD:  GOTO   2D4
02CE:  MOVF   28,W
02CF:  SUBLW  FE
02D0:  BTFSS  03.2
02D1:  GOTO   2D4
....................             drc = 0; 
02D2:  CLRF   28
02D3:  CLRF   27
....................              
....................             adim = (adim-1)%4; 
02D4:  MOVLW  01
02D5:  SUBWF  24,W
02D6:  ANDLW  03
02D7:  MOVWF  24
....................             output_c(digit[adim]); 
02D8:  MOVF   24,W
02D9:  CALL   004
02DA:  MOVWF  2A
02DB:  MOVLW  00
02DC:  MOVWF  29
02DD:  BSF    03.5
02DE:  CLRF   07
02DF:  BCF    03.5
02E0:  MOVF   2A,W
02E1:  MOVWF  07
....................             drc = drc - 45; 
02E2:  MOVLW  2D
02E3:  SUBWF  27,F
02E4:  MOVLW  00
02E5:  BTFSS  03.0
02E6:  MOVLW  01
02E7:  SUBWF  28,F
....................             printf(lcd_putc, "\fDerece = %ld", drc); 
02E8:  MOVLW  1A
02E9:  BSF    03.6
02EA:  MOVWF  0D
02EB:  MOVLW  00
02EC:  MOVWF  0F
02ED:  BCF    03.0
02EE:  MOVLW  0A
02EF:  BCF    03.6
02F0:  MOVWF  2A
02F1:  CALL   16D
02F2:  MOVLW  10
02F3:  MOVWF  04
02F4:  MOVF   28,W
02F5:  MOVWF  2B
02F6:  MOVF   27,W
02F7:  MOVWF  2A
02F8:  CALL   1C4
....................             delay_buton(); 
02F9:  CALL   244
....................             if(geri == 0 && ileri == 1)        
02FA:  MOVF   25,F
02FB:  BTFSS  03.2
02FC:  GOTO   300
02FD:  DECFSZ 26,W
02FE:  GOTO   300
....................             break; 
02FF:  GOTO   302
0300:  INCF   23,F
0301:  GOTO   2C6
....................              
....................          } 
....................          if(geri == 0 && ileri == 1) 
0302:  MOVF   25,F
0303:  BTFSS  03.2
0304:  GOTO   308
0305:  DECFSZ 26,W
0306:  GOTO   308
....................          break; 
0307:  GOTO   309
0308:  GOTO   2C5
....................       } 
....................       geri = 0; 
0309:  CLRF   25
030A:  GOTO   2C0
....................    } 
030B:  GOTO   27A
....................     
....................   
.................... } 
....................  
.................... } 
....................  
030C:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
