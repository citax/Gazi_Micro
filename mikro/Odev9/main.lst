CCS PCM C Compiler, Version 5.015, 5967               10-May-23 02:37

               Filename:   C:\Users\Nikola\Desktop\odev9 (1)\ödev9\main.lst

               ROM used:   1252 words (15%)
                           Largest free fragment is 2048
               RAM used:   43 (12%) at main() level
                           66 (18%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   377
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.6
002A:  GOTO   02D
002B:  BTFSC  0C.6
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   066
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
006F:  DATA 0C,10
0070:  DATA 41,22
0071:  DATA 43,10
0072:  DATA D5,2C
0073:  DATA C7,2A
0074:  DATA CC,20
0075:  DATA CD,20
0076:  DATA D3,24
0077:  DATA 20,00
*
015E:  MOVF   0B,W
015F:  MOVWF  42
0160:  BCF    0B.7
0161:  BSF    03.5
0162:  BSF    03.6
0163:  BSF    0C.7
0164:  BSF    0C.0
0165:  NOP
0166:  NOP
0167:  BCF    03.5
0168:  BCF    03.6
0169:  BTFSC  42.7
016A:  BSF    0B.7
016B:  BSF    03.6
016C:  MOVF   0C,W
016D:  ANDLW  7F
016E:  BTFSC  03.2
016F:  GOTO   1B2
0170:  BCF    03.6
0171:  MOVWF  42
0172:  BSF    03.6
0173:  MOVF   0D,W
0174:  BCF    03.6
0175:  MOVWF  43
0176:  BSF    03.6
0177:  MOVF   0F,W
0178:  BCF    03.6
0179:  MOVWF  44
017A:  MOVF   42,W
017B:  MOVWF  4F
017C:  CALL   12C
017D:  MOVF   43,W
017E:  BSF    03.6
017F:  MOVWF  0D
0180:  BCF    03.6
0181:  MOVF   44,W
0182:  BSF    03.6
0183:  MOVWF  0F
0184:  BCF    03.6
0185:  MOVF   0B,W
0186:  MOVWF  45
0187:  BCF    0B.7
0188:  BSF    03.5
0189:  BSF    03.6
018A:  BSF    0C.7
018B:  BSF    0C.0
018C:  NOP
018D:  NOP
018E:  BCF    03.5
018F:  BCF    03.6
0190:  BTFSC  45.7
0191:  BSF    0B.7
0192:  BSF    03.6
0193:  RLF    0C,W
0194:  RLF    0E,W
0195:  ANDLW  7F
0196:  BTFSC  03.2
0197:  GOTO   1B2
0198:  BCF    03.6
0199:  MOVWF  42
019A:  BSF    03.6
019B:  MOVF   0D,W
019C:  BCF    03.6
019D:  MOVWF  43
019E:  BSF    03.6
019F:  MOVF   0F,W
01A0:  BCF    03.6
01A1:  MOVWF  44
01A2:  MOVF   42,W
01A3:  MOVWF  4F
01A4:  CALL   12C
01A5:  MOVF   43,W
01A6:  BSF    03.6
01A7:  MOVWF  0D
01A8:  BCF    03.6
01A9:  MOVF   44,W
01AA:  BSF    03.6
01AB:  MOVWF  0F
01AC:  INCF   0D,F
01AD:  BTFSC  03.2
01AE:  INCF   0F,F
01AF:  BCF    03.6
01B0:  GOTO   15E
01B1:  BSF    03.6
01B2:  BCF    03.6
01B3:  BCF    0A.3
01B4:  BCF    0A.4
01B5:  GOTO   3A4 (RETURN)
01B6:  MOVLW  8E
01B7:  MOVWF  77
01B8:  MOVF   43,W
01B9:  MOVWF  78
01BA:  MOVF   42,W
01BB:  MOVWF  79
01BC:  CLRF   7A
01BD:  MOVF   78,F
01BE:  BTFSS  03.2
01BF:  GOTO   1CA
01C0:  MOVF   79,W
01C1:  MOVWF  78
01C2:  CLRF   79
01C3:  MOVLW  08
01C4:  SUBWF  77,F
01C5:  MOVF   78,F
01C6:  BTFSS  03.2
01C7:  GOTO   1CA
01C8:  CLRF   77
01C9:  GOTO   1D2
01CA:  BCF    03.0
01CB:  BTFSC  78.7
01CC:  GOTO   1D1
01CD:  RLF    79,F
01CE:  RLF    78,F
01CF:  DECF   77,F
01D0:  GOTO   1CA
01D1:  BCF    78.7
01D2:  RETURN
01D3:  MOVF   4F,W
01D4:  BTFSC  03.2
01D5:  GOTO   243
01D6:  MOVWF  57
01D7:  MOVF   53,W
01D8:  BTFSC  03.2
01D9:  GOTO   243
01DA:  ADDWF  57,F
01DB:  BTFSC  03.0
01DC:  GOTO   1E4
01DD:  MOVLW  7F
01DE:  SUBWF  57,F
01DF:  BTFSS  03.0
01E0:  GOTO   243
01E1:  BTFSC  03.2
01E2:  GOTO   243
01E3:  GOTO   1E8
01E4:  MOVLW  81
01E5:  ADDWF  57,F
01E6:  BTFSC  03.0
01E7:  GOTO   243
01E8:  MOVF   57,W
01E9:  MOVWF  77
01EA:  CLRF   78
01EB:  CLRF   79
01EC:  CLRF   7A
01ED:  MOVF   50,W
01EE:  MOVWF  5B
01EF:  BSF    5B.7
01F0:  MOVF   51,W
01F1:  MOVWF  5A
01F2:  MOVF   52,W
01F3:  MOVWF  59
01F4:  MOVLW  18
01F5:  MOVWF  57
01F6:  CLRF   58
01F7:  BTFSS  59.0
01F8:  GOTO   211
01F9:  MOVF   56,W
01FA:  ADDWF  7A,F
01FB:  BTFSS  03.0
01FC:  GOTO   203
01FD:  INCF   79,F
01FE:  BTFSS  03.2
01FF:  GOTO   203
0200:  INCF   78,F
0201:  BTFSC  03.2
0202:  BSF    58.7
0203:  MOVF   55,W
0204:  ADDWF  79,F
0205:  BTFSS  03.0
0206:  GOTO   20A
0207:  INCF   78,F
0208:  BTFSC  03.2
0209:  BSF    58.7
020A:  MOVF   54,W
020B:  MOVWF  51
020C:  BSF    51.7
020D:  MOVF   51,W
020E:  ADDWF  78,F
020F:  BTFSC  03.0
0210:  BSF    58.7
0211:  RLF    58,F
0212:  RRF    78,F
0213:  RRF    79,F
0214:  RRF    7A,F
0215:  RRF    5B,F
0216:  RRF    5A,F
0217:  RRF    59,F
0218:  BCF    03.0
0219:  DECFSZ 57,F
021A:  GOTO   1F6
021B:  MOVLW  01
021C:  ADDWF  77,F
021D:  BTFSC  03.0
021E:  GOTO   243
021F:  BTFSC  78.7
0220:  GOTO   228
0221:  RLF    5B,F
0222:  RLF    7A,F
0223:  RLF    79,F
0224:  RLF    78,F
0225:  DECF   77,F
0226:  BTFSC  03.2
0227:  GOTO   243
0228:  BTFSS  5B.7
0229:  GOTO   239
022A:  INCF   7A,F
022B:  BTFSS  03.2
022C:  GOTO   239
022D:  INCF   79,F
022E:  BTFSS  03.2
022F:  GOTO   239
0230:  INCF   78,F
0231:  BTFSS  03.2
0232:  GOTO   239
0233:  RRF    78,F
0234:  RRF    79,F
0235:  RRF    7A,F
0236:  INCF   77,F
0237:  BTFSC  03.2
0238:  GOTO   243
0239:  MOVF   50,W
023A:  MOVWF  58
023B:  MOVF   54,W
023C:  XORWF  58,F
023D:  BTFSS  58.7
023E:  GOTO   241
023F:  BSF    78.7
0240:  GOTO   247
0241:  BCF    78.7
0242:  GOTO   247
0243:  CLRF   77
0244:  CLRF   78
0245:  CLRF   79
0246:  CLRF   7A
0247:  RETURN
0248:  BTFSC  03.1
0249:  GOTO   24D
024A:  MOVLW  57
024B:  MOVWF  04
024C:  BCF    03.7
024D:  CLRF   77
024E:  CLRF   78
024F:  CLRF   79
0250:  CLRF   7A
0251:  CLRF   57
0252:  CLRF   58
0253:  CLRF   59
0254:  CLRF   5A
0255:  MOVF   56,W
0256:  IORWF  55,W
0257:  IORWF  54,W
0258:  IORWF  53,W
0259:  BTFSC  03.2
025A:  GOTO   28B
025B:  MOVLW  20
025C:  MOVWF  5B
025D:  BCF    03.0
025E:  RLF    4F,F
025F:  RLF    50,F
0260:  RLF    51,F
0261:  RLF    52,F
0262:  RLF    57,F
0263:  RLF    58,F
0264:  RLF    59,F
0265:  RLF    5A,F
0266:  MOVF   56,W
0267:  SUBWF  5A,W
0268:  BTFSS  03.2
0269:  GOTO   274
026A:  MOVF   55,W
026B:  SUBWF  59,W
026C:  BTFSS  03.2
026D:  GOTO   274
026E:  MOVF   54,W
026F:  SUBWF  58,W
0270:  BTFSS  03.2
0271:  GOTO   274
0272:  MOVF   53,W
0273:  SUBWF  57,W
0274:  BTFSS  03.0
0275:  GOTO   285
0276:  MOVF   53,W
0277:  SUBWF  57,F
0278:  MOVF   54,W
0279:  BTFSS  03.0
027A:  INCFSZ 54,W
027B:  SUBWF  58,F
027C:  MOVF   55,W
027D:  BTFSS  03.0
027E:  INCFSZ 55,W
027F:  SUBWF  59,F
0280:  MOVF   56,W
0281:  BTFSS  03.0
0282:  INCFSZ 56,W
0283:  SUBWF  5A,F
0284:  BSF    03.0
0285:  RLF    77,F
0286:  RLF    78,F
0287:  RLF    79,F
0288:  RLF    7A,F
0289:  DECFSZ 5B,F
028A:  GOTO   25D
028B:  MOVF   57,W
028C:  MOVWF  00
028D:  INCF   04,F
028E:  MOVF   58,W
028F:  MOVWF  00
0290:  INCF   04,F
0291:  MOVF   59,W
0292:  MOVWF  00
0293:  INCF   04,F
0294:  MOVF   5A,W
0295:  MOVWF  00
0296:  RETURN
0297:  MOVF   04,W
0298:  MOVWF  47
0299:  MOVF   46,W
029A:  MOVWF  49
029B:  BTFSC  03.2
029C:  GOTO   2B6
029D:  MOVF   45,W
029E:  MOVWF  52
029F:  MOVF   44,W
02A0:  MOVWF  51
02A1:  MOVF   43,W
02A2:  MOVWF  50
02A3:  MOVF   42,W
02A4:  MOVWF  4F
02A5:  CLRF   56
02A6:  CLRF   55
02A7:  MOVLW  20
02A8:  MOVWF  54
02A9:  MOVLW  82
02AA:  MOVWF  53
02AB:  CALL   1D3
02AC:  MOVF   7A,W
02AD:  MOVWF  45
02AE:  MOVF   79,W
02AF:  MOVWF  44
02B0:  MOVF   78,W
02B1:  MOVWF  43
02B2:  MOVF   77,W
02B3:  MOVWF  42
02B4:  DECFSZ 49,F
02B5:  GOTO   29D
02B6:  MOVF   45,W
02B7:  MOVWF  52
02B8:  MOVF   44,W
02B9:  MOVWF  51
02BA:  MOVF   43,W
02BB:  MOVWF  50
02BC:  MOVF   42,W
02BD:  MOVWF  4F
02BE:  MOVF   4F,W
02BF:  SUBLW  B6
02C0:  MOVWF  4F
02C1:  CLRF   7A
02C2:  MOVF   50,W
02C3:  MOVWF  53
02C4:  BSF    50.7
02C5:  BCF    03.0
02C6:  RRF    50,F
02C7:  RRF    51,F
02C8:  RRF    52,F
02C9:  RRF    7A,F
02CA:  RRF    79,F
02CB:  RRF    78,F
02CC:  RRF    77,F
02CD:  DECFSZ 4F,F
02CE:  GOTO   2C5
02CF:  BTFSS  53.7
02D0:  GOTO   2DC
02D1:  COMF   77,F
02D2:  COMF   78,F
02D3:  COMF   79,F
02D4:  COMF   7A,F
02D5:  INCF   77,F
02D6:  BTFSC  03.2
02D7:  INCF   78,F
02D8:  BTFSC  03.2
02D9:  INCF   79,F
02DA:  BTFSC  03.2
02DB:  INCF   7A,F
02DC:  MOVF   7A,W
02DD:  MOVWF  45
02DE:  MOVF   79,W
02DF:  MOVWF  44
02E0:  MOVF   78,W
02E1:  MOVWF  43
02E2:  MOVF   77,W
02E3:  MOVWF  42
02E4:  BTFSS  45.7
02E5:  GOTO   2F3
02E6:  DECF   47,F
02E7:  BSF    47.5
02E8:  COMF   42,F
02E9:  COMF   43,F
02EA:  COMF   44,F
02EB:  COMF   45,F
02EC:  INCF   42,F
02ED:  BTFSC  03.2
02EE:  INCF   43,F
02EF:  BTFSC  03.2
02F0:  INCF   44,F
02F1:  BTFSC  03.2
02F2:  INCF   45,F
02F3:  MOVLW  3B
02F4:  MOVWF  4E
02F5:  MOVLW  9A
02F6:  MOVWF  4D
02F7:  MOVLW  CA
02F8:  MOVWF  4C
02F9:  CLRF   4B
02FA:  MOVLW  0A
02FB:  MOVWF  49
02FC:  MOVF   46,W
02FD:  BTFSC  03.2
02FE:  INCF   47,F
02FF:  BSF    03.1
0300:  MOVLW  42
0301:  MOVWF  04
0302:  BCF    03.7
0303:  MOVF   45,W
0304:  MOVWF  52
0305:  MOVF   44,W
0306:  MOVWF  51
0307:  MOVF   43,W
0308:  MOVWF  50
0309:  MOVF   42,W
030A:  MOVWF  4F
030B:  MOVF   4E,W
030C:  MOVWF  56
030D:  MOVF   4D,W
030E:  MOVWF  55
030F:  MOVF   4C,W
0310:  MOVWF  54
0311:  MOVF   4B,W
0312:  MOVWF  53
0313:  CALL   248
0314:  MOVF   78,W
0315:  MOVF   77,F
0316:  BTFSS  03.2
0317:  GOTO   32B
0318:  INCF   46,W
0319:  SUBWF  49,W
031A:  BTFSC  03.2
031B:  GOTO   32B
031C:  MOVF   47,W
031D:  BTFSC  03.2
031E:  GOTO   32D
031F:  ANDLW  0F
0320:  SUBWF  49,W
0321:  BTFSC  03.2
0322:  GOTO   325
0323:  BTFSC  03.0
0324:  GOTO   35D
0325:  BTFSC  47.7
0326:  GOTO   35D
0327:  BTFSC  47.6
0328:  GOTO   32D
0329:  MOVLW  20
032A:  GOTO   359
032B:  MOVLW  20
032C:  ANDWF  47,F
032D:  BTFSS  47.5
032E:  GOTO   33B
032F:  BCF    47.5
0330:  MOVF   46,W
0331:  BTFSS  03.2
0332:  DECF   47,F
0333:  MOVF   77,W
0334:  MOVWF  47
0335:  MOVLW  2D
0336:  MOVWF  4F
0337:  CALL   12C
0338:  MOVF   47,W
0339:  MOVWF  77
033A:  CLRF   47
033B:  MOVF   46,W
033C:  SUBWF  49,W
033D:  BTFSS  03.2
033E:  GOTO   349
033F:  MOVF   77,W
0340:  MOVWF  47
0341:  MOVLW  2E
0342:  MOVWF  4F
0343:  CALL   12C
0344:  MOVF   47,W
0345:  MOVWF  77
0346:  MOVLW  20
0347:  ANDWF  47,F
0348:  MOVLW  00
0349:  MOVLW  30
034A:  BTFSS  47.5
034B:  GOTO   359
034C:  BCF    47.5
034D:  MOVF   46,W
034E:  BTFSS  03.2
034F:  DECF   47,F
0350:  MOVF   77,W
0351:  MOVWF  47
0352:  MOVLW  2D
0353:  MOVWF  4F
0354:  CALL   12C
0355:  MOVF   47,W
0356:  MOVWF  77
0357:  CLRF   47
0358:  MOVLW  30
0359:  ADDWF  77,F
035A:  MOVF   77,W
035B:  MOVWF  4F
035C:  CALL   12C
035D:  BCF    03.1
035E:  MOVF   4E,W
035F:  MOVWF  52
0360:  MOVF   4D,W
0361:  MOVWF  51
0362:  MOVF   4C,W
0363:  MOVWF  50
0364:  MOVF   4B,W
0365:  MOVWF  4F
0366:  CLRF   56
0367:  CLRF   55
0368:  CLRF   54
0369:  MOVLW  0A
036A:  MOVWF  53
036B:  CALL   248
036C:  MOVF   7A,W
036D:  MOVWF  4E
036E:  MOVF   79,W
036F:  MOVWF  4D
0370:  MOVF   78,W
0371:  MOVWF  4C
0372:  MOVF   77,W
0373:  MOVWF  4B
0374:  DECFSZ 49,F
0375:  GOTO   2FF
0376:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses XT,NOWDT 
.................... #use delay (clock=4000000) 
*
0051:  MOVLW  5C
0052:  MOVWF  04
0053:  BCF    03.7
0054:  MOVF   00,W
0055:  BTFSC  03.2
0056:  GOTO   065
0057:  MOVLW  01
0058:  MOVWF  78
0059:  CLRF   77
005A:  DECFSZ 77,F
005B:  GOTO   05A
005C:  DECFSZ 78,F
005D:  GOTO   059
005E:  MOVLW  4A
005F:  MOVWF  77
0060:  DECFSZ 77,F
0061:  GOTO   060
0062:  GOTO   063
0063:  DECFSZ 00,F
0064:  GOTO   057
0065:  RETURN
.................... #use fast_io(c) 
.................... #use fast_io(e) 
.................... #define use_portb_lcd FALSE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0090:  MOVLW  0F
0091:  BSF    03.5
0092:  ANDWF  08,W
0093:  IORLW  F0
0094:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0095:  BCF    03.5
0096:  BSF    08.2
....................    delay_cycles(1); 
0097:  NOP
....................    lcd_output_enable(1); 
0098:  BSF    08.0
....................    delay_cycles(1); 
0099:  NOP
....................    high = lcd_read_nibble(); 
009A:  CALL   084
009B:  MOVF   78,W
009C:  MOVWF  57
....................        
....................    lcd_output_enable(0); 
009D:  BCF    08.0
....................    delay_cycles(1); 
009E:  NOP
....................    lcd_output_enable(1); 
009F:  BSF    08.0
....................    delay_us(1); 
00A0:  NOP
....................    low = lcd_read_nibble(); 
00A1:  CALL   084
00A2:  MOVF   78,W
00A3:  MOVWF  56
....................        
....................    lcd_output_enable(0); 
00A4:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A5:  MOVLW  0F
00A6:  BSF    03.5
00A7:  ANDWF  08,W
00A8:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00A9:  BCF    03.5
00AA:  SWAPF  57,W
00AB:  MOVWF  77
00AC:  MOVLW  F0
00AD:  ANDWF  77,F
00AE:  MOVF   77,W
00AF:  IORWF  56,W
00B0:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0084:  MOVF   08,W
0085:  MOVWF  77
0086:  SWAPF  08,W
0087:  ANDLW  0F
0088:  MOVWF  78
....................   #endif 
0089:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0078:  SWAPF  57,W
0079:  ANDLW  F0
007A:  MOVWF  77
007B:  MOVLW  0F
007C:  ANDWF  08,W
007D:  IORWF  77,W
007E:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
007F:  NOP
....................    lcd_output_enable(1); 
0080:  BSF    08.0
....................    delay_us(2); 
0081:  GOTO   082
....................    lcd_output_enable(0); 
0082:  BCF    08.0
0083:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008A:  BSF    03.5
008B:  BCF    08.0
....................    lcd_rs_tris(); 
008C:  BCF    08.1
....................    lcd_rw_tris(); 
008D:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008E:  BCF    03.5
008F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B1:  MOVF   78,W
00B2:  MOVWF  56
00B3:  BTFSC  56.7
00B4:  GOTO   090
....................    lcd_output_rs(address); 
00B5:  BTFSS  54.0
00B6:  BCF    08.1
00B7:  BTFSC  54.0
00B8:  BSF    08.1
....................    delay_cycles(1); 
00B9:  NOP
....................    lcd_output_rw(0); 
00BA:  BCF    08.2
....................    delay_cycles(1); 
00BB:  NOP
....................    lcd_output_enable(0); 
00BC:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00BD:  SWAPF  55,W
00BE:  MOVWF  56
00BF:  MOVLW  0F
00C0:  ANDWF  56,F
00C1:  MOVF   56,W
00C2:  MOVWF  57
00C3:  CALL   078
....................    lcd_send_nibble(n & 0xf); 
00C4:  MOVF   55,W
00C5:  ANDLW  0F
00C6:  MOVWF  56
00C7:  MOVWF  57
00C8:  CALL   078
00C9:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00CA:  MOVLW  28
00CB:  MOVWF  43
00CC:  MOVLW  0C
00CD:  MOVWF  44
00CE:  MOVLW  01
00CF:  MOVWF  45
00D0:  MOVLW  06
00D1:  MOVWF  46
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00D2:  BCF    08.0
....................    lcd_output_rs(0); 
00D3:  BCF    08.1
....................    lcd_output_rw(0); 
00D4:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00D5:  MOVLW  0F
00D6:  BSF    03.5
00D7:  ANDWF  08,W
00D8:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00D9:  BCF    08.0
....................    lcd_rs_tris(); 
00DA:  BCF    08.1
....................    lcd_rw_tris(); 
00DB:  BCF    08.2
00DC:  BCF    03.5
00DD:  CLRF   2B
00DE:  BTFSC  0B.7
00DF:  BSF    2B.7
00E0:  BCF    0B.7
....................  #endif 
....................      
....................    delay_ms(15); 
00E1:  MOVLW  0F
00E2:  MOVWF  5C
00E3:  CALL   051
00E4:  BTFSC  2B.7
00E5:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
00E6:  MOVLW  01
00E7:  MOVWF  42
00E8:  MOVF   42,W
00E9:  SUBLW  03
00EA:  BTFSS  03.0
00EB:  GOTO   0FA
....................    { 
....................        lcd_send_nibble(3); 
00EC:  MOVLW  03
00ED:  MOVWF  57
00EE:  CALL   078
00EF:  CLRF   2B
00F0:  BTFSC  0B.7
00F1:  BSF    2B.7
00F2:  BCF    0B.7
....................        delay_ms(5); 
00F3:  MOVLW  05
00F4:  MOVWF  5C
00F5:  CALL   051
00F6:  BTFSC  2B.7
00F7:  BSF    0B.7
00F8:  INCF   42,F
00F9:  GOTO   0E8
....................    } 
....................     
....................    lcd_send_nibble(2); 
00FA:  MOVLW  02
00FB:  MOVWF  57
00FC:  CALL   078
00FD:  CLRF   2B
00FE:  BTFSC  0B.7
00FF:  BSF    2B.7
0100:  BCF    0B.7
....................    delay_ms(5); 
0101:  MOVLW  05
0102:  MOVWF  5C
0103:  CALL   051
0104:  BTFSC  2B.7
0105:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
0106:  CLRF   42
0107:  MOVF   42,W
0108:  SUBLW  03
0109:  BTFSS  03.0
010A:  GOTO   117
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
010B:  MOVLW  43
010C:  ADDWF  42,W
010D:  MOVWF  04
010E:  BCF    03.7
010F:  MOVF   00,W
0110:  MOVWF  47
0111:  CLRF   54
0112:  MOVF   47,W
0113:  MOVWF  55
0114:  CALL   08A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0115:  INCF   42,F
0116:  GOTO   107
0117:  BCF    0A.3
0118:  BCF    0A.4
0119:  GOTO   39D (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
011A:  DECFSZ 51,W
011B:  GOTO   11D
011C:  GOTO   120
....................       address=LCD_LINE_TWO; 
011D:  MOVLW  40
011E:  MOVWF  52
011F:  GOTO   121
....................    else 
....................       address=0; 
0120:  CLRF   52
....................       
....................    address+=x-1; 
0121:  MOVLW  01
0122:  SUBWF  50,W
0123:  ADDWF  52,F
....................    lcd_send_byte(0,0x80|address); 
0124:  MOVF   52,W
0125:  IORLW  80
0126:  MOVWF  53
0127:  CLRF   54
0128:  MOVF   53,W
0129:  MOVWF  55
012A:  CALL   08A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
012B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
012C:  MOVF   4F,W
012D:  XORLW  07
012E:  BTFSC  03.2
012F:  GOTO   13A
0130:  XORLW  0B
0131:  BTFSC  03.2
0132:  GOTO   13F
0133:  XORLW  06
0134:  BTFSC  03.2
0135:  GOTO   14D
0136:  XORLW  02
0137:  BTFSC  03.2
0138:  GOTO   153
0139:  GOTO   158
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
013A:  MOVLW  01
013B:  MOVWF  50
013C:  MOVWF  51
013D:  CALL   11A
013E:  GOTO   15D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
013F:  CLRF   54
0140:  MOVLW  01
0141:  MOVWF  55
0142:  CALL   08A
0143:  CLRF   2B
0144:  BTFSC  0B.7
0145:  BSF    2B.7
0146:  BCF    0B.7
....................                      delay_ms(2); 
0147:  MOVLW  02
0148:  MOVWF  5C
0149:  CALL   051
014A:  BTFSC  2B.7
014B:  BSF    0B.7
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
014C:  GOTO   15D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
014D:  MOVLW  01
014E:  MOVWF  50
014F:  MOVLW  02
0150:  MOVWF  51
0151:  CALL   11A
0152:  GOTO   15D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0153:  CLRF   54
0154:  MOVLW  10
0155:  MOVWF  55
0156:  CALL   08A
0157:  GOTO   15D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0158:  MOVLW  01
0159:  MOVWF  54
015A:  MOVF   4F,W
015B:  MOVWF  55
015C:  CALL   08A
....................      #endif 
....................    } 
015D:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #INT_AD 
.................... void ADC_kesme() 
....................    { 
....................       output_high(pin_c5); 
*
0066:  BSF    07.5
....................       delay_ms(200); 
0067:  MOVLW  C8
0068:  MOVWF  5C
0069:  CALL   051
....................       output_low(pin_c5); 
006A:  BCF    07.5
006B:  BCF    0C.6
006C:  BCF    0A.3
006D:  BCF    0A.4
006E:  GOTO   02D
....................    } 
....................     
.................... unsigned long int bilgi1,bilgi2,bilgi3 ; 
.................... float V,I,P,q; 
....................  
.................... void main() 
*
0377:  MOVF   03,W
0378:  ANDLW  1F
0379:  MOVWF  03
037A:  BSF    03.5
037B:  BSF    1F.0
037C:  BSF    1F.1
037D:  BSF    1F.2
037E:  BCF    1F.3
037F:  MOVLW  07
0380:  MOVWF  1C
0381:  BCF    03.7
.................... { 
.................... set_tris_d(0x00); 
0382:  MOVLW  00
0383:  MOVWF  08
.................... set_tris_c(0x00); 
0384:  MOVWF  07
.................... set_tris_e(0x0F); 
0385:  BSF    09.0
0386:  BSF    09.1
0387:  BSF    09.2
.................... output_c(0x00); 
0388:  BCF    03.5
0389:  CLRF   07
....................  
.................... setup_adc(adc_clock_div_32); 
038A:  BSF    03.5
038B:  BCF    1F.6
038C:  BCF    03.5
038D:  BCF    1F.6
038E:  BSF    1F.7
038F:  BSF    03.5
0390:  BCF    1F.7
0391:  BCF    03.5
0392:  BSF    1F.0
.................... setup_adc_ports(ALL_ANALOG); 
0393:  BSF    03.5
0394:  BCF    1F.0
0395:  BCF    1F.1
0396:  BCF    1F.2
0397:  BCF    1F.3
.................... enable_interrupts(INT_AD); 
0398:  BSF    0C.6
.................... enable_interrupts(GLOBAL); 
0399:  MOVLW  C0
039A:  BCF    03.5
039B:  IORWF  0B,F
....................  
.................... lcd_init(); 
039C:  GOTO   0CA
.................... printf(lcd_putc,"\f ADC UYGULAMASI "); 
039D:  MOVLW  6F
039E:  BSF    03.6
039F:  MOVWF  0D
03A0:  MOVLW  00
03A1:  MOVWF  0F
03A2:  BCF    03.6
03A3:  GOTO   15E
.................... delay_ms(1500); 
03A4:  MOVLW  06
03A5:  MOVWF  42
03A6:  CLRF   2B
03A7:  BTFSC  0B.7
03A8:  BSF    2B.7
03A9:  BCF    0B.7
03AA:  MOVLW  FA
03AB:  MOVWF  5C
03AC:  CALL   051
03AD:  BTFSC  2B.7
03AE:  BSF    0B.7
03AF:  DECFSZ 42,F
03B0:  GOTO   3A6
....................  
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(5); 
03B1:  MOVLW  28
03B2:  MOVWF  78
03B3:  MOVF   1F,W
03B4:  ANDLW  C7
03B5:  IORWF  78,W
03B6:  MOVWF  1F
....................       delay_us(20); 
03B7:  MOVLW  06
03B8:  MOVWF  77
03B9:  DECFSZ 77,F
03BA:  GOTO   3B9
03BB:  NOP
....................       bilgi1=read_adc(); 
03BC:  BSF    1F.2
03BD:  BTFSC  1F.2
03BE:  GOTO   3BD
03BF:  BSF    03.5
03C0:  MOVF   1E,W
03C1:  BCF    03.5
03C2:  MOVWF  2C
03C3:  MOVF   1E,W
03C4:  MOVWF  2D
....................       V=0.0048828125*bilgi1;  
03C5:  MOVF   2D,W
03C6:  MOVWF  43
03C7:  MOVF   2C,W
03C8:  MOVWF  42
03C9:  CALL   1B6
03CA:  CLRF   52
03CB:  CLRF   51
03CC:  MOVLW  20
03CD:  MOVWF  50
03CE:  MOVLW  77
03CF:  MOVWF  4F
03D0:  MOVF   7A,W
03D1:  MOVWF  56
03D2:  MOVF   79,W
03D3:  MOVWF  55
03D4:  MOVF   78,W
03D5:  MOVWF  54
03D6:  MOVF   77,W
03D7:  MOVWF  53
03D8:  CALL   1D3
03D9:  MOVF   7A,W
03DA:  MOVWF  35
03DB:  MOVF   79,W
03DC:  MOVWF  34
03DD:  MOVF   78,W
03DE:  MOVWF  33
03DF:  MOVF   77,W
03E0:  MOVWF  32
....................       set_adc_channel(6); 
03E1:  MOVLW  30
03E2:  MOVWF  78
03E3:  MOVF   1F,W
03E4:  ANDLW  C7
03E5:  IORWF  78,W
03E6:  MOVWF  1F
....................       delay_us(20); 
03E7:  MOVLW  06
03E8:  MOVWF  77
03E9:  DECFSZ 77,F
03EA:  GOTO   3E9
03EB:  NOP
....................       bilgi2=read_adc(); 
03EC:  BSF    1F.2
03ED:  BTFSC  1F.2
03EE:  GOTO   3ED
03EF:  BSF    03.5
03F0:  MOVF   1E,W
03F1:  BCF    03.5
03F2:  MOVWF  2E
03F3:  MOVF   1E,W
03F4:  MOVWF  2F
....................       I=0.0048828125*bilgi2;  
03F5:  MOVF   2F,W
03F6:  MOVWF  43
03F7:  MOVF   2E,W
03F8:  MOVWF  42
03F9:  CALL   1B6
03FA:  CLRF   52
03FB:  CLRF   51
03FC:  MOVLW  20
03FD:  MOVWF  50
03FE:  MOVLW  77
03FF:  MOVWF  4F
0400:  MOVF   7A,W
0401:  MOVWF  56
0402:  MOVF   79,W
0403:  MOVWF  55
0404:  MOVF   78,W
0405:  MOVWF  54
0406:  MOVF   77,W
0407:  MOVWF  53
0408:  CALL   1D3
0409:  MOVF   7A,W
040A:  MOVWF  39
040B:  MOVF   79,W
040C:  MOVWF  38
040D:  MOVF   78,W
040E:  MOVWF  37
040F:  MOVF   77,W
0410:  MOVWF  36
....................       set_adc_channel(7); 
0411:  MOVLW  38
0412:  MOVWF  78
0413:  MOVF   1F,W
0414:  ANDLW  C7
0415:  IORWF  78,W
0416:  MOVWF  1F
....................       delay_us(20); 
0417:  MOVLW  06
0418:  MOVWF  77
0419:  DECFSZ 77,F
041A:  GOTO   419
041B:  NOP
....................       bilgi3=read_adc(); 
041C:  BSF    1F.2
041D:  BTFSC  1F.2
041E:  GOTO   41D
041F:  BSF    03.5
0420:  MOVF   1E,W
0421:  BCF    03.5
0422:  MOVWF  30
0423:  MOVF   1E,W
0424:  MOVWF  31
....................       q=0.0048828125*bilgi3; 
0425:  MOVF   31,W
0426:  MOVWF  43
0427:  MOVF   30,W
0428:  MOVWF  42
0429:  CALL   1B6
042A:  CLRF   52
042B:  CLRF   51
042C:  MOVLW  20
042D:  MOVWF  50
042E:  MOVLW  77
042F:  MOVWF  4F
0430:  MOVF   7A,W
0431:  MOVWF  56
0432:  MOVF   79,W
0433:  MOVWF  55
0434:  MOVF   78,W
0435:  MOVWF  54
0436:  MOVF   77,W
0437:  MOVWF  53
0438:  CALL   1D3
0439:  MOVF   7A,W
043A:  MOVWF  41
043B:  MOVF   79,W
043C:  MOVWF  40
043D:  MOVF   78,W
043E:  MOVWF  3F
043F:  MOVF   77,W
0440:  MOVWF  3E
....................       P=V*I*q;   
0441:  MOVF   35,W
0442:  MOVWF  52
0443:  MOVF   34,W
0444:  MOVWF  51
0445:  MOVF   33,W
0446:  MOVWF  50
0447:  MOVF   32,W
0448:  MOVWF  4F
0449:  MOVF   39,W
044A:  MOVWF  56
044B:  MOVF   38,W
044C:  MOVWF  55
044D:  MOVF   37,W
044E:  MOVWF  54
044F:  MOVF   36,W
0450:  MOVWF  53
0451:  CALL   1D3
0452:  MOVF   7A,W
0453:  MOVWF  45
0454:  MOVF   79,W
0455:  MOVWF  44
0456:  MOVF   78,W
0457:  MOVWF  43
0458:  MOVF   77,W
0459:  MOVWF  42
045A:  MOVF   7A,W
045B:  MOVWF  52
045C:  MOVF   79,W
045D:  MOVWF  51
045E:  MOVF   78,W
045F:  MOVWF  50
0460:  MOVF   77,W
0461:  MOVWF  4F
0462:  MOVF   41,W
0463:  MOVWF  56
0464:  MOVF   40,W
0465:  MOVWF  55
0466:  MOVF   3F,W
0467:  MOVWF  54
0468:  MOVF   3E,W
0469:  MOVWF  53
046A:  CALL   1D3
046B:  MOVF   7A,W
046C:  MOVWF  3D
046D:  MOVF   79,W
046E:  MOVWF  3C
046F:  MOVF   78,W
0470:  MOVWF  3B
0471:  MOVF   77,W
0472:  MOVWF  3A
....................       lcd_gotoxy(1,1); 
0473:  MOVLW  01
0474:  MOVWF  50
0475:  MOVWF  51
0476:  CALL   11A
....................       printf(lcd_putc,"\fP=%f",P); 
0477:  MOVLW  0C
0478:  MOVWF  4F
0479:  CALL   12C
047A:  MOVLW  50
047B:  MOVWF  4F
047C:  CALL   12C
047D:  MOVLW  3D
047E:  MOVWF  4F
047F:  CALL   12C
0480:  MOVLW  89
0481:  MOVWF  04
0482:  MOVF   3D,W
0483:  MOVWF  45
0484:  MOVF   3C,W
0485:  MOVWF  44
0486:  MOVF   3B,W
0487:  MOVWF  43
0488:  MOVF   3A,W
0489:  MOVWF  42
048A:  MOVLW  02
048B:  MOVWF  46
048C:  CALL   297
....................       lcd_gotoxy(1,2); 
048D:  MOVLW  01
048E:  MOVWF  50
048F:  MOVLW  02
0490:  MOVWF  51
0491:  CALL   11A
....................       printf(lcd_putc,"V=%f",V); 
0492:  MOVLW  56
0493:  MOVWF  4F
0494:  CALL   12C
0495:  MOVLW  3D
0496:  MOVWF  4F
0497:  CALL   12C
0498:  MOVLW  89
0499:  MOVWF  04
049A:  MOVF   35,W
049B:  MOVWF  45
049C:  MOVF   34,W
049D:  MOVWF  44
049E:  MOVF   33,W
049F:  MOVWF  43
04A0:  MOVF   32,W
04A1:  MOVWF  42
04A2:  MOVLW  02
04A3:  MOVWF  46
04A4:  CALL   297
....................       lcd_gotoxy(1,3); 
04A5:  MOVLW  01
04A6:  MOVWF  50
04A7:  MOVLW  03
04A8:  MOVWF  51
04A9:  CALL   11A
....................       printf(lcd_putc,"I=%f",i); 
04AA:  MOVLW  49
04AB:  MOVWF  4F
04AC:  CALL   12C
04AD:  MOVLW  3D
04AE:  MOVWF  4F
04AF:  CALL   12C
04B0:  MOVLW  89
04B1:  MOVWF  04
04B2:  MOVF   39,W
04B3:  MOVWF  45
04B4:  MOVF   38,W
04B5:  MOVWF  44
04B6:  MOVF   37,W
04B7:  MOVWF  43
04B8:  MOVF   36,W
04B9:  MOVWF  42
04BA:  MOVLW  02
04BB:  MOVWF  46
04BC:  CALL   297
....................       lcd_gotoxy(1,4); 
04BD:  MOVLW  01
04BE:  MOVWF  50
04BF:  MOVLW  04
04C0:  MOVWF  51
04C1:  CALL   11A
....................       printf(lcd_putc,"q=%f",q); 
04C2:  MOVLW  71
04C3:  MOVWF  4F
04C4:  CALL   12C
04C5:  MOVLW  3D
04C6:  MOVWF  4F
04C7:  CALL   12C
04C8:  MOVLW  89
04C9:  MOVWF  04
04CA:  MOVF   41,W
04CB:  MOVWF  45
04CC:  MOVF   40,W
04CD:  MOVWF  44
04CE:  MOVF   3F,W
04CF:  MOVWF  43
04D0:  MOVF   3E,W
04D1:  MOVWF  42
04D2:  MOVLW  02
04D3:  MOVWF  46
04D4:  CALL   297
....................       delay_ms(2500); 
04D5:  MOVLW  0A
04D6:  MOVWF  42
04D7:  CLRF   2B
04D8:  BTFSC  0B.7
04D9:  BSF    2B.7
04DA:  BCF    0B.7
04DB:  MOVLW  FA
04DC:  MOVWF  5C
04DD:  CALL   051
04DE:  BTFSC  2B.7
04DF:  BSF    0B.7
04E0:  DECFSZ 42,F
04E1:  GOTO   4D7
04E2:  GOTO   3B1
....................    } 
....................  
.................... } 
04E3:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
