CCS PCM C Compiler, Version 5.015, 5967               31-May-23 01:51

               Filename:   E:\Okul\Mikroislemci\mikro\Odev10\Kod\main.lst

               ROM used:   1023 words (12%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           33 (9%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   309
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 53,3A
0005:  DATA 61,39
0006:  DATA F4,34
0007:  DATA EE,33
0008:  DATA 2E,17
0009:  DATA 2E,00
000A:  DATA 8C,20
000B:  DATA C4,21
000C:  DATA 20,21
000D:  DATA 69,36
000E:  DATA E7,34
000F:  DATA 3D,10
0010:  DATA 25,36
0011:  DATA 64,00
0012:  DATA 0A,24
0013:  DATA 69,3D
0014:  DATA A0,1E
0015:  DATA A0,12
0016:  DATA 6C,32
0017:  DATA 00,01
0018:  DATA 0C,24
0019:  DATA 49,2D
001A:  DATA A0,20
001B:  DATA D3,24
001C:  DATA 4C,22
001D:  DATA C9,10
001E:  DATA 00,01
001F:  DATA 0A,24
0020:  DATA 69,3D
0021:  DATA A0,1E
0022:  DATA A0,12
0023:  DATA 6C,32
0024:  DATA 00,00
*
0108:  MOVF   0B,W
0109:  MOVWF  29
010A:  BCF    0B.7
010B:  BSF    03.5
010C:  BSF    03.6
010D:  BSF    0C.7
010E:  BSF    0C.0
010F:  NOP
0110:  NOP
0111:  BCF    03.5
0112:  BCF    03.6
0113:  BTFSC  29.7
0114:  BSF    0B.7
0115:  BSF    03.6
0116:  MOVF   0C,W
0117:  ANDLW  7F
0118:  BTFSC  03.2
0119:  GOTO   15C
011A:  BCF    03.6
011B:  MOVWF  29
011C:  BSF    03.6
011D:  MOVF   0D,W
011E:  BCF    03.6
011F:  MOVWF  2A
0120:  BSF    03.6
0121:  MOVF   0F,W
0122:  BCF    03.6
0123:  MOVWF  2B
0124:  MOVF   29,W
0125:  MOVWF  32
0126:  CALL   0DC
0127:  MOVF   2A,W
0128:  BSF    03.6
0129:  MOVWF  0D
012A:  BCF    03.6
012B:  MOVF   2B,W
012C:  BSF    03.6
012D:  MOVWF  0F
012E:  BCF    03.6
012F:  MOVF   0B,W
0130:  MOVWF  2C
0131:  BCF    0B.7
0132:  BSF    03.5
0133:  BSF    03.6
0134:  BSF    0C.7
0135:  BSF    0C.0
0136:  NOP
0137:  NOP
0138:  BCF    03.5
0139:  BCF    03.6
013A:  BTFSC  2C.7
013B:  BSF    0B.7
013C:  BSF    03.6
013D:  RLF    0C,W
013E:  RLF    0E,W
013F:  ANDLW  7F
0140:  BTFSC  03.2
0141:  GOTO   15C
0142:  BCF    03.6
0143:  MOVWF  29
0144:  BSF    03.6
0145:  MOVF   0D,W
0146:  BCF    03.6
0147:  MOVWF  2A
0148:  BSF    03.6
0149:  MOVF   0F,W
014A:  BCF    03.6
014B:  MOVWF  2B
014C:  MOVF   29,W
014D:  MOVWF  32
014E:  CALL   0DC
014F:  MOVF   2A,W
0150:  BSF    03.6
0151:  MOVWF  0D
0152:  BCF    03.6
0153:  MOVF   2B,W
0154:  BSF    03.6
0155:  MOVWF  0F
0156:  INCF   0D,F
0157:  BTFSC  03.2
0158:  INCF   0F,F
0159:  BCF    03.6
015A:  GOTO   108
015B:  BSF    03.6
015C:  BCF    03.6
015D:  RETURN
015E:  MOVLW  8E
015F:  MOVWF  77
0160:  MOVF   2A,W
0161:  MOVWF  78
0162:  MOVF   29,W
0163:  MOVWF  79
0164:  CLRF   7A
0165:  MOVF   78,F
0166:  BTFSS  03.2
0167:  GOTO   172
0168:  MOVF   79,W
0169:  MOVWF  78
016A:  CLRF   79
016B:  MOVLW  08
016C:  SUBWF  77,F
016D:  MOVF   78,F
016E:  BTFSS  03.2
016F:  GOTO   172
0170:  CLRF   77
0171:  GOTO   17A
0172:  BCF    03.0
0173:  BTFSC  78.7
0174:  GOTO   179
0175:  RLF    79,F
0176:  RLF    78,F
0177:  DECF   77,F
0178:  GOTO   172
0179:  BCF    78.7
017A:  BCF    0A.3
017B:  BCF    0A.4
017C:  GOTO   35F (RETURN)
017D:  MOVF   29,W
017E:  BTFSC  03.2
017F:  GOTO   1ED
0180:  MOVWF  31
0181:  MOVF   2D,W
0182:  BTFSC  03.2
0183:  GOTO   1ED
0184:  ADDWF  31,F
0185:  BTFSC  03.0
0186:  GOTO   18E
0187:  MOVLW  7F
0188:  SUBWF  31,F
0189:  BTFSS  03.0
018A:  GOTO   1ED
018B:  BTFSC  03.2
018C:  GOTO   1ED
018D:  GOTO   192
018E:  MOVLW  81
018F:  ADDWF  31,F
0190:  BTFSC  03.0
0191:  GOTO   1ED
0192:  MOVF   31,W
0193:  MOVWF  77
0194:  CLRF   78
0195:  CLRF   79
0196:  CLRF   7A
0197:  MOVF   2A,W
0198:  MOVWF  35
0199:  BSF    35.7
019A:  MOVF   2B,W
019B:  MOVWF  34
019C:  MOVF   2C,W
019D:  MOVWF  33
019E:  MOVLW  18
019F:  MOVWF  31
01A0:  CLRF   32
01A1:  BTFSS  33.0
01A2:  GOTO   1BB
01A3:  MOVF   30,W
01A4:  ADDWF  7A,F
01A5:  BTFSS  03.0
01A6:  GOTO   1AD
01A7:  INCF   79,F
01A8:  BTFSS  03.2
01A9:  GOTO   1AD
01AA:  INCF   78,F
01AB:  BTFSC  03.2
01AC:  BSF    32.7
01AD:  MOVF   2F,W
01AE:  ADDWF  79,F
01AF:  BTFSS  03.0
01B0:  GOTO   1B4
01B1:  INCF   78,F
01B2:  BTFSC  03.2
01B3:  BSF    32.7
01B4:  MOVF   2E,W
01B5:  MOVWF  2B
01B6:  BSF    2B.7
01B7:  MOVF   2B,W
01B8:  ADDWF  78,F
01B9:  BTFSC  03.0
01BA:  BSF    32.7
01BB:  RLF    32,F
01BC:  RRF    78,F
01BD:  RRF    79,F
01BE:  RRF    7A,F
01BF:  RRF    35,F
01C0:  RRF    34,F
01C1:  RRF    33,F
01C2:  BCF    03.0
01C3:  DECFSZ 31,F
01C4:  GOTO   1A0
01C5:  MOVLW  01
01C6:  ADDWF  77,F
01C7:  BTFSC  03.0
01C8:  GOTO   1ED
01C9:  BTFSC  78.7
01CA:  GOTO   1D2
01CB:  RLF    35,F
01CC:  RLF    7A,F
01CD:  RLF    79,F
01CE:  RLF    78,F
01CF:  DECF   77,F
01D0:  BTFSC  03.2
01D1:  GOTO   1ED
01D2:  BTFSS  35.7
01D3:  GOTO   1E3
01D4:  INCF   7A,F
01D5:  BTFSS  03.2
01D6:  GOTO   1E3
01D7:  INCF   79,F
01D8:  BTFSS  03.2
01D9:  GOTO   1E3
01DA:  INCF   78,F
01DB:  BTFSS  03.2
01DC:  GOTO   1E3
01DD:  RRF    78,F
01DE:  RRF    79,F
01DF:  RRF    7A,F
01E0:  INCF   77,F
01E1:  BTFSC  03.2
01E2:  GOTO   1ED
01E3:  MOVF   2A,W
01E4:  MOVWF  32
01E5:  MOVF   2E,W
01E6:  XORWF  32,F
01E7:  BTFSS  32.7
01E8:  GOTO   1EB
01E9:  BSF    78.7
01EA:  GOTO   1F1
01EB:  BCF    78.7
01EC:  GOTO   1F1
01ED:  CLRF   77
01EE:  CLRF   78
01EF:  CLRF   79
01F0:  CLRF   7A
01F1:  BCF    0A.3
01F2:  BCF    0A.4
01F3:  GOTO   36E (RETURN)
01F4:  MOVLW  10
01F5:  MOVWF  2D
01F6:  CLRF   77
01F7:  CLRF   7A
01F8:  RRF    2A,F
01F9:  RRF    29,F
01FA:  BTFSS  03.0
01FB:  GOTO   202
01FC:  MOVF   2B,W
01FD:  ADDWF  77,F
01FE:  BTFSC  03.0
01FF:  INCF   7A,F
0200:  MOVF   2C,W
0201:  ADDWF  7A,F
0202:  RRF    7A,F
0203:  RRF    77,F
0204:  RRF    79,F
0205:  RRF    78,F
0206:  DECFSZ 2D,F
0207:  GOTO   1F8
0208:  BCF    0A.3
0209:  BCF    0A.4
020A:  GOTO   37E (RETURN)
020B:  CLRF   78
020C:  CLRF   79
020D:  CLRF   77
020E:  CLRF   7A
020F:  MOVF   2E,W
0210:  BTFSS  03.2
0211:  GOTO   215
0212:  MOVF   2D,W
0213:  BTFSC  03.2
0214:  GOTO   22F
0215:  MOVLW  10
0216:  MOVWF  2F
0217:  BCF    03.0
0218:  RLF    2B,F
0219:  RLF    2C,F
021A:  RLF    77,F
021B:  RLF    7A,F
021C:  MOVF   2E,W
021D:  SUBWF  7A,W
021E:  BTFSS  03.2
021F:  GOTO   222
0220:  MOVF   2D,W
0221:  SUBWF  77,W
0222:  BTFSS  03.0
0223:  GOTO   22B
0224:  MOVF   2D,W
0225:  SUBWF  77,F
0226:  BTFSS  03.0
0227:  DECF   7A,F
0228:  MOVF   2E,W
0229:  SUBWF  7A,F
022A:  BSF    03.0
022B:  RLF    78,F
022C:  RLF    79,F
022D:  DECFSZ 2F,F
022E:  GOTO   217
022F:  BCF    0A.3
0230:  BCF    0A.4
0231:  GOTO   38A (RETURN)
0232:  MOVF   0B,W
0233:  MOVWF  2A
0234:  BCF    0B.7
0235:  BSF    03.5
0236:  BSF    03.6
0237:  BSF    0C.7
0238:  BSF    0C.0
0239:  NOP
023A:  NOP
023B:  BCF    03.5
023C:  BCF    03.6
023D:  BTFSC  2A.7
023E:  BSF    0B.7
023F:  BTFSC  03.0
0240:  GOTO   269
0241:  BSF    03.6
0242:  MOVF   0C,W
0243:  ANDLW  7F
0244:  BCF    03.6
0245:  MOVWF  2A
0246:  BSF    03.6
0247:  MOVF   0D,W
0248:  BCF    03.6
0249:  MOVWF  2B
024A:  BSF    03.6
024B:  MOVF   0F,W
024C:  BCF    03.6
024D:  MOVWF  2C
024E:  MOVF   2A,W
024F:  MOVWF  32
0250:  CALL   0DC
0251:  MOVF   2B,W
0252:  BSF    03.6
0253:  MOVWF  0D
0254:  BCF    03.6
0255:  MOVF   2C,W
0256:  BSF    03.6
0257:  MOVWF  0F
0258:  BCF    03.6
0259:  MOVF   0B,W
025A:  MOVWF  2D
025B:  BCF    0B.7
025C:  BSF    03.5
025D:  BSF    03.6
025E:  BSF    0C.7
025F:  BSF    0C.0
0260:  NOP
0261:  NOP
0262:  BCF    03.5
0263:  BCF    03.6
0264:  BTFSC  2D.7
0265:  BSF    0B.7
0266:  DECFSZ 29,F
0267:  GOTO   269
0268:  GOTO   288
0269:  BSF    03.6
026A:  RLF    0C,W
026B:  RLF    0E,W
026C:  ANDLW  7F
026D:  BCF    03.6
026E:  MOVWF  2A
026F:  BSF    03.6
0270:  MOVF   0D,W
0271:  BCF    03.6
0272:  MOVWF  2B
0273:  BSF    03.6
0274:  MOVF   0F,W
0275:  BCF    03.6
0276:  MOVWF  2C
0277:  MOVF   2A,W
0278:  MOVWF  32
0279:  CALL   0DC
027A:  MOVF   2B,W
027B:  BSF    03.6
027C:  MOVWF  0D
027D:  BCF    03.6
027E:  MOVF   2C,W
027F:  BSF    03.6
0280:  MOVWF  0F
0281:  INCF   0D,F
0282:  BTFSC  03.2
0283:  INCF   0F,F
0284:  BCF    03.0
0285:  BCF    03.6
0286:  DECFSZ 29,F
0287:  GOTO   232
0288:  RETURN
0289:  CLRF   31
028A:  MOVF   04,W
028B:  MOVWF  30
028C:  BCF    31.0
028D:  BTFSC  03.7
028E:  BSF    31.0
028F:  BTFSS  2A.7
0290:  GOTO   299
0291:  BSF    30.7
0292:  BTFSS  30.4
0293:  INCF   30,F
0294:  COMF   29,F
0295:  COMF   2A,F
0296:  INCF   29,F
0297:  BTFSC  03.2
0298:  INCF   2A,F
0299:  SWAPF  2A,W
029A:  IORLW  F0
029B:  MOVWF  2C
029C:  ADDWF  2C,F
029D:  ADDLW  E2
029E:  MOVWF  2D
029F:  ADDLW  32
02A0:  MOVWF  2F
02A1:  MOVF   2A,W
02A2:  ANDLW  0F
02A3:  ADDWF  2D,F
02A4:  ADDWF  2D,F
02A5:  ADDWF  2F,F
02A6:  ADDLW  E9
02A7:  MOVWF  2E
02A8:  ADDWF  2E,F
02A9:  ADDWF  2E,F
02AA:  SWAPF  29,W
02AB:  ANDLW  0F
02AC:  ADDWF  2E,F
02AD:  ADDWF  2F,F
02AE:  RLF    2E,F
02AF:  RLF    2F,F
02B0:  COMF   2F,F
02B1:  RLF    2F,F
02B2:  MOVF   29,W
02B3:  ANDLW  0F
02B4:  ADDWF  2F,F
02B5:  RLF    2C,F
02B6:  MOVLW  07
02B7:  MOVWF  2B
02B8:  MOVLW  0A
02B9:  ADDWF  2F,F
02BA:  DECF   2E,F
02BB:  BTFSS  03.0
02BC:  GOTO   2B9
02BD:  ADDWF  2E,F
02BE:  DECF   2D,F
02BF:  BTFSS  03.0
02C0:  GOTO   2BD
02C1:  ADDWF  2D,F
02C2:  DECF   2C,F
02C3:  BTFSS  03.0
02C4:  GOTO   2C1
02C5:  ADDWF  2C,F
02C6:  DECF   2B,F
02C7:  BTFSS  03.0
02C8:  GOTO   2C5
02C9:  MOVLW  2B
02CA:  MOVWF  04
02CB:  BCF    03.7
02CC:  MOVLW  07
02CD:  ANDWF  30,W
02CE:  BCF    30.6
02CF:  DECF   04,F
02D0:  ANDWF  30,W
02D1:  BTFSS  03.2
02D2:  GOTO   2DA
02D3:  BTFSC  30.4
02D4:  INCF   04,F
02D5:  BTFSC  30.4
02D6:  GOTO   2DA
02D7:  MOVLW  20
02D8:  MOVWF  77
02D9:  GOTO   2F7
02DA:  ADDWF  04,F
02DB:  MOVLW  2F
02DC:  SUBWF  04,W
02DD:  BTFSC  03.2
02DE:  BSF    30.6
02DF:  MOVF   00,W
02E0:  MOVWF  77
02E1:  BTFSS  03.2
02E2:  GOTO   2EB
02E3:  BTFSC  30.6
02E4:  GOTO   2EB
02E5:  BTFSC  30.4
02E6:  GOTO   305
02E7:  BTFSC  30.3
02E8:  GOTO   2EB
02E9:  MOVLW  20
02EA:  GOTO   2F6
02EB:  BTFSS  30.7
02EC:  GOTO   2F3
02ED:  MOVLW  2D
02EE:  MOVWF  77
02EF:  DECF   04,F
02F0:  BCF    30.6
02F1:  BCF    30.7
02F2:  GOTO   2F7
02F3:  BSF    30.3
02F4:  BCF    30.4
02F5:  MOVLW  30
02F6:  ADDWF  77,F
02F7:  CLRF   2A
02F8:  MOVF   04,W
02F9:  MOVWF  29
02FA:  BCF    2A.0
02FB:  BTFSC  03.7
02FC:  BSF    2A.0
02FD:  MOVF   77,W
02FE:  MOVWF  32
02FF:  CALL   0DC
0300:  MOVF   29,W
0301:  MOVWF  04
0302:  BCF    03.7
0303:  BTFSC  2A.0
0304:  BSF    03.7
0305:  INCF   04,F
0306:  BTFSS  30.6
0307:  GOTO   2DB
0308:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=8 
.................... #use delay(clock=4000000) 
*
0025:  MOVLW  33
0026:  MOVWF  04
0027:  BCF    03.7
0028:  MOVF   00,W
0029:  BTFSC  03.2
002A:  GOTO   039
002B:  MOVLW  01
002C:  MOVWF  78
002D:  CLRF   77
002E:  DECFSZ 77,F
002F:  GOTO   02E
0030:  DECFSZ 78,F
0031:  GOTO   02D
0032:  MOVLW  4A
0033:  MOVWF  77
0034:  DECFSZ 77,F
0035:  GOTO   034
0036:  GOTO   037
0037:  DECFSZ 00,F
0038:  GOTO   02B
0039:  RETURN
.................... #fuses XT,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT 
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0052:  MOVLW  0F
0053:  BSF    03.5
0054:  ANDWF  06,W
0055:  IORLW  F0
0056:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0057:  BCF    03.5
0058:  BSF    06.2
....................    delay_cycles(1); 
0059:  NOP
....................    lcd_output_enable(1); 
005A:  BSF    06.0
....................    delay_cycles(1); 
005B:  NOP
....................    high = lcd_read_nibble(); 
005C:  CALL   046
005D:  MOVF   78,W
005E:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
005F:  BCF    06.0
....................    delay_cycles(1); 
0060:  NOP
....................    lcd_output_enable(1); 
0061:  BSF    06.0
....................    delay_us(1); 
0062:  NOP
....................    low = lcd_read_nibble(); 
0063:  CALL   046
0064:  MOVF   78,W
0065:  MOVWF  39
....................        
....................    lcd_output_enable(0); 
0066:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0067:  MOVLW  0F
0068:  BSF    03.5
0069:  ANDWF  06,W
006A:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
006B:  BCF    03.5
006C:  SWAPF  3A,W
006D:  MOVWF  77
006E:  MOVLW  F0
006F:  ANDWF  77,F
0070:  MOVF   77,W
0071:  IORWF  39,W
0072:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0046:  MOVF   06,W
0047:  MOVWF  77
0048:  SWAPF  06,W
0049:  ANDLW  0F
004A:  MOVWF  78
....................   #endif 
004B:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
003A:  SWAPF  3A,W
003B:  ANDLW  F0
003C:  MOVWF  77
003D:  MOVLW  0F
003E:  ANDWF  06,W
003F:  IORWF  77,W
0040:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0041:  NOP
....................    lcd_output_enable(1); 
0042:  BSF    06.0
....................    delay_us(2); 
0043:  GOTO   044
....................    lcd_output_enable(0); 
0044:  BCF    06.0
0045:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
004C:  BSF    03.5
004D:  BCF    06.0
....................    lcd_rs_tris(); 
004E:  BCF    06.1
....................    lcd_rw_tris(); 
004F:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0050:  BCF    03.5
0051:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0073:  MOVF   78,W
0074:  MOVWF  39
0075:  BTFSC  39.7
0076:  GOTO   052
....................    lcd_output_rs(address); 
0077:  BTFSS  37.0
0078:  BCF    06.1
0079:  BTFSC  37.0
007A:  BSF    06.1
....................    delay_cycles(1); 
007B:  NOP
....................    lcd_output_rw(0); 
007C:  BCF    06.2
....................    delay_cycles(1); 
007D:  NOP
....................    lcd_output_enable(0); 
007E:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
007F:  SWAPF  38,W
0080:  MOVWF  39
0081:  MOVLW  0F
0082:  ANDWF  39,F
0083:  MOVF   39,W
0084:  MOVWF  3A
0085:  CALL   03A
....................    lcd_send_nibble(n & 0xf); 
0086:  MOVF   38,W
0087:  ANDLW  0F
0088:  MOVWF  39
0089:  MOVWF  3A
008A:  CALL   03A
008B:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
008C:  MOVLW  28
008D:  MOVWF  2A
008E:  MOVLW  0C
008F:  MOVWF  2B
0090:  MOVLW  01
0091:  MOVWF  2C
0092:  MOVLW  06
0093:  MOVWF  2D
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0094:  BCF    06.0
....................    lcd_output_rs(0); 
0095:  BCF    06.1
....................    lcd_output_rw(0); 
0096:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0097:  MOVLW  0F
0098:  BSF    03.5
0099:  ANDWF  06,W
009A:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
009B:  BCF    06.0
....................    lcd_rs_tris(); 
009C:  BCF    06.1
....................    lcd_rw_tris(); 
009D:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
009E:  MOVLW  0F
009F:  BCF    03.5
00A0:  MOVWF  33
00A1:  CALL   025
....................    for(i=1;i<=3;++i) 
00A2:  MOVLW  01
00A3:  MOVWF  29
00A4:  MOVF   29,W
00A5:  SUBLW  03
00A6:  BTFSS  03.0
00A7:  GOTO   0B0
....................    { 
....................        lcd_send_nibble(3); 
00A8:  MOVLW  03
00A9:  MOVWF  3A
00AA:  CALL   03A
....................        delay_ms(5); 
00AB:  MOVLW  05
00AC:  MOVWF  33
00AD:  CALL   025
00AE:  INCF   29,F
00AF:  GOTO   0A4
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B0:  MOVLW  02
00B1:  MOVWF  3A
00B2:  CALL   03A
....................    delay_ms(5); 
00B3:  MOVLW  05
00B4:  MOVWF  33
00B5:  CALL   025
....................    for(i=0;i<=3;++i) 
00B6:  CLRF   29
00B7:  MOVF   29,W
00B8:  SUBLW  03
00B9:  BTFSS  03.0
00BA:  GOTO   0C7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00BB:  MOVLW  2A
00BC:  ADDWF  29,W
00BD:  MOVWF  04
00BE:  BCF    03.7
00BF:  MOVF   00,W
00C0:  MOVWF  2E
00C1:  CLRF   37
00C2:  MOVF   2E,W
00C3:  MOVWF  38
00C4:  CALL   04C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C5:  INCF   29,F
00C6:  GOTO   0B7
00C7:  BCF    0A.3
00C8:  BCF    0A.4
00C9:  GOTO   342 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00CA:  DECFSZ 34,W
00CB:  GOTO   0CD
00CC:  GOTO   0D0
....................       address=LCD_LINE_TWO; 
00CD:  MOVLW  40
00CE:  MOVWF  35
00CF:  GOTO   0D1
....................    else 
....................       address=0; 
00D0:  CLRF   35
....................       
....................    address+=x-1; 
00D1:  MOVLW  01
00D2:  SUBWF  33,W
00D3:  ADDWF  35,F
....................    lcd_send_byte(0,0x80|address); 
00D4:  MOVF   35,W
00D5:  IORLW  80
00D6:  MOVWF  36
00D7:  CLRF   37
00D8:  MOVF   36,W
00D9:  MOVWF  38
00DA:  CALL   04C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DB:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00DC:  MOVF   32,W
00DD:  XORLW  07
00DE:  BTFSC  03.2
00DF:  GOTO   0EA
00E0:  XORLW  0B
00E1:  BTFSC  03.2
00E2:  GOTO   0EF
00E3:  XORLW  06
00E4:  BTFSC  03.2
00E5:  GOTO   0F7
00E6:  XORLW  02
00E7:  BTFSC  03.2
00E8:  GOTO   0FD
00E9:  GOTO   102
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00EA:  MOVLW  01
00EB:  MOVWF  33
00EC:  MOVWF  34
00ED:  CALL   0CA
00EE:  GOTO   107
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00EF:  CLRF   37
00F0:  MOVLW  01
00F1:  MOVWF  38
00F2:  CALL   04C
....................                      delay_ms(2); 
00F3:  MOVLW  02
00F4:  MOVWF  33
00F5:  CALL   025
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F6:  GOTO   107
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00F7:  MOVLW  01
00F8:  MOVWF  33
00F9:  MOVLW  02
00FA:  MOVWF  34
00FB:  CALL   0CA
00FC:  GOTO   107
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00FD:  CLRF   37
00FE:  MOVLW  10
00FF:  MOVWF  38
0100:  CALL   04C
0101:  GOTO   107
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0102:  MOVLW  01
0103:  MOVWF  37
0104:  MOVF   32,W
0105:  MOVWF  38
0106:  CALL   04C
....................      #endif 
....................    } 
0107:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... long int adc_bilgi; 
.................... float adc_voltaj; 
.................... long int oran;  
....................  
.................... void main() 
*
0309:  MOVF   03,W
030A:  ANDLW  1F
030B:  MOVWF  03
030C:  MOVLW  FF
030D:  MOVWF  28
030E:  BSF    03.5
030F:  BSF    1F.0
0310:  BSF    1F.1
0311:  BSF    1F.2
0312:  BCF    1F.3
0313:  MOVLW  07
0314:  MOVWF  1C
0315:  BCF    03.7
.................... { 
....................    set_tris_a(0xff); 
0316:  MOVLW  FF
0317:  MOVWF  05
....................    set_tris_b(0x00); 
0318:  MOVLW  00
0319:  MOVWF  06
....................    set_tris_c(0x00); 
031A:  MOVWF  07
031B:  BCF    03.5
031C:  MOVWF  28
....................    output_c(0x00); 
031D:  MOVWF  28
031E:  BSF    03.5
031F:  CLRF   07
0320:  BCF    03.5
0321:  CLRF   07
....................     
....................    setup_adc(adc_clock_div_32); 
0322:  BSF    03.5
0323:  BCF    1F.6
0324:  BCF    03.5
0325:  BCF    1F.6
0326:  BSF    1F.7
0327:  BSF    03.5
0328:  BCF    1F.7
0329:  BCF    03.5
032A:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
032B:  BSF    03.5
032C:  BCF    1F.0
032D:  BCF    1F.1
032E:  BCF    1F.2
032F:  BCF    1F.3
....................     
....................    setup_ccp1(CCP_PWM); 
0330:  BCF    03.5
0331:  BCF    28.2
0332:  MOVF   28,W
0333:  BSF    03.5
0334:  MOVWF  07
0335:  BCF    03.5
0336:  BCF    07.2
0337:  MOVLW  0C
0338:  MOVWF  17
....................    setup_timer_2(T2_DIV_BY_16,255,1); 
0339:  MOVLW  00
033A:  MOVWF  78
033B:  IORLW  06
033C:  MOVWF  12
033D:  MOVLW  FF
033E:  BSF    03.5
033F:  MOVWF  12
....................     
....................    lcd_init(); 
0340:  BCF    03.5
0341:  GOTO   08C
....................    printf(lcd_putc,"Starting..."); 
0342:  MOVLW  04
0343:  BSF    03.6
0344:  MOVWF  0D
0345:  MOVLW  00
0346:  MOVWF  0F
0347:  BCF    03.6
0348:  CALL   108
....................    set_adc_channel(0); 
0349:  MOVLW  00
034A:  MOVWF  78
034B:  MOVF   1F,W
034C:  ANDLW  C7
034D:  IORWF  78,W
034E:  MOVWF  1F
....................    delay_us(50); 
034F:  MOVLW  10
0350:  MOVWF  77
0351:  DECFSZ 77,F
0352:  GOTO   351
0353:  NOP
....................     
....................    while(true) 
....................    { 
....................       adc_bilgi = read_adc(); 
0354:  BSF    1F.2
0355:  BTFSC  1F.2
0356:  GOTO   355
0357:  CLRF   21
0358:  MOVF   1E,W
0359:  MOVWF  20
....................       adc_voltaj = 0.01953125 * adc_bilgi; 
035A:  MOVF   21,W
035B:  MOVWF  2A
035C:  MOVF   20,W
035D:  MOVWF  29
035E:  GOTO   15E
035F:  CLRF   2C
0360:  CLRF   2B
0361:  MOVLW  20
0362:  MOVWF  2A
0363:  MOVLW  79
0364:  MOVWF  29
0365:  MOVF   7A,W
0366:  MOVWF  30
0367:  MOVF   79,W
0368:  MOVWF  2F
0369:  MOVF   78,W
036A:  MOVWF  2E
036B:  MOVF   77,W
036C:  MOVWF  2D
036D:  GOTO   17D
036E:  MOVF   7A,W
036F:  MOVWF  25
0370:  MOVF   79,W
0371:  MOVWF  24
0372:  MOVF   78,W
0373:  MOVWF  23
0374:  MOVF   77,W
0375:  MOVWF  22
....................       oran = (adc_bilgi*100) / 255 ; 
0376:  MOVF   21,W
0377:  MOVWF  2A
0378:  MOVF   20,W
0379:  MOVWF  29
037A:  CLRF   2C
037B:  MOVLW  64
037C:  MOVWF  2B
037D:  GOTO   1F4
037E:  MOVF   79,W
037F:  MOVWF  2A
0380:  MOVF   78,W
0381:  MOVWF  29
0382:  MOVF   79,W
0383:  MOVWF  2C
0384:  MOVF   78,W
0385:  MOVWF  2B
0386:  CLRF   2E
0387:  MOVLW  FF
0388:  MOVWF  2D
0389:  GOTO   20B
038A:  MOVF   79,W
038B:  MOVWF  27
038C:  MOVF   78,W
038D:  MOVWF  26
....................       set_pwm1_duty(adc_bilgi); 
038E:  MOVF   21,W
038F:  MOVWF  79
0390:  MOVF   20,W
0391:  MOVWF  78
0392:  RRF    79,F
0393:  RRF    78,F
0394:  RRF    79,F
0395:  RRF    78,F
0396:  RRF    79,F
0397:  MOVF   78,W
0398:  MOVWF  15
0399:  RRF    79,F
039A:  RRF    79,W
039B:  ANDLW  30
039C:  MOVWF  77
039D:  MOVF   17,W
039E:  ANDLW  CF
039F:  IORWF  77,W
03A0:  MOVWF  17
....................       printf(lcd_putc, "\fADC Bilgi= %ld", adc_bilgi); 
03A1:  MOVLW  0A
03A2:  BSF    03.6
03A3:  MOVWF  0D
03A4:  MOVLW  00
03A5:  MOVWF  0F
03A6:  BCF    03.0
03A7:  MOVLW  0C
03A8:  BCF    03.6
03A9:  MOVWF  29
03AA:  CALL   232
03AB:  MOVLW  10
03AC:  MOVWF  04
03AD:  MOVF   21,W
03AE:  MOVWF  2A
03AF:  MOVF   20,W
03B0:  MOVWF  29
03B1:  CALL   289
....................       printf(lcd_putc,"\nHiz = %ld", oran); 
03B2:  MOVLW  12
03B3:  BSF    03.6
03B4:  MOVWF  0D
03B5:  MOVLW  00
03B6:  MOVWF  0F
03B7:  BCF    03.0
03B8:  MOVLW  07
03B9:  BCF    03.6
03BA:  MOVWF  29
03BB:  CALL   232
03BC:  MOVLW  10
03BD:  MOVWF  04
03BE:  MOVF   27,W
03BF:  MOVWF  2A
03C0:  MOVF   26,W
03C1:  MOVWF  29
03C2:  CALL   289
....................       output_high(pin_c3); 
03C3:  BCF    28.3
03C4:  MOVF   28,W
03C5:  BSF    03.5
03C6:  MOVWF  07
03C7:  BCF    03.5
03C8:  BSF    07.3
....................       output_low(pin_c4); 
03C9:  BCF    28.4
03CA:  MOVF   28,W
03CB:  BSF    03.5
03CC:  MOVWF  07
03CD:  BCF    03.5
03CE:  BCF    07.4
....................       if(oran > 90) 
03CF:  MOVF   27,F
03D0:  BTFSS  03.2
03D1:  GOTO   3D6
03D2:  MOVF   26,W
03D3:  SUBLW  5A
03D4:  BTFSC  03.0
03D5:  GOTO   3FA
....................       { 
....................          output_low(pin_c3); 
03D6:  BCF    28.3
03D7:  MOVF   28,W
03D8:  BSF    03.5
03D9:  MOVWF  07
03DA:  BCF    03.5
03DB:  BCF    07.3
....................          output_low(pin_c4); 
03DC:  BCF    28.4
03DD:  MOVF   28,W
03DE:  BSF    03.5
03DF:  MOVWF  07
03E0:  BCF    03.5
03E1:  BCF    07.4
....................          printf(lcd_putc,"\fHIZ ASILDI!"); 
03E2:  MOVLW  18
03E3:  BSF    03.6
03E4:  MOVWF  0D
03E5:  MOVLW  00
03E6:  MOVWF  0F
03E7:  BCF    03.6
03E8:  CALL   108
....................          printf(lcd_putc,"\nHiz = %ld", oran); 
03E9:  MOVLW  1F
03EA:  BSF    03.6
03EB:  MOVWF  0D
03EC:  MOVLW  00
03ED:  MOVWF  0F
03EE:  BCF    03.0
03EF:  MOVLW  07
03F0:  BCF    03.6
03F1:  MOVWF  29
03F2:  CALL   232
03F3:  MOVLW  10
03F4:  MOVWF  04
03F5:  MOVF   27,W
03F6:  MOVWF  2A
03F7:  MOVF   26,W
03F8:  MOVWF  29
03F9:  CALL   289
....................       } 
....................       delay_ms(50); 
03FA:  MOVLW  32
03FB:  MOVWF  33
03FC:  CALL   025
03FD:  GOTO   354
....................    } 
.................... } 
03FE:  SLEEP

Configuration Fuses:
   Word  1: 3F79   XT NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
