CCS PCM C Compiler, Version 5.015, 5967               15-Mar-23 01:28

               Filename:   E:\mikro\Ödev2\2. soru\main.lst

               ROM used:   193 words (2%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           10 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT 
.................... #use delay(clock=4000000) 
0004:  MOVLW  24
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #define start pin_A0 
.................... #define stop pin_A1 
.................... int i,a,led,c=0; 
....................  
.................... void main() 
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  CLRF   23
001D:  BSF    03.5
001E:  BSF    1F.0
001F:  BSF    1F.1
0020:  BSF    1F.2
0021:  BCF    1F.3
0022:  MOVLW  07
0023:  MOVWF  1C
0024:  BCF    03.7
.................... { 
....................  
.................... setup_psp(PSP_DISABLED);  
0025:  BCF    09.4
.................... setup_timer_1(T1_DISABLED);  
0026:  BCF    03.5
0027:  CLRF   10
.................... setup_timer_2(T2_DISABLED,0,1);  
0028:  MOVLW  00
0029:  MOVWF  78
002A:  MOVWF  12
002B:  MOVLW  00
002C:  BSF    03.5
002D:  MOVWF  12
.................... setup_adc_ports(NO_ANALOGS);  
002E:  BSF    1F.0
002F:  BSF    1F.1
0030:  BSF    1F.2
0031:  BCF    1F.3
.................... setup_adc(ADC_OFF);   
0032:  BCF    03.5
0033:  BCF    1F.0
.................... setup_CCP1(CCP_OFF); 
0034:  MOVLW  F0
0035:  ANDWF  17,F
.................... setup_CCP2(CCP_OFF);  
0036:  ANDWF  1D,F
.................... set_tris_a(0xFF); 
0037:  MOVLW  FF
0038:  BSF    03.5
0039:  MOVWF  05
.................... set_tris_b(0x00); 
003A:  MOVLW  00
003B:  MOVWF  06
.................... output_b(0x00); 
003C:  CLRF   06
003D:  BCF    03.5
003E:  CLRF   06
.................... while(TRUE) 
.................... { 
.................... if(input(start)) 
003F:  BSF    03.5
0040:  BSF    05.0
0041:  BCF    03.5
0042:  BTFSS  05.0
0043:  GOTO   04E
.................... { 
.................... delay_ms(15); 
0044:  MOVLW  0F
0045:  MOVWF  24
0046:  CALL   004
.................... c=c+1; 
0047:  MOVLW  01
0048:  ADDWF  23,F
.................... while(input(start)); 
0049:  BSF    03.5
004A:  BSF    05.0
004B:  BCF    03.5
004C:  BTFSC  05.0
004D:  GOTO   049
.................... } 
.................... if(input(stop)) 
004E:  BSF    03.5
004F:  BSF    05.1
0050:  BCF    03.5
0051:  BTFSS  05.1
0052:  GOTO   05D
.................... { 
.................... c=0; 
0053:  CLRF   23
.................... output_b(0x00); 
0054:  BSF    03.5
0055:  CLRF   06
0056:  BCF    03.5
0057:  CLRF   06
.................... while(input(stop)); 
0058:  BSF    03.5
0059:  BSF    05.1
005A:  BCF    03.5
005B:  BTFSC  05.1
005C:  GOTO   058
.................... } 
.................... if(c==10) 
005D:  MOVF   23,W
005E:  SUBLW  0A
005F:  BTFSS  03.2
0060:  GOTO   0BF
.................... { 
.................... led=1; 
0061:  MOVLW  01
0062:  MOVWF  22
.................... if(input(stop)) 
0063:  BSF    03.5
0064:  BSF    05.1
0065:  BCF    03.5
0066:  BTFSS  05.1
0067:  GOTO   06D
.................... { 
.................... output_b(0x00); 
0068:  BSF    03.5
0069:  CLRF   06
006A:  BCF    03.5
006B:  CLRF   06
.................... break;  
006C:  GOTO   0C0
.................... } 
.................... for(a=0;a<100;a++) 
006D:  CLRF   21
006E:  MOVF   21,W
006F:  SUBLW  63
0070:  BTFSS  03.0
0071:  GOTO   0BF
.................... { 
.................... if(input(stop)) 
0072:  BSF    03.5
0073:  BSF    05.1
0074:  BCF    03.5
0075:  BTFSS  05.1
0076:  GOTO   07C
.................... { 
.................... output_b(0x00); 
0077:  BSF    03.5
0078:  CLRF   06
0079:  BCF    03.5
007A:  CLRF   06
.................... break;  
007B:  GOTO   0BF
.................... } 
.................... for(i=0;i<=7;i++) 
007C:  CLRF   20
007D:  MOVF   20,W
007E:  SUBLW  07
007F:  BTFSS  03.0
0080:  GOTO   097
.................... { 
.................... if(input(stop)) 
0081:  BSF    03.5
0082:  BSF    05.1
0083:  BCF    03.5
0084:  BTFSS  05.1
0085:  GOTO   08B
.................... { 
.................... output_b(0x00); 
0086:  BSF    03.5
0087:  CLRF   06
0088:  BCF    03.5
0089:  CLRF   06
.................... break; 
008A:  GOTO   097
.................... } 
.................... output_b(led); 
008B:  BSF    03.5
008C:  CLRF   06
008D:  BCF    03.5
008E:  MOVF   22,W
008F:  MOVWF  06
.................... led=led<<1; 
0090:  BCF    03.0
0091:  RLF    22,F
.................... delay_ms(100); 
0092:  MOVLW  64
0093:  MOVWF  24
0094:  CALL   004
0095:  INCF   20,F
0096:  GOTO   07D
.................... }  
.................... led=0x80; 
0097:  MOVLW  80
0098:  MOVWF  22
.................... output_b(led); 
0099:  BSF    03.5
009A:  CLRF   06
009B:  BCF    03.5
009C:  MOVF   22,W
009D:  MOVWF  06
.................... delay_ms(100); 
009E:  MOVLW  64
009F:  MOVWF  24
00A0:  CALL   004
.................... for(i=0; i<=6;i++) 
00A1:  CLRF   20
00A2:  MOVF   20,W
00A3:  SUBLW  06
00A4:  BTFSS  03.0
00A5:  GOTO   0BC
.................... { 
.................... if(input(stop)) 
00A6:  BSF    03.5
00A7:  BSF    05.1
00A8:  BCF    03.5
00A9:  BTFSS  05.1
00AA:  GOTO   0B0
.................... { 
.................... output_b(0x00); 
00AB:  BSF    03.5
00AC:  CLRF   06
00AD:  BCF    03.5
00AE:  CLRF   06
.................... break;  
00AF:  GOTO   0BC
.................... } 
.................... led=led>>1; 
00B0:  BCF    03.0
00B1:  RRF    22,F
.................... output_b(led); 
00B2:  BSF    03.5
00B3:  CLRF   06
00B4:  BCF    03.5
00B5:  MOVF   22,W
00B6:  MOVWF  06
.................... delay_ms(100); 
00B7:  MOVLW  64
00B8:  MOVWF  24
00B9:  CALL   004
00BA:  INCF   20,F
00BB:  GOTO   0A2
.................... } 
.................... c=0; 
00BC:  CLRF   23
00BD:  INCF   21,F
00BE:  GOTO   06E
.................... } 
.................... } 
00BF:  GOTO   03F
.................... } 
.................... } 
00C0:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
