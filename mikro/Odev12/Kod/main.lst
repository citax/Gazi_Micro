CCS PCM C Compiler, Version 5.015, 5967               02-Haz-23 19:54

               Filename:   E:\Okul\Mikroislemci\mikro\Odev12\Kod\main.lst

               ROM used:   1494 words (18%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           50 (14%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5AE
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 8A,39
0005:  DATA 6F,37
0006:  DATA F5,31
0007:  DATA 3D,00
0008:  DATA 0C,10
0009:  DATA 4F,27
000A:  DATA 00,01
*
00EE:  MOVLW  20
00EF:  MOVWF  40
00F0:  CLRF   3C
00F1:  CLRF   3D
00F2:  CLRF   3E
00F3:  CLRF   3F
00F4:  MOVF   37,W
00F5:  MOVWF  7A
00F6:  MOVF   36,W
00F7:  MOVWF  79
00F8:  MOVF   35,W
00F9:  MOVWF  78
00FA:  MOVF   34,W
00FB:  MOVWF  77
00FC:  BCF    03.0
00FD:  BTFSS  77.0
00FE:  GOTO   10D
00FF:  MOVF   38,W
0100:  ADDWF  3C,F
0101:  MOVF   39,W
0102:  BTFSC  03.0
0103:  INCFSZ 39,W
0104:  ADDWF  3D,F
0105:  MOVF   3A,W
0106:  BTFSC  03.0
0107:  INCFSZ 3A,W
0108:  ADDWF  3E,F
0109:  MOVF   3B,W
010A:  BTFSC  03.0
010B:  INCFSZ 3B,W
010C:  ADDWF  3F,F
010D:  RRF    3F,F
010E:  RRF    3E,F
010F:  RRF    3D,F
0110:  RRF    3C,F
0111:  RRF    7A,F
0112:  RRF    79,F
0113:  RRF    78,F
0114:  RRF    77,F
0115:  DECFSZ 40,F
0116:  GOTO   0FC
0117:  RETURN
0118:  MOVF   0B,W
0119:  MOVWF  34
011A:  BCF    0B.7
011B:  BSF    03.5
011C:  BSF    03.6
011D:  BSF    0C.7
011E:  BSF    0C.0
011F:  NOP
0120:  NOP
0121:  BCF    03.5
0122:  BCF    03.6
0123:  BTFSC  34.7
0124:  BSF    0B.7
0125:  BSF    03.6
0126:  MOVF   0C,W
0127:  ANDLW  7F
0128:  BTFSC  03.2
0129:  GOTO   16C
012A:  BCF    03.6
012B:  MOVWF  34
012C:  BSF    03.6
012D:  MOVF   0D,W
012E:  BCF    03.6
012F:  MOVWF  35
0130:  BSF    03.6
0131:  MOVF   0F,W
0132:  BCF    03.6
0133:  MOVWF  36
0134:  MOVF   34,W
0135:  MOVWF  40
0136:  CALL   0C2
0137:  MOVF   35,W
0138:  BSF    03.6
0139:  MOVWF  0D
013A:  BCF    03.6
013B:  MOVF   36,W
013C:  BSF    03.6
013D:  MOVWF  0F
013E:  BCF    03.6
013F:  MOVF   0B,W
0140:  MOVWF  37
0141:  BCF    0B.7
0142:  BSF    03.5
0143:  BSF    03.6
0144:  BSF    0C.7
0145:  BSF    0C.0
0146:  NOP
0147:  NOP
0148:  BCF    03.5
0149:  BCF    03.6
014A:  BTFSC  37.7
014B:  BSF    0B.7
014C:  BSF    03.6
014D:  RLF    0C,W
014E:  RLF    0E,W
014F:  ANDLW  7F
0150:  BTFSC  03.2
0151:  GOTO   16C
0152:  BCF    03.6
0153:  MOVWF  34
0154:  BSF    03.6
0155:  MOVF   0D,W
0156:  BCF    03.6
0157:  MOVWF  35
0158:  BSF    03.6
0159:  MOVF   0F,W
015A:  BCF    03.6
015B:  MOVWF  36
015C:  MOVF   34,W
015D:  MOVWF  40
015E:  CALL   0C2
015F:  MOVF   35,W
0160:  BSF    03.6
0161:  MOVWF  0D
0162:  BCF    03.6
0163:  MOVF   36,W
0164:  BSF    03.6
0165:  MOVWF  0F
0166:  INCF   0D,F
0167:  BTFSC  03.2
0168:  INCF   0F,F
0169:  BCF    03.6
016A:  GOTO   118
016B:  BSF    03.6
016C:  BCF    03.6
016D:  RETURN
016E:  BTFSC  03.1
016F:  GOTO   173
0170:  MOVLW  48
0171:  MOVWF  04
0172:  BCF    03.7
0173:  CLRF   77
0174:  CLRF   78
0175:  CLRF   79
0176:  CLRF   7A
0177:  CLRF   48
0178:  CLRF   49
0179:  CLRF   4A
017A:  CLRF   4B
017B:  MOVF   47,W
017C:  IORWF  46,W
017D:  IORWF  45,W
017E:  IORWF  44,W
017F:  BTFSC  03.2
0180:  GOTO   1B1
0181:  MOVLW  20
0182:  MOVWF  4C
0183:  BCF    03.0
0184:  RLF    40,F
0185:  RLF    41,F
0186:  RLF    42,F
0187:  RLF    43,F
0188:  RLF    48,F
0189:  RLF    49,F
018A:  RLF    4A,F
018B:  RLF    4B,F
018C:  MOVF   47,W
018D:  SUBWF  4B,W
018E:  BTFSS  03.2
018F:  GOTO   19A
0190:  MOVF   46,W
0191:  SUBWF  4A,W
0192:  BTFSS  03.2
0193:  GOTO   19A
0194:  MOVF   45,W
0195:  SUBWF  49,W
0196:  BTFSS  03.2
0197:  GOTO   19A
0198:  MOVF   44,W
0199:  SUBWF  48,W
019A:  BTFSS  03.0
019B:  GOTO   1AB
019C:  MOVF   44,W
019D:  SUBWF  48,F
019E:  MOVF   45,W
019F:  BTFSS  03.0
01A0:  INCFSZ 45,W
01A1:  SUBWF  49,F
01A2:  MOVF   46,W
01A3:  BTFSS  03.0
01A4:  INCFSZ 46,W
01A5:  SUBWF  4A,F
01A6:  MOVF   47,W
01A7:  BTFSS  03.0
01A8:  INCFSZ 47,W
01A9:  SUBWF  4B,F
01AA:  BSF    03.0
01AB:  RLF    77,F
01AC:  RLF    78,F
01AD:  RLF    79,F
01AE:  RLF    7A,F
01AF:  DECFSZ 4C,F
01B0:  GOTO   183
01B1:  MOVF   48,W
01B2:  MOVWF  00
01B3:  INCF   04,F
01B4:  MOVF   49,W
01B5:  MOVWF  00
01B6:  INCF   04,F
01B7:  MOVF   4A,W
01B8:  MOVWF  00
01B9:  INCF   04,F
01BA:  MOVF   4B,W
01BB:  MOVWF  00
01BC:  RETURN
01BD:  MOVF   04,W
01BE:  MOVWF  38
01BF:  BTFSS  37.7
01C0:  GOTO   1CE
01C1:  DECF   38,F
01C2:  BSF    38.5
01C3:  COMF   34,F
01C4:  COMF   35,F
01C5:  COMF   36,F
01C6:  COMF   37,F
01C7:  INCF   34,F
01C8:  BTFSC  03.2
01C9:  INCF   35,F
01CA:  BTFSC  03.2
01CB:  INCF   36,F
01CC:  BTFSC  03.2
01CD:  INCF   37,F
01CE:  MOVLW  3B
01CF:  MOVWF  3F
01D0:  MOVLW  9A
01D1:  MOVWF  3E
01D2:  MOVLW  CA
01D3:  MOVWF  3D
01D4:  CLRF   3C
01D5:  MOVLW  0A
01D6:  MOVWF  3A
01D7:  BSF    03.1
01D8:  MOVLW  34
01D9:  MOVWF  04
01DA:  BCF    03.7
01DB:  MOVF   37,W
01DC:  MOVWF  43
01DD:  MOVF   36,W
01DE:  MOVWF  42
01DF:  MOVF   35,W
01E0:  MOVWF  41
01E1:  MOVF   34,W
01E2:  MOVWF  40
01E3:  MOVF   3F,W
01E4:  MOVWF  47
01E5:  MOVF   3E,W
01E6:  MOVWF  46
01E7:  MOVF   3D,W
01E8:  MOVWF  45
01E9:  MOVF   3C,W
01EA:  MOVWF  44
01EB:  CALL   16E
01EC:  MOVF   78,W
01ED:  MOVF   77,F
01EE:  BTFSS  03.2
01EF:  GOTO   203
01F0:  MOVF   3A,W
01F1:  XORLW  01
01F2:  BTFSC  03.2
01F3:  GOTO   203
01F4:  MOVF   38,W
01F5:  BTFSC  03.2
01F6:  GOTO   205
01F7:  ANDLW  0F
01F8:  SUBWF  3A,W
01F9:  BTFSC  03.2
01FA:  GOTO   1FD
01FB:  BTFSC  03.0
01FC:  GOTO   221
01FD:  BTFSC  38.7
01FE:  GOTO   221
01FF:  BTFSC  38.6
0200:  GOTO   205
0201:  MOVLW  20
0202:  GOTO   21D
0203:  MOVLW  20
0204:  ANDWF  38,F
0205:  BTFSS  38.5
0206:  GOTO   210
0207:  BCF    38.5
0208:  MOVF   77,W
0209:  MOVWF  38
020A:  MOVLW  2D
020B:  MOVWF  40
020C:  CALL   0C2
020D:  MOVF   38,W
020E:  MOVWF  77
020F:  CLRF   38
0210:  MOVLW  30
0211:  BTFSS  38.5
0212:  GOTO   21D
0213:  BCF    38.5
0214:  MOVF   77,W
0215:  MOVWF  38
0216:  MOVLW  2D
0217:  MOVWF  40
0218:  CALL   0C2
0219:  MOVF   38,W
021A:  MOVWF  77
021B:  CLRF   38
021C:  MOVLW  30
021D:  ADDWF  77,F
021E:  MOVF   77,W
021F:  MOVWF  40
0220:  CALL   0C2
0221:  BCF    03.1
0222:  MOVF   3F,W
0223:  MOVWF  43
0224:  MOVF   3E,W
0225:  MOVWF  42
0226:  MOVF   3D,W
0227:  MOVWF  41
0228:  MOVF   3C,W
0229:  MOVWF  40
022A:  CLRF   47
022B:  CLRF   46
022C:  CLRF   45
022D:  MOVLW  0A
022E:  MOVWF  44
022F:  CALL   16E
0230:  MOVF   7A,W
0231:  MOVWF  3F
0232:  MOVF   79,W
0233:  MOVWF  3E
0234:  MOVF   78,W
0235:  MOVWF  3D
0236:  MOVF   77,W
0237:  MOVWF  3C
0238:  DECFSZ 3A,F
0239:  GOTO   1D7
023A:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
000B:  MOVLW  41
000C:  MOVWF  04
000D:  BCF    03.7
000E:  MOVF   00,W
000F:  BTFSC  03.2
0010:  GOTO   01F
0011:  MOVLW  01
0012:  MOVWF  78
0013:  CLRF   77
0014:  DECFSZ 77,F
0015:  GOTO   014
0016:  DECFSZ 78,F
0017:  GOTO   013
0018:  MOVLW  4A
0019:  MOVWF  77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  GOTO   01D
001D:  DECFSZ 00,F
001E:  GOTO   011
001F:  RETURN
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use fast_io(b) 
.................... #use fast_io(d) 
.................... #define use_portb_lcd TRUE 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0038:  MOVLW  0F
0039:  BSF    03.5
003A:  ANDWF  06,W
003B:  IORLW  F0
003C:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003D:  BCF    03.5
003E:  BSF    06.2
....................    delay_cycles(1); 
003F:  NOP
....................    lcd_output_enable(1); 
0040:  BSF    06.0
....................    delay_cycles(1); 
0041:  NOP
....................    high = lcd_read_nibble(); 
0042:  CALL   02C
0043:  MOVF   78,W
0044:  MOVWF  48
....................        
....................    lcd_output_enable(0); 
0045:  BCF    06.0
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BSF    06.0
....................    delay_us(1); 
0048:  NOP
....................    low = lcd_read_nibble(); 
0049:  CALL   02C
004A:  MOVF   78,W
004B:  MOVWF  47
....................        
....................    lcd_output_enable(0); 
004C:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  06,W
0050:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0051:  BCF    03.5
0052:  SWAPF  48,W
0053:  MOVWF  77
0054:  MOVLW  F0
0055:  ANDWF  77,F
0056:  MOVF   77,W
0057:  IORWF  47,W
0058:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002C:  MOVF   06,W
002D:  MOVWF  77
002E:  SWAPF  06,W
002F:  ANDLW  0F
0030:  MOVWF  78
....................   #endif 
0031:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0020:  SWAPF  48,W
0021:  ANDLW  F0
0022:  MOVWF  77
0023:  MOVLW  0F
0024:  ANDWF  06,W
0025:  IORWF  77,W
0026:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0027:  NOP
....................    lcd_output_enable(1); 
0028:  BSF    06.0
....................    delay_us(2); 
0029:  GOTO   02A
....................    lcd_output_enable(0); 
002A:  BCF    06.0
002B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0032:  BSF    03.5
0033:  BCF    06.0
....................    lcd_rs_tris(); 
0034:  BCF    06.1
....................    lcd_rw_tris(); 
0035:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0036:  BCF    03.5
0037:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0059:  MOVF   78,W
005A:  MOVWF  47
005B:  BTFSC  47.7
005C:  GOTO   038
....................    lcd_output_rs(address); 
005D:  BTFSS  45.0
005E:  BCF    06.1
005F:  BTFSC  45.0
0060:  BSF    06.1
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_rw(0); 
0062:  BCF    06.2
....................    delay_cycles(1); 
0063:  NOP
....................    lcd_output_enable(0); 
0064:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0065:  SWAPF  46,W
0066:  MOVWF  47
0067:  MOVLW  0F
0068:  ANDWF  47,F
0069:  MOVF   47,W
006A:  MOVWF  48
006B:  CALL   020
....................    lcd_send_nibble(n & 0xf); 
006C:  MOVF   46,W
006D:  ANDLW  0F
006E:  MOVWF  47
006F:  MOVWF  48
0070:  CALL   020
0071:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0072:  MOVLW  28
0073:  MOVWF  35
0074:  MOVLW  0C
0075:  MOVWF  36
0076:  MOVLW  01
0077:  MOVWF  37
0078:  MOVLW  06
0079:  MOVWF  38
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007A:  BCF    06.0
....................    lcd_output_rs(0); 
007B:  BCF    06.1
....................    lcd_output_rw(0); 
007C:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007D:  MOVLW  0F
007E:  BSF    03.5
007F:  ANDWF  06,W
0080:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0081:  BCF    06.0
....................    lcd_rs_tris(); 
0082:  BCF    06.1
....................    lcd_rw_tris(); 
0083:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0084:  MOVLW  0F
0085:  BCF    03.5
0086:  MOVWF  41
0087:  CALL   00B
....................    for(i=1;i<=3;++i) 
0088:  MOVLW  01
0089:  MOVWF  34
008A:  MOVF   34,W
008B:  SUBLW  03
008C:  BTFSS  03.0
008D:  GOTO   096
....................    { 
....................        lcd_send_nibble(3); 
008E:  MOVLW  03
008F:  MOVWF  48
0090:  CALL   020
....................        delay_ms(5); 
0091:  MOVLW  05
0092:  MOVWF  41
0093:  CALL   00B
0094:  INCF   34,F
0095:  GOTO   08A
....................    } 
....................     
....................    lcd_send_nibble(2); 
0096:  MOVLW  02
0097:  MOVWF  48
0098:  CALL   020
....................    delay_ms(5); 
0099:  MOVLW  05
009A:  MOVWF  41
009B:  CALL   00B
....................    for(i=0;i<=3;++i) 
009C:  CLRF   34
009D:  MOVF   34,W
009E:  SUBLW  03
009F:  BTFSS  03.0
00A0:  GOTO   0AD
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A1:  MOVLW  35
00A2:  ADDWF  34,W
00A3:  MOVWF  04
00A4:  BCF    03.7
00A5:  MOVF   00,W
00A6:  MOVWF  39
00A7:  CLRF   45
00A8:  MOVF   39,W
00A9:  MOVWF  46
00AA:  CALL   032
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AB:  INCF   34,F
00AC:  GOTO   09D
00AD:  BCF    0A.3
00AE:  BCF    0A.4
00AF:  GOTO   5D3 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B0:  DECFSZ 42,W
00B1:  GOTO   0B3
00B2:  GOTO   0B6
....................       address=LCD_LINE_TWO; 
00B3:  MOVLW  40
00B4:  MOVWF  43
00B5:  GOTO   0B7
....................    else 
....................       address=0; 
00B6:  CLRF   43
....................       
....................    address+=x-1; 
00B7:  MOVLW  01
00B8:  SUBWF  41,W
00B9:  ADDWF  43,F
....................    lcd_send_byte(0,0x80|address); 
00BA:  MOVF   43,W
00BB:  IORLW  80
00BC:  MOVWF  44
00BD:  CLRF   45
00BE:  MOVF   44,W
00BF:  MOVWF  46
00C0:  CALL   032
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C1:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C2:  MOVF   40,W
00C3:  XORLW  07
00C4:  BTFSC  03.2
00C5:  GOTO   0D0
00C6:  XORLW  0B
00C7:  BTFSC  03.2
00C8:  GOTO   0D5
00C9:  XORLW  06
00CA:  BTFSC  03.2
00CB:  GOTO   0DD
00CC:  XORLW  02
00CD:  BTFSC  03.2
00CE:  GOTO   0E3
00CF:  GOTO   0E8
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D0:  MOVLW  01
00D1:  MOVWF  41
00D2:  MOVWF  42
00D3:  CALL   0B0
00D4:  GOTO   0ED
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D5:  CLRF   45
00D6:  MOVLW  01
00D7:  MOVWF  46
00D8:  CALL   032
....................                      delay_ms(2); 
00D9:  MOVLW  02
00DA:  MOVWF  41
00DB:  CALL   00B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00DC:  GOTO   0ED
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DD:  MOVLW  01
00DE:  MOVWF  41
00DF:  MOVLW  02
00E0:  MOVWF  42
00E1:  CALL   0B0
00E2:  GOTO   0ED
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E3:  CLRF   45
00E4:  MOVLW  10
00E5:  MOVWF  46
00E6:  CALL   032
00E7:  GOTO   0ED
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E8:  MOVLW  01
00E9:  MOVWF  45
00EA:  MOVF   40,W
00EB:  MOVWF  46
00EC:  CALL   032
....................      #endif 
....................    } 
00ED:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int32 sayi1 = 0; 
.................... int32 sayi = 0; 
.................... int32 x = 0; 
.................... int32 islem = 0; 
.................... int32 sonuc = 0; 
....................  
.................... int sonuc_bul() 
.................... { 
....................   delay_ms(100); 
*
0485:  MOVLW  64
0486:  MOVWF  41
0487:  CALL   00B
....................   printf(lcd_putc, "\nsonuc="); 
0488:  MOVLW  04
0489:  BSF    03.6
048A:  MOVWF  0D
048B:  MOVLW  00
048C:  MOVWF  0F
048D:  BCF    03.6
048E:  CALL   118
....................   switch (islem) 
048F:  MOVF   2C,W
0490:  MOVWF  77
0491:  MOVF   2D,W
0492:  MOVWF  7A
0493:  MOVF   7A,W
0494:  BTFSS  03.2
0495:  GOTO   49A
0496:  MOVLW  01
0497:  SUBWF  77,W
0498:  BTFSC  03.2
0499:  GOTO   4B0
049A:  MOVF   7A,W
049B:  BTFSS  03.2
049C:  GOTO   4A1
049D:  MOVLW  02
049E:  SUBWF  77,W
049F:  BTFSC  03.2
04A0:  GOTO   4E5
04A1:  MOVF   7A,W
04A2:  BTFSS  03.2
04A3:  GOTO   4A8
04A4:  MOVLW  03
04A5:  SUBWF  77,W
04A6:  BTFSC  03.2
04A7:  GOTO   51A
04A8:  MOVF   7A,W
04A9:  BTFSS  03.2
04AA:  GOTO   4AF
04AB:  MOVLW  04
04AC:  SUBWF  77,W
04AD:  BTFSC  03.2
04AE:  GOTO   553
04AF:  GOTO   58C
....................   { 
....................   case 1: 
....................     sonuc = (sayi1) + (sayi); 
04B0:  MOVF   24,W
04B1:  ADDWF  20,W
04B2:  MOVWF  30
04B3:  MOVF   21,W
04B4:  MOVWF  31
04B5:  MOVF   25,W
04B6:  BTFSC  03.0
04B7:  INCFSZ 25,W
04B8:  ADDWF  31,F
04B9:  MOVF   22,W
04BA:  MOVWF  32
04BB:  MOVF   26,W
04BC:  BTFSC  03.0
04BD:  INCFSZ 26,W
04BE:  ADDWF  32,F
04BF:  MOVF   23,W
04C0:  MOVWF  33
04C1:  MOVF   27,W
04C2:  BTFSC  03.0
04C3:  INCFSZ 27,W
04C4:  ADDWF  33,F
....................     printf(lcd_putc, "%ld", sonuc); 
04C5:  MOVLW  41
04C6:  MOVWF  04
04C7:  MOVF   33,W
04C8:  MOVWF  37
04C9:  MOVF   32,W
04CA:  MOVWF  36
04CB:  MOVF   31,W
04CC:  MOVWF  35
04CD:  MOVF   30,W
04CE:  MOVWF  34
04CF:  CALL   1BD
....................     sayi1 = 0; 
04D0:  CLRF   23
04D1:  CLRF   22
04D2:  CLRF   21
04D3:  CLRF   20
....................     sayi = 0; 
04D4:  CLRF   27
04D5:  CLRF   26
04D6:  CLRF   25
04D7:  CLRF   24
....................     x = 0; 
04D8:  CLRF   2B
04D9:  CLRF   2A
04DA:  CLRF   29
04DB:  CLRF   28
....................     islem = 0; 
04DC:  CLRF   2F
04DD:  CLRF   2E
04DE:  CLRF   2D
04DF:  CLRF   2C
....................     sonuc = 0; 
04E0:  CLRF   33
04E1:  CLRF   32
04E2:  CLRF   31
04E3:  CLRF   30
....................     break; 
04E4:  GOTO   58C
....................   case 2: 
....................     sonuc = sayi1 - sayi; 
04E5:  MOVF   24,W
04E6:  SUBWF  20,W
04E7:  MOVWF  30
04E8:  MOVF   21,W
04E9:  MOVWF  31
04EA:  MOVF   25,W
04EB:  BTFSS  03.0
04EC:  INCFSZ 25,W
04ED:  SUBWF  31,F
04EE:  MOVF   22,W
04EF:  MOVWF  32
04F0:  MOVF   26,W
04F1:  BTFSS  03.0
04F2:  INCFSZ 26,W
04F3:  SUBWF  32,F
04F4:  MOVF   23,W
04F5:  MOVWF  33
04F6:  MOVF   27,W
04F7:  BTFSS  03.0
04F8:  INCFSZ 27,W
04F9:  SUBWF  33,F
....................     printf(lcd_putc, "%ld", sonuc); 
04FA:  MOVLW  41
04FB:  MOVWF  04
04FC:  MOVF   33,W
04FD:  MOVWF  37
04FE:  MOVF   32,W
04FF:  MOVWF  36
0500:  MOVF   31,W
0501:  MOVWF  35
0502:  MOVF   30,W
0503:  MOVWF  34
0504:  CALL   1BD
....................     sayi1 = 0; 
0505:  CLRF   23
0506:  CLRF   22
0507:  CLRF   21
0508:  CLRF   20
....................     sayi = 0; 
0509:  CLRF   27
050A:  CLRF   26
050B:  CLRF   25
050C:  CLRF   24
....................     x = 0; 
050D:  CLRF   2B
050E:  CLRF   2A
050F:  CLRF   29
0510:  CLRF   28
....................     islem = 0; 
0511:  CLRF   2F
0512:  CLRF   2E
0513:  CLRF   2D
0514:  CLRF   2C
....................     sonuc = 0; 
0515:  CLRF   33
0516:  CLRF   32
0517:  CLRF   31
0518:  CLRF   30
....................     break; 
0519:  GOTO   58C
....................   case 3: 
....................     sonuc = sayi1 * sayi; 
051A:  MOVF   23,W
051B:  MOVWF  37
051C:  MOVF   22,W
051D:  MOVWF  36
051E:  MOVF   21,W
051F:  MOVWF  35
0520:  MOVF   20,W
0521:  MOVWF  34
0522:  MOVF   27,W
0523:  MOVWF  3B
0524:  MOVF   26,W
0525:  MOVWF  3A
0526:  MOVF   25,W
0527:  MOVWF  39
0528:  MOVF   24,W
0529:  MOVWF  38
052A:  CALL   0EE
052B:  MOVF   7A,W
052C:  MOVWF  33
052D:  MOVF   79,W
052E:  MOVWF  32
052F:  MOVF   78,W
0530:  MOVWF  31
0531:  MOVF   77,W
0532:  MOVWF  30
....................     printf(lcd_putc, "%ld", sonuc); 
0533:  MOVLW  41
0534:  MOVWF  04
0535:  MOVF   33,W
0536:  MOVWF  37
0537:  MOVF   32,W
0538:  MOVWF  36
0539:  MOVF   31,W
053A:  MOVWF  35
053B:  MOVF   30,W
053C:  MOVWF  34
053D:  CALL   1BD
....................     sayi1 = 0; 
053E:  CLRF   23
053F:  CLRF   22
0540:  CLRF   21
0541:  CLRF   20
....................     sayi = 0; 
0542:  CLRF   27
0543:  CLRF   26
0544:  CLRF   25
0545:  CLRF   24
....................     x = 0; 
0546:  CLRF   2B
0547:  CLRF   2A
0548:  CLRF   29
0549:  CLRF   28
....................     islem = 0; 
054A:  CLRF   2F
054B:  CLRF   2E
054C:  CLRF   2D
054D:  CLRF   2C
....................     sonuc = 0; 
054E:  CLRF   33
054F:  CLRF   32
0550:  CLRF   31
0551:  CLRF   30
....................     break; 
0552:  GOTO   58C
....................   case 4: 
....................     sonuc = sayi1 / sayi; 
0553:  BCF    03.1
0554:  MOVF   23,W
0555:  MOVWF  43
0556:  MOVF   22,W
0557:  MOVWF  42
0558:  MOVF   21,W
0559:  MOVWF  41
055A:  MOVF   20,W
055B:  MOVWF  40
055C:  MOVF   27,W
055D:  MOVWF  47
055E:  MOVF   26,W
055F:  MOVWF  46
0560:  MOVF   25,W
0561:  MOVWF  45
0562:  MOVF   24,W
0563:  MOVWF  44
0564:  CALL   16E
0565:  MOVF   7A,W
0566:  MOVWF  33
0567:  MOVF   79,W
0568:  MOVWF  32
0569:  MOVF   78,W
056A:  MOVWF  31
056B:  MOVF   77,W
056C:  MOVWF  30
....................     printf(lcd_putc, "%ld", sonuc); 
056D:  MOVLW  41
056E:  MOVWF  04
056F:  MOVF   33,W
0570:  MOVWF  37
0571:  MOVF   32,W
0572:  MOVWF  36
0573:  MOVF   31,W
0574:  MOVWF  35
0575:  MOVF   30,W
0576:  MOVWF  34
0577:  CALL   1BD
....................     sayi1 = 0; 
0578:  CLRF   23
0579:  CLRF   22
057A:  CLRF   21
057B:  CLRF   20
....................     sayi = 0; 
057C:  CLRF   27
057D:  CLRF   26
057E:  CLRF   25
057F:  CLRF   24
....................     x = 0; 
0580:  CLRF   2B
0581:  CLRF   2A
0582:  CLRF   29
0583:  CLRF   28
....................     islem = 0; 
0584:  CLRF   2F
0585:  CLRF   2E
0586:  CLRF   2D
0587:  CLRF   2C
....................     sonuc = 0; 
0588:  CLRF   33
0589:  CLRF   32
058A:  CLRF   31
058B:  CLRF   30
....................     break; 
....................   } 
....................   islem = 0; 
058C:  CLRF   2F
058D:  CLRF   2E
058E:  CLRF   2D
058F:  CLRF   2C
.................... } 
....................  
.................... char tus() 
.................... { 
....................   output_high(pin_d0); 
*
023B:  BSF    08.0
....................   if (input(pin_d4)) 
023C:  BTFSS  08.4
023D:  GOTO   26B
....................   { 
....................     while (input(pin_d4)) 
023E:  BTFSC  08.4
023F:  GOTO   23E
....................       ; 
....................     printf(lcd_putc, "7"); 
0240:  MOVLW  37
0241:  MOVWF  40
0242:  CALL   0C2
....................     x = 7; 
0243:  CLRF   2B
0244:  CLRF   2A
0245:  CLRF   29
0246:  MOVLW  07
0247:  MOVWF  28
....................     sayi = sayi * 10 + x; 
0248:  MOVF   27,W
0249:  MOVWF  37
024A:  MOVF   26,W
024B:  MOVWF  36
024C:  MOVF   25,W
024D:  MOVWF  35
024E:  MOVF   24,W
024F:  MOVWF  34
0250:  CLRF   3B
0251:  CLRF   3A
0252:  CLRF   39
0253:  MOVLW  0A
0254:  MOVWF  38
0255:  CALL   0EE
0256:  MOVF   28,W
0257:  ADDWF  77,W
0258:  MOVWF  24
0259:  MOVF   78,W
025A:  MOVWF  25
025B:  MOVF   29,W
025C:  BTFSC  03.0
025D:  INCFSZ 29,W
025E:  ADDWF  25,F
025F:  MOVF   79,W
0260:  MOVWF  26
0261:  MOVF   2A,W
0262:  BTFSC  03.0
0263:  INCFSZ 2A,W
0264:  ADDWF  26,F
0265:  MOVF   7A,W
0266:  MOVWF  27
0267:  MOVF   2B,W
0268:  BTFSC  03.0
0269:  INCFSZ 2B,W
026A:  ADDWF  27,F
....................   } 
....................   if (input(pin_d5)) 
026B:  BTFSS  08.5
026C:  GOTO   29A
....................   { 
....................     while (input(pin_d5)) 
026D:  BTFSC  08.5
026E:  GOTO   26D
....................       ; 
....................     printf(lcd_putc, "8"); 
026F:  MOVLW  38
0270:  MOVWF  40
0271:  CALL   0C2
....................     x = 8; 
0272:  CLRF   2B
0273:  CLRF   2A
0274:  CLRF   29
0275:  MOVLW  08
0276:  MOVWF  28
....................     sayi = sayi * 10 + x; 
0277:  MOVF   27,W
0278:  MOVWF  37
0279:  MOVF   26,W
027A:  MOVWF  36
027B:  MOVF   25,W
027C:  MOVWF  35
027D:  MOVF   24,W
027E:  MOVWF  34
027F:  CLRF   3B
0280:  CLRF   3A
0281:  CLRF   39
0282:  MOVLW  0A
0283:  MOVWF  38
0284:  CALL   0EE
0285:  MOVF   28,W
0286:  ADDWF  77,W
0287:  MOVWF  24
0288:  MOVF   78,W
0289:  MOVWF  25
028A:  MOVF   29,W
028B:  BTFSC  03.0
028C:  INCFSZ 29,W
028D:  ADDWF  25,F
028E:  MOVF   79,W
028F:  MOVWF  26
0290:  MOVF   2A,W
0291:  BTFSC  03.0
0292:  INCFSZ 2A,W
0293:  ADDWF  26,F
0294:  MOVF   7A,W
0295:  MOVWF  27
0296:  MOVF   2B,W
0297:  BTFSC  03.0
0298:  INCFSZ 2B,W
0299:  ADDWF  27,F
....................   } 
....................   if (input(pin_d6)) 
029A:  BTFSS  08.6
029B:  GOTO   2C9
....................   { 
....................     while (input(pin_d6)) 
029C:  BTFSC  08.6
029D:  GOTO   29C
....................       ; 
....................     printf(lcd_putc, "9"); 
029E:  MOVLW  39
029F:  MOVWF  40
02A0:  CALL   0C2
....................     x = 9; 
02A1:  CLRF   2B
02A2:  CLRF   2A
02A3:  CLRF   29
02A4:  MOVLW  09
02A5:  MOVWF  28
....................     sayi = sayi * 10 + x; 
02A6:  MOVF   27,W
02A7:  MOVWF  37
02A8:  MOVF   26,W
02A9:  MOVWF  36
02AA:  MOVF   25,W
02AB:  MOVWF  35
02AC:  MOVF   24,W
02AD:  MOVWF  34
02AE:  CLRF   3B
02AF:  CLRF   3A
02B0:  CLRF   39
02B1:  MOVLW  0A
02B2:  MOVWF  38
02B3:  CALL   0EE
02B4:  MOVF   28,W
02B5:  ADDWF  77,W
02B6:  MOVWF  24
02B7:  MOVF   78,W
02B8:  MOVWF  25
02B9:  MOVF   29,W
02BA:  BTFSC  03.0
02BB:  INCFSZ 29,W
02BC:  ADDWF  25,F
02BD:  MOVF   79,W
02BE:  MOVWF  26
02BF:  MOVF   2A,W
02C0:  BTFSC  03.0
02C1:  INCFSZ 2A,W
02C2:  ADDWF  26,F
02C3:  MOVF   7A,W
02C4:  MOVWF  27
02C5:  MOVF   2B,W
02C6:  BTFSC  03.0
02C7:  INCFSZ 2B,W
02C8:  ADDWF  27,F
....................   } 
....................   if (input(pin_d7)) 
02C9:  BTFSS  08.7
02CA:  GOTO   2E1
....................   { 
....................     while (input(pin_d7)) 
02CB:  BTFSC  08.7
02CC:  GOTO   2CB
....................       ; 
....................     printf(lcd_putc, "/"); 
02CD:  MOVLW  2F
02CE:  MOVWF  40
02CF:  CALL   0C2
....................     sayi1 = sayi; 
02D0:  MOVF   27,W
02D1:  MOVWF  23
02D2:  MOVF   26,W
02D3:  MOVWF  22
02D4:  MOVF   25,W
02D5:  MOVWF  21
02D6:  MOVF   24,W
02D7:  MOVWF  20
....................     islem = 4; 
02D8:  CLRF   2F
02D9:  CLRF   2E
02DA:  CLRF   2D
02DB:  MOVLW  04
02DC:  MOVWF  2C
....................     sayi = 0; 
02DD:  CLRF   27
02DE:  CLRF   26
02DF:  CLRF   25
02E0:  CLRF   24
....................   } 
....................   output_low(pin_d0); 
02E1:  BCF    08.0
....................  
....................   output_high(pin_d1); 
02E2:  BSF    08.1
....................   if (input(pin_d4)) 
02E3:  BTFSS  08.4
02E4:  GOTO   312
....................   { 
....................     while (input(pin_d4)) 
02E5:  BTFSC  08.4
02E6:  GOTO   2E5
....................       ; 
....................     printf(lcd_putc, "4"); 
02E7:  MOVLW  34
02E8:  MOVWF  40
02E9:  CALL   0C2
....................     x = 4; 
02EA:  CLRF   2B
02EB:  CLRF   2A
02EC:  CLRF   29
02ED:  MOVLW  04
02EE:  MOVWF  28
....................     sayi = sayi * 10 + x; 
02EF:  MOVF   27,W
02F0:  MOVWF  37
02F1:  MOVF   26,W
02F2:  MOVWF  36
02F3:  MOVF   25,W
02F4:  MOVWF  35
02F5:  MOVF   24,W
02F6:  MOVWF  34
02F7:  CLRF   3B
02F8:  CLRF   3A
02F9:  CLRF   39
02FA:  MOVLW  0A
02FB:  MOVWF  38
02FC:  CALL   0EE
02FD:  MOVF   28,W
02FE:  ADDWF  77,W
02FF:  MOVWF  24
0300:  MOVF   78,W
0301:  MOVWF  25
0302:  MOVF   29,W
0303:  BTFSC  03.0
0304:  INCFSZ 29,W
0305:  ADDWF  25,F
0306:  MOVF   79,W
0307:  MOVWF  26
0308:  MOVF   2A,W
0309:  BTFSC  03.0
030A:  INCFSZ 2A,W
030B:  ADDWF  26,F
030C:  MOVF   7A,W
030D:  MOVWF  27
030E:  MOVF   2B,W
030F:  BTFSC  03.0
0310:  INCFSZ 2B,W
0311:  ADDWF  27,F
....................   } 
....................   if (input(pin_d5)) 
0312:  BTFSS  08.5
0313:  GOTO   341
....................   { 
....................     while (input(pin_d5)) 
0314:  BTFSC  08.5
0315:  GOTO   314
....................       ; 
....................     printf(lcd_putc, "5"); 
0316:  MOVLW  35
0317:  MOVWF  40
0318:  CALL   0C2
....................     x = 5; 
0319:  CLRF   2B
031A:  CLRF   2A
031B:  CLRF   29
031C:  MOVLW  05
031D:  MOVWF  28
....................     sayi = sayi * 10 + x; 
031E:  MOVF   27,W
031F:  MOVWF  37
0320:  MOVF   26,W
0321:  MOVWF  36
0322:  MOVF   25,W
0323:  MOVWF  35
0324:  MOVF   24,W
0325:  MOVWF  34
0326:  CLRF   3B
0327:  CLRF   3A
0328:  CLRF   39
0329:  MOVLW  0A
032A:  MOVWF  38
032B:  CALL   0EE
032C:  MOVF   28,W
032D:  ADDWF  77,W
032E:  MOVWF  24
032F:  MOVF   78,W
0330:  MOVWF  25
0331:  MOVF   29,W
0332:  BTFSC  03.0
0333:  INCFSZ 29,W
0334:  ADDWF  25,F
0335:  MOVF   79,W
0336:  MOVWF  26
0337:  MOVF   2A,W
0338:  BTFSC  03.0
0339:  INCFSZ 2A,W
033A:  ADDWF  26,F
033B:  MOVF   7A,W
033C:  MOVWF  27
033D:  MOVF   2B,W
033E:  BTFSC  03.0
033F:  INCFSZ 2B,W
0340:  ADDWF  27,F
....................   } 
....................   if (input(pin_d6)) 
0341:  BTFSS  08.6
0342:  GOTO   370
....................   { 
....................     while (input(pin_d6)) 
0343:  BTFSC  08.6
0344:  GOTO   343
....................       ; 
....................     printf(lcd_putc, "6"); 
0345:  MOVLW  36
0346:  MOVWF  40
0347:  CALL   0C2
....................     x = 6; 
0348:  CLRF   2B
0349:  CLRF   2A
034A:  CLRF   29
034B:  MOVLW  06
034C:  MOVWF  28
....................     sayi = sayi * 10 + x; 
034D:  MOVF   27,W
034E:  MOVWF  37
034F:  MOVF   26,W
0350:  MOVWF  36
0351:  MOVF   25,W
0352:  MOVWF  35
0353:  MOVF   24,W
0354:  MOVWF  34
0355:  CLRF   3B
0356:  CLRF   3A
0357:  CLRF   39
0358:  MOVLW  0A
0359:  MOVWF  38
035A:  CALL   0EE
035B:  MOVF   28,W
035C:  ADDWF  77,W
035D:  MOVWF  24
035E:  MOVF   78,W
035F:  MOVWF  25
0360:  MOVF   29,W
0361:  BTFSC  03.0
0362:  INCFSZ 29,W
0363:  ADDWF  25,F
0364:  MOVF   79,W
0365:  MOVWF  26
0366:  MOVF   2A,W
0367:  BTFSC  03.0
0368:  INCFSZ 2A,W
0369:  ADDWF  26,F
036A:  MOVF   7A,W
036B:  MOVWF  27
036C:  MOVF   2B,W
036D:  BTFSC  03.0
036E:  INCFSZ 2B,W
036F:  ADDWF  27,F
....................   } 
....................   if (input(pin_d7)) 
0370:  BTFSS  08.7
0371:  GOTO   388
....................   { 
....................     while (input(pin_d7)) 
0372:  BTFSC  08.7
0373:  GOTO   372
....................       ; 
....................     printf(lcd_putc, "*"); 
0374:  MOVLW  2A
0375:  MOVWF  40
0376:  CALL   0C2
....................     sayi1 = sayi; 
0377:  MOVF   27,W
0378:  MOVWF  23
0379:  MOVF   26,W
037A:  MOVWF  22
037B:  MOVF   25,W
037C:  MOVWF  21
037D:  MOVF   24,W
037E:  MOVWF  20
....................     islem = 3; 
037F:  CLRF   2F
0380:  CLRF   2E
0381:  CLRF   2D
0382:  MOVLW  03
0383:  MOVWF  2C
....................     sayi = 0; 
0384:  CLRF   27
0385:  CLRF   26
0386:  CLRF   25
0387:  CLRF   24
....................   } 
....................   output_low(pin_d1); 
0388:  BCF    08.1
....................  
....................   output_high(pin_d2); 
0389:  BSF    08.2
....................   if (input(pin_d4)) 
038A:  BTFSS  08.4
038B:  GOTO   3B9
....................   { 
....................     while (input(pin_d4)) 
038C:  BTFSC  08.4
038D:  GOTO   38C
....................       ; 
....................     printf(lcd_putc, "1"); 
038E:  MOVLW  31
038F:  MOVWF  40
0390:  CALL   0C2
....................     x = 1; 
0391:  CLRF   2B
0392:  CLRF   2A
0393:  CLRF   29
0394:  MOVLW  01
0395:  MOVWF  28
....................     sayi = sayi * 10 + x; 
0396:  MOVF   27,W
0397:  MOVWF  37
0398:  MOVF   26,W
0399:  MOVWF  36
039A:  MOVF   25,W
039B:  MOVWF  35
039C:  MOVF   24,W
039D:  MOVWF  34
039E:  CLRF   3B
039F:  CLRF   3A
03A0:  CLRF   39
03A1:  MOVLW  0A
03A2:  MOVWF  38
03A3:  CALL   0EE
03A4:  MOVF   28,W
03A5:  ADDWF  77,W
03A6:  MOVWF  24
03A7:  MOVF   78,W
03A8:  MOVWF  25
03A9:  MOVF   29,W
03AA:  BTFSC  03.0
03AB:  INCFSZ 29,W
03AC:  ADDWF  25,F
03AD:  MOVF   79,W
03AE:  MOVWF  26
03AF:  MOVF   2A,W
03B0:  BTFSC  03.0
03B1:  INCFSZ 2A,W
03B2:  ADDWF  26,F
03B3:  MOVF   7A,W
03B4:  MOVWF  27
03B5:  MOVF   2B,W
03B6:  BTFSC  03.0
03B7:  INCFSZ 2B,W
03B8:  ADDWF  27,F
....................   } 
....................   if (input(pin_d5)) 
03B9:  BTFSS  08.5
03BA:  GOTO   3E8
....................   { 
....................     while (input(pin_d5)) 
03BB:  BTFSC  08.5
03BC:  GOTO   3BB
....................       ; 
....................     printf(lcd_putc, "2"); 
03BD:  MOVLW  32
03BE:  MOVWF  40
03BF:  CALL   0C2
....................     x = 2; 
03C0:  CLRF   2B
03C1:  CLRF   2A
03C2:  CLRF   29
03C3:  MOVLW  02
03C4:  MOVWF  28
....................     sayi = sayi * 10 + x; 
03C5:  MOVF   27,W
03C6:  MOVWF  37
03C7:  MOVF   26,W
03C8:  MOVWF  36
03C9:  MOVF   25,W
03CA:  MOVWF  35
03CB:  MOVF   24,W
03CC:  MOVWF  34
03CD:  CLRF   3B
03CE:  CLRF   3A
03CF:  CLRF   39
03D0:  MOVLW  0A
03D1:  MOVWF  38
03D2:  CALL   0EE
03D3:  MOVF   28,W
03D4:  ADDWF  77,W
03D5:  MOVWF  24
03D6:  MOVF   78,W
03D7:  MOVWF  25
03D8:  MOVF   29,W
03D9:  BTFSC  03.0
03DA:  INCFSZ 29,W
03DB:  ADDWF  25,F
03DC:  MOVF   79,W
03DD:  MOVWF  26
03DE:  MOVF   2A,W
03DF:  BTFSC  03.0
03E0:  INCFSZ 2A,W
03E1:  ADDWF  26,F
03E2:  MOVF   7A,W
03E3:  MOVWF  27
03E4:  MOVF   2B,W
03E5:  BTFSC  03.0
03E6:  INCFSZ 2B,W
03E7:  ADDWF  27,F
....................   } 
....................   if (input(pin_d6)) 
03E8:  BTFSS  08.6
03E9:  GOTO   417
....................   { 
....................     while (input(pin_d6)) 
03EA:  BTFSC  08.6
03EB:  GOTO   3EA
....................       ; 
....................     printf(lcd_putc, "3"); 
03EC:  MOVLW  33
03ED:  MOVWF  40
03EE:  CALL   0C2
....................     x = 3; 
03EF:  CLRF   2B
03F0:  CLRF   2A
03F1:  CLRF   29
03F2:  MOVLW  03
03F3:  MOVWF  28
....................     sayi = sayi * 10 + x; 
03F4:  MOVF   27,W
03F5:  MOVWF  37
03F6:  MOVF   26,W
03F7:  MOVWF  36
03F8:  MOVF   25,W
03F9:  MOVWF  35
03FA:  MOVF   24,W
03FB:  MOVWF  34
03FC:  CLRF   3B
03FD:  CLRF   3A
03FE:  CLRF   39
03FF:  MOVLW  0A
0400:  MOVWF  38
0401:  CALL   0EE
0402:  MOVF   28,W
0403:  ADDWF  77,W
0404:  MOVWF  24
0405:  MOVF   78,W
0406:  MOVWF  25
0407:  MOVF   29,W
0408:  BTFSC  03.0
0409:  INCFSZ 29,W
040A:  ADDWF  25,F
040B:  MOVF   79,W
040C:  MOVWF  26
040D:  MOVF   2A,W
040E:  BTFSC  03.0
040F:  INCFSZ 2A,W
0410:  ADDWF  26,F
0411:  MOVF   7A,W
0412:  MOVWF  27
0413:  MOVF   2B,W
0414:  BTFSC  03.0
0415:  INCFSZ 2B,W
0416:  ADDWF  27,F
....................   } 
....................   if (input(pin_d7)) 
0417:  BTFSS  08.7
0418:  GOTO   42F
....................   { 
....................     while (input(pin_d7)) 
0419:  BTFSC  08.7
041A:  GOTO   419
....................       ; 
....................     printf(lcd_putc, "-"); 
041B:  MOVLW  2D
041C:  MOVWF  40
041D:  CALL   0C2
....................     sayi1 = sayi; 
041E:  MOVF   27,W
041F:  MOVWF  23
0420:  MOVF   26,W
0421:  MOVWF  22
0422:  MOVF   25,W
0423:  MOVWF  21
0424:  MOVF   24,W
0425:  MOVWF  20
....................     islem = 2; 
0426:  CLRF   2F
0427:  CLRF   2E
0428:  CLRF   2D
0429:  MOVLW  02
042A:  MOVWF  2C
....................     sayi = 0; 
042B:  CLRF   27
042C:  CLRF   26
042D:  CLRF   25
042E:  CLRF   24
....................   } 
....................   output_low(pin_d2); 
042F:  BCF    08.2
....................  
....................   output_high(pin_d3); 
0430:  BSF    08.3
....................   if (input(pin_d4)) 
0431:  BTFSS  08.4
0432:  GOTO   453
....................   { 
....................     while (input(pin_d4)) 
0433:  BTFSC  08.4
0434:  GOTO   433
....................       ; 
....................     printf(lcd_putc, "\f ON"); 
0435:  MOVLW  08
0436:  BSF    03.6
0437:  MOVWF  0D
0438:  MOVLW  00
0439:  MOVWF  0F
043A:  BCF    03.6
043B:  CALL   118
....................     printf(lcd_putc, "\f"); 
043C:  MOVLW  0C
043D:  MOVWF  40
043E:  CALL   0C2
....................     sayi1 = 0; 
043F:  CLRF   23
0440:  CLRF   22
0441:  CLRF   21
0442:  CLRF   20
....................     sayi = 0; 
0443:  CLRF   27
0444:  CLRF   26
0445:  CLRF   25
0446:  CLRF   24
....................     x = 0; 
0447:  CLRF   2B
0448:  CLRF   2A
0449:  CLRF   29
044A:  CLRF   28
....................     islem = 0; 
044B:  CLRF   2F
044C:  CLRF   2E
044D:  CLRF   2D
044E:  CLRF   2C
....................     sonuc = 0; 
044F:  CLRF   33
0450:  CLRF   32
0451:  CLRF   31
0452:  CLRF   30
....................   } 
....................   if (input(pin_d5)) 
0453:  BTFSS  08.5
0454:  GOTO   481
....................   { 
....................     while (input(pin_d5)) 
0455:  BTFSC  08.5
0456:  GOTO   455
....................       ; 
....................     printf(lcd_putc, "0"); 
0457:  MOVLW  30
0458:  MOVWF  40
0459:  CALL   0C2
....................     x = 0; 
045A:  CLRF   2B
045B:  CLRF   2A
045C:  CLRF   29
045D:  CLRF   28
....................     sayi = sayi * 10 + x; 
045E:  MOVF   27,W
045F:  MOVWF  37
0460:  MOVF   26,W
0461:  MOVWF  36
0462:  MOVF   25,W
0463:  MOVWF  35
0464:  MOVF   24,W
0465:  MOVWF  34
0466:  CLRF   3B
0467:  CLRF   3A
0468:  CLRF   39
0469:  MOVLW  0A
046A:  MOVWF  38
046B:  CALL   0EE
046C:  MOVF   28,W
046D:  ADDWF  77,W
046E:  MOVWF  24
046F:  MOVF   78,W
0470:  MOVWF  25
0471:  MOVF   29,W
0472:  BTFSC  03.0
0473:  INCFSZ 29,W
0474:  ADDWF  25,F
0475:  MOVF   79,W
0476:  MOVWF  26
0477:  MOVF   2A,W
0478:  BTFSC  03.0
0479:  INCFSZ 2A,W
047A:  ADDWF  26,F
047B:  MOVF   7A,W
047C:  MOVWF  27
047D:  MOVF   2B,W
047E:  BTFSC  03.0
047F:  INCFSZ 2B,W
0480:  ADDWF  27,F
....................   } 
....................   if (input(pin_d6)) 
0481:  BTFSS  08.6
0482:  GOTO   590
....................   { 
....................     while (input(pin_d6)) 
0483:  BTFSC  08.6
0484:  GOTO   483
....................       ; 
....................     sayi1; 
....................     sonuc_bul(); 
....................   } 
....................  
....................   if (input(pin_d7)) 
*
0590:  BTFSS  08.7
0591:  GOTO   5A8
....................   { 
....................     while (input(pin_d7)) 
0592:  BTFSC  08.7
0593:  GOTO   592
....................       ; 
....................     printf(lcd_putc, "+"); 
0594:  MOVLW  2B
0595:  MOVWF  40
0596:  CALL   0C2
....................     sayi1 = sayi; 
0597:  MOVF   27,W
0598:  MOVWF  23
0599:  MOVF   26,W
059A:  MOVWF  22
059B:  MOVF   25,W
059C:  MOVWF  21
059D:  MOVF   24,W
059E:  MOVWF  20
....................     islem = 1; 
059F:  CLRF   2F
05A0:  CLRF   2E
05A1:  CLRF   2D
05A2:  MOVLW  01
05A3:  MOVWF  2C
....................     sayi = 0; 
05A4:  CLRF   27
05A5:  CLRF   26
05A6:  CLRF   25
05A7:  CLRF   24
....................   } 
....................   output_low(pin_d3); 
05A8:  BCF    08.3
....................  
....................   return sayi, sayi1, islem; 
05A9:  MOVF   2C,W
05AA:  MOVWF  78
05AB:  BCF    0A.3
05AC:  BCF    0A.4
05AD:  GOTO   5D4 (RETURN)
.................... } 
....................  
.................... void main() 
05AE:  MOVF   03,W
05AF:  ANDLW  1F
05B0:  MOVWF  03
05B1:  CLRF   23
05B2:  CLRF   22
05B3:  CLRF   21
05B4:  CLRF   20
05B5:  CLRF   27
05B6:  CLRF   26
05B7:  CLRF   25
05B8:  CLRF   24
05B9:  CLRF   2B
05BA:  CLRF   2A
05BB:  CLRF   29
05BC:  CLRF   28
05BD:  CLRF   2F
05BE:  CLRF   2E
05BF:  CLRF   2D
05C0:  CLRF   2C
05C1:  CLRF   33
05C2:  CLRF   32
05C3:  CLRF   31
05C4:  CLRF   30
05C5:  BSF    03.5
05C6:  BSF    1F.0
05C7:  BSF    1F.1
05C8:  BSF    1F.2
05C9:  BCF    1F.3
05CA:  MOVLW  07
05CB:  MOVWF  1C
05CC:  BCF    03.7
.................... { 
....................  
....................   set_tris_b(0x00); 
05CD:  MOVLW  00
05CE:  MOVWF  06
....................   set_tris_d(0xF0); 
05CF:  MOVLW  F0
05D0:  MOVWF  08
....................  
....................   lcd_init(); 
05D1:  BCF    03.5
05D2:  GOTO   072
....................  
....................   while (TRUE) 
....................   { 
....................  
....................     tus(); 
05D3:  GOTO   23B
05D4:  GOTO   5D3
....................   } 
.................... } 
....................  
05D5:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
