CCS PCM C Compiler, Version 5.015, 5967               03-May-23 03:25

               Filename:   E:\Okul\Mikro\mikro\Odev8\LCD Sayma Uygulamasi 1\Kod\main.lst

               ROM used:   680 words (8%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           27 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   220
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,10
0005:  DATA C2,3A
0006:  DATA F4,37
0007:  DATA EE,30
0008:  DATA 20,21
0009:  DATA E1,39
000A:  DATA 69,37
000B:  DATA 69,3D
000C:  DATA 21,00
000D:  DATA 8C,20
000E:  DATA E8,36
000F:  DATA 65,3A
0010:  DATA A0,21
0011:  DATA 49,2A
0012:  DATA C1,25
0013:  DATA 00,01
0014:  DATA 0A,19
0015:  DATA B0,18
0016:  DATA 38,18
0017:  DATA 33,18
0018:  DATA 31,18
0019:  DATA 00,01
001A:  DATA 0C,10
001B:  DATA F3,30
001C:  DATA F9,34
001D:  DATA 3D,10
001E:  DATA 25,32
001F:  DATA 00,00
*
0103:  MOVF   0B,W
0104:  MOVWF  26
0105:  BCF    0B.7
0106:  BSF    03.5
0107:  BSF    03.6
0108:  BSF    0C.7
0109:  BSF    0C.0
010A:  NOP
010B:  NOP
010C:  BCF    03.5
010D:  BCF    03.6
010E:  BTFSC  26.7
010F:  BSF    0B.7
0110:  BSF    03.6
0111:  MOVF   0C,W
0112:  ANDLW  7F
0113:  BTFSC  03.2
0114:  GOTO   157
0115:  BCF    03.6
0116:  MOVWF  26
0117:  BSF    03.6
0118:  MOVF   0D,W
0119:  BCF    03.6
011A:  MOVWF  27
011B:  BSF    03.6
011C:  MOVF   0F,W
011D:  BCF    03.6
011E:  MOVWF  28
011F:  MOVF   26,W
0120:  MOVWF  2C
0121:  CALL   0D7
0122:  MOVF   27,W
0123:  BSF    03.6
0124:  MOVWF  0D
0125:  BCF    03.6
0126:  MOVF   28,W
0127:  BSF    03.6
0128:  MOVWF  0F
0129:  BCF    03.6
012A:  MOVF   0B,W
012B:  MOVWF  29
012C:  BCF    0B.7
012D:  BSF    03.5
012E:  BSF    03.6
012F:  BSF    0C.7
0130:  BSF    0C.0
0131:  NOP
0132:  NOP
0133:  BCF    03.5
0134:  BCF    03.6
0135:  BTFSC  29.7
0136:  BSF    0B.7
0137:  BSF    03.6
0138:  RLF    0C,W
0139:  RLF    0E,W
013A:  ANDLW  7F
013B:  BTFSC  03.2
013C:  GOTO   157
013D:  BCF    03.6
013E:  MOVWF  26
013F:  BSF    03.6
0140:  MOVF   0D,W
0141:  BCF    03.6
0142:  MOVWF  27
0143:  BSF    03.6
0144:  MOVF   0F,W
0145:  BCF    03.6
0146:  MOVWF  28
0147:  MOVF   26,W
0148:  MOVWF  2C
0149:  CALL   0D7
014A:  MOVF   27,W
014B:  BSF    03.6
014C:  MOVWF  0D
014D:  BCF    03.6
014E:  MOVF   28,W
014F:  BSF    03.6
0150:  MOVWF  0F
0151:  INCF   0D,F
0152:  BTFSC  03.2
0153:  INCF   0F,F
0154:  BCF    03.6
0155:  GOTO   103
0156:  BSF    03.6
0157:  BCF    03.6
0158:  RETURN
0159:  MOVF   0B,W
015A:  MOVWF  27
015B:  BCF    0B.7
015C:  BSF    03.5
015D:  BSF    03.6
015E:  BSF    0C.7
015F:  BSF    0C.0
0160:  NOP
0161:  NOP
0162:  BCF    03.5
0163:  BCF    03.6
0164:  BTFSC  27.7
0165:  BSF    0B.7
0166:  BTFSC  03.0
0167:  GOTO   190
0168:  BSF    03.6
0169:  MOVF   0C,W
016A:  ANDLW  7F
016B:  BCF    03.6
016C:  MOVWF  27
016D:  BSF    03.6
016E:  MOVF   0D,W
016F:  BCF    03.6
0170:  MOVWF  28
0171:  BSF    03.6
0172:  MOVF   0F,W
0173:  BCF    03.6
0174:  MOVWF  29
0175:  MOVF   27,W
0176:  MOVWF  2C
0177:  CALL   0D7
0178:  MOVF   28,W
0179:  BSF    03.6
017A:  MOVWF  0D
017B:  BCF    03.6
017C:  MOVF   29,W
017D:  BSF    03.6
017E:  MOVWF  0F
017F:  BCF    03.6
0180:  MOVF   0B,W
0181:  MOVWF  2A
0182:  BCF    0B.7
0183:  BSF    03.5
0184:  BSF    03.6
0185:  BSF    0C.7
0186:  BSF    0C.0
0187:  NOP
0188:  NOP
0189:  BCF    03.5
018A:  BCF    03.6
018B:  BTFSC  2A.7
018C:  BSF    0B.7
018D:  DECFSZ 26,F
018E:  GOTO   190
018F:  GOTO   1AF
0190:  BSF    03.6
0191:  RLF    0C,W
0192:  RLF    0E,W
0193:  ANDLW  7F
0194:  BCF    03.6
0195:  MOVWF  27
0196:  BSF    03.6
0197:  MOVF   0D,W
0198:  BCF    03.6
0199:  MOVWF  28
019A:  BSF    03.6
019B:  MOVF   0F,W
019C:  BCF    03.6
019D:  MOVWF  29
019E:  MOVF   27,W
019F:  MOVWF  2C
01A0:  CALL   0D7
01A1:  MOVF   28,W
01A2:  BSF    03.6
01A3:  MOVWF  0D
01A4:  BCF    03.6
01A5:  MOVF   29,W
01A6:  BSF    03.6
01A7:  MOVWF  0F
01A8:  INCF   0D,F
01A9:  BTFSC  03.2
01AA:  INCF   0F,F
01AB:  BCF    03.0
01AC:  BCF    03.6
01AD:  DECFSZ 26,F
01AE:  GOTO   159
01AF:  BCF    0A.3
01B0:  BCF    0A.4
01B1:  GOTO   27A (RETURN)
01B2:  MOVF   2D,W
01B3:  CLRF   78
01B4:  SUBWF  2C,W
01B5:  BTFSC  03.0
01B6:  GOTO   1BA
01B7:  MOVF   2C,W
01B8:  MOVWF  77
01B9:  GOTO   1C6
01BA:  CLRF   77
01BB:  MOVLW  08
01BC:  MOVWF  2E
01BD:  RLF    2C,F
01BE:  RLF    77,F
01BF:  MOVF   2D,W
01C0:  SUBWF  77,W
01C1:  BTFSC  03.0
01C2:  MOVWF  77
01C3:  RLF    78,F
01C4:  DECFSZ 2E,F
01C5:  GOTO   1BD
01C6:  RETURN
01C7:  MOVLW  20
01C8:  BTFSS  27.4
01C9:  MOVLW  30
01CA:  MOVWF  28
01CB:  MOVF   26,W
01CC:  MOVWF  77
01CD:  BTFSS  26.7
01CE:  GOTO   1D7
01CF:  COMF   77,F
01D0:  INCF   77,F
01D1:  MOVF   77,W
01D2:  MOVWF  26
01D3:  MOVLW  2D
01D4:  MOVWF  28
01D5:  BSF    27.7
01D6:  BSF    27.0
01D7:  MOVF   26,W
01D8:  MOVWF  2C
01D9:  MOVLW  64
01DA:  MOVWF  2D
01DB:  CALL   1B2
01DC:  MOVF   77,W
01DD:  MOVWF  26
01DE:  MOVLW  30
01DF:  ADDWF  78,W
01E0:  MOVWF  29
01E1:  MOVF   26,W
01E2:  MOVWF  2C
01E3:  MOVLW  0A
01E4:  MOVWF  2D
01E5:  CALL   1B2
01E6:  MOVLW  30
01E7:  ADDWF  77,W
01E8:  MOVWF  2B
01E9:  MOVLW  30
01EA:  ADDWF  78,W
01EB:  MOVWF  2A
01EC:  MOVF   28,W
01ED:  MOVWF  77
01EE:  MOVLW  30
01EF:  SUBWF  29,W
01F0:  BTFSC  03.2
01F1:  GOTO   1F6
01F2:  BSF    27.1
01F3:  BTFSC  27.7
01F4:  BSF    27.2
01F5:  GOTO   20A
01F6:  MOVF   28,W
01F7:  MOVWF  29
01F8:  MOVLW  20
01F9:  MOVWF  28
01FA:  MOVLW  30
01FB:  SUBWF  2A,W
01FC:  BTFSC  03.2
01FD:  GOTO   202
01FE:  BSF    27.0
01FF:  BTFSC  27.7
0200:  BSF    27.1
0201:  GOTO   20A
0202:  BTFSS  03.2
0203:  BSF    27.0
0204:  BTFSS  03.2
0205:  GOTO   20A
0206:  MOVF   29,W
0207:  MOVWF  2A
0208:  MOVLW  20
0209:  MOVWF  29
020A:  BTFSC  27.2
020B:  GOTO   211
020C:  BTFSC  27.1
020D:  GOTO   214
020E:  BTFSC  27.0
020F:  GOTO   217
0210:  GOTO   21A
0211:  MOVF   28,W
0212:  MOVWF  2C
0213:  CALL   0D7
0214:  MOVF   29,W
0215:  MOVWF  2C
0216:  CALL   0D7
0217:  MOVF   2A,W
0218:  MOVWF  2C
0219:  CALL   0D7
021A:  MOVF   2B,W
021B:  MOVWF  2C
021C:  CALL   0D7
021D:  BCF    0A.3
021E:  BCF    0A.4
021F:  GOTO   27F (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #use delay(clock = 4000000) 
*
0020:  MOVLW  2D
0021:  MOVWF  04
0022:  BCF    03.7
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   034
0026:  MOVLW  01
0027:  MOVWF  78
0028:  CLRF   77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 78,F
002C:  GOTO   028
002D:  MOVLW  4A
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  GOTO   032
0032:  DECFSZ 00,F
0033:  GOTO   026
0034:  RETURN
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  06,W
0050:  IORLW  F0
0051:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0052:  BCF    03.5
0053:  BSF    06.2
....................    delay_cycles(1); 
0054:  NOP
....................    lcd_output_enable(1); 
0055:  BSF    06.0
....................    delay_cycles(1); 
0056:  NOP
....................    high = lcd_read_nibble(); 
0057:  CALL   041
0058:  MOVF   78,W
0059:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
005A:  BCF    06.0
....................    delay_cycles(1); 
005B:  NOP
....................    lcd_output_enable(1); 
005C:  BSF    06.0
....................    delay_us(1); 
005D:  NOP
....................    low = lcd_read_nibble(); 
005E:  CALL   041
005F:  MOVF   78,W
0060:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
0061:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0062:  MOVLW  0F
0063:  BSF    03.5
0064:  ANDWF  06,W
0065:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0066:  BCF    03.5
0067:  SWAPF  34,W
0068:  MOVWF  77
0069:  MOVLW  F0
006A:  ANDWF  77,F
006B:  MOVF   77,W
006C:  IORWF  33,W
006D:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0041:  MOVF   06,W
0042:  MOVWF  77
0043:  SWAPF  06,W
0044:  ANDLW  0F
0045:  MOVWF  78
....................   #endif 
0046:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0035:  SWAPF  34,W
0036:  ANDLW  F0
0037:  MOVWF  77
0038:  MOVLW  0F
0039:  ANDWF  06,W
003A:  IORWF  77,W
003B:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
003C:  NOP
....................    lcd_output_enable(1); 
003D:  BSF    06.0
....................    delay_us(2); 
003E:  GOTO   03F
....................    lcd_output_enable(0); 
003F:  BCF    06.0
0040:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0047:  BSF    03.5
0048:  BCF    06.0
....................    lcd_rs_tris(); 
0049:  BCF    06.1
....................    lcd_rw_tris(); 
004A:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
004B:  BCF    03.5
004C:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
006E:  MOVF   78,W
006F:  MOVWF  33
0070:  BTFSC  33.7
0071:  GOTO   04D
....................    lcd_output_rs(address); 
0072:  BTFSS  31.0
0073:  BCF    06.1
0074:  BTFSC  31.0
0075:  BSF    06.1
....................    delay_cycles(1); 
0076:  NOP
....................    lcd_output_rw(0); 
0077:  BCF    06.2
....................    delay_cycles(1); 
0078:  NOP
....................    lcd_output_enable(0); 
0079:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
007A:  SWAPF  32,W
007B:  MOVWF  33
007C:  MOVLW  0F
007D:  ANDWF  33,F
007E:  MOVF   33,W
007F:  MOVWF  34
0080:  CALL   035
....................    lcd_send_nibble(n & 0xf); 
0081:  MOVF   32,W
0082:  ANDLW  0F
0083:  MOVWF  33
0084:  MOVWF  34
0085:  CALL   035
0086:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0087:  MOVLW  28
0088:  MOVWF  27
0089:  MOVLW  0C
008A:  MOVWF  28
008B:  MOVLW  01
008C:  MOVWF  29
008D:  MOVLW  06
008E:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
008F:  BCF    06.0
....................    lcd_output_rs(0); 
0090:  BCF    06.1
....................    lcd_output_rw(0); 
0091:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0092:  MOVLW  0F
0093:  BSF    03.5
0094:  ANDWF  06,W
0095:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0096:  BCF    06.0
....................    lcd_rs_tris(); 
0097:  BCF    06.1
....................    lcd_rw_tris(); 
0098:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0099:  MOVLW  0F
009A:  BCF    03.5
009B:  MOVWF  2D
009C:  CALL   020
....................    for(i=1;i<=3;++i) 
009D:  MOVLW  01
009E:  MOVWF  26
009F:  MOVF   26,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AB
....................    { 
....................        lcd_send_nibble(3); 
00A3:  MOVLW  03
00A4:  MOVWF  34
00A5:  CALL   035
....................        delay_ms(5); 
00A6:  MOVLW  05
00A7:  MOVWF  2D
00A8:  CALL   020
00A9:  INCF   26,F
00AA:  GOTO   09F
....................    } 
....................     
....................    lcd_send_nibble(2); 
00AB:  MOVLW  02
00AC:  MOVWF  34
00AD:  CALL   035
....................    delay_ms(5); 
00AE:  MOVLW  05
00AF:  MOVWF  2D
00B0:  CALL   020
....................    for(i=0;i<=3;++i) 
00B1:  CLRF   26
00B2:  MOVF   26,W
00B3:  SUBLW  03
00B4:  BTFSS  03.0
00B5:  GOTO   0C2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B6:  MOVLW  27
00B7:  ADDWF  26,W
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,W
00BB:  MOVWF  2B
00BC:  CLRF   31
00BD:  MOVF   2B,W
00BE:  MOVWF  32
00BF:  CALL   047
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C0:  INCF   26,F
00C1:  GOTO   0B2
00C2:  BCF    0A.3
00C3:  BCF    0A.4
00C4:  GOTO   230 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C5:  DECFSZ 2E,W
00C6:  GOTO   0C8
00C7:  GOTO   0CB
....................       address=LCD_LINE_TWO; 
00C8:  MOVLW  40
00C9:  MOVWF  2F
00CA:  GOTO   0CC
....................    else 
....................       address=0; 
00CB:  CLRF   2F
....................       
....................    address+=x-1; 
00CC:  MOVLW  01
00CD:  SUBWF  2D,W
00CE:  ADDWF  2F,F
....................    lcd_send_byte(0,0x80|address); 
00CF:  MOVF   2F,W
00D0:  IORLW  80
00D1:  MOVWF  30
00D2:  CLRF   31
00D3:  MOVF   30,W
00D4:  MOVWF  32
00D5:  CALL   047
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D7:  MOVF   2C,W
00D8:  XORLW  07
00D9:  BTFSC  03.2
00DA:  GOTO   0E5
00DB:  XORLW  0B
00DC:  BTFSC  03.2
00DD:  GOTO   0EA
00DE:  XORLW  06
00DF:  BTFSC  03.2
00E0:  GOTO   0F2
00E1:  XORLW  02
00E2:  BTFSC  03.2
00E3:  GOTO   0F8
00E4:  GOTO   0FD
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E5:  MOVLW  01
00E6:  MOVWF  2D
00E7:  MOVWF  2E
00E8:  CALL   0C5
00E9:  GOTO   102
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00EA:  CLRF   31
00EB:  MOVLW  01
00EC:  MOVWF  32
00ED:  CALL   047
....................                      delay_ms(2); 
00EE:  MOVLW  02
00EF:  MOVWF  2D
00F0:  CALL   020
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F1:  GOTO   102
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00F2:  MOVLW  01
00F3:  MOVWF  2D
00F4:  MOVLW  02
00F5:  MOVWF  2E
00F6:  CALL   0C5
00F7:  GOTO   102
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F8:  CLRF   31
00F9:  MOVLW  10
00FA:  MOVWF  32
00FB:  CALL   047
00FC:  GOTO   102
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00FD:  MOVLW  01
00FE:  MOVWF  31
00FF:  MOVF   2C,W
0100:  MOVWF  32
0101:  CALL   047
....................      #endif 
....................    } 
0102:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... int a,b,c,d = 0; 
.................... int i,number; 
....................  
....................  
.................... void button_counter() 
.................... { 
....................    if(input(pin_A1)) 
....................    { 
....................       c=1; 
....................       a,b=0; 
....................       while(input(pin_A1)); 
....................    } 
.................... } 
....................  
....................  
....................  
.................... void main() 
*
0220:  MOVF   03,W
0221:  ANDLW  1F
0222:  MOVWF  03
0223:  CLRF   23
0224:  BSF    03.5
0225:  BSF    1F.0
0226:  BSF    1F.1
0227:  BSF    1F.2
0228:  BCF    1F.3
0229:  MOVLW  07
022A:  MOVWF  1C
022B:  BCF    03.7
.................... { 
....................    set_tris_b(0x00); 
022C:  MOVLW  00
022D:  MOVWF  06
....................    lcd_init(); 
022E:  BCF    03.5
022F:  GOTO   087
....................    printf(lcd_putc,"\f Butona Basiniz!",); 
0230:  MOVLW  04
0231:  BSF    03.6
0232:  MOVWF  0D
0233:  MOVLW  00
0234:  MOVWF  0F
0235:  BCF    03.6
0236:  CALL   103
....................     
....................    while(TRUE) 
....................    {      
....................          
....................         if(input(pin_A2)) 
0237:  BSF    03.5
0238:  BSF    05.2
0239:  BCF    03.5
023A:  BTFSS  05.2
023B:  GOTO   243
....................         { 
....................         printf(lcd_putc,"\f");  
023C:  MOVLW  0C
023D:  MOVWF  2C
023E:  CALL   0D7
....................         lcd_send_byte(0,0x0d); 
023F:  CLRF   31
0240:  MOVLW  0D
0241:  MOVWF  32
0242:  CALL   047
....................         } 
....................          
....................         if(input(pin_A0)) 
0243:  BSF    03.5
0244:  BSF    05.0
0245:  BCF    03.5
0246:  BTFSS  05.0
0247:  GOTO   25D
....................         { 
....................         printf(lcd_putc,"\fAhmet CITAK");    
0248:  MOVLW  0D
0249:  BSF    03.6
024A:  MOVWF  0D
024B:  MOVLW  00
024C:  MOVWF  0F
024D:  BCF    03.6
024E:  CALL   103
....................         delay_ms(1000); 
024F:  MOVLW  04
0250:  MOVWF  26
0251:  MOVLW  FA
0252:  MOVWF  2D
0253:  CALL   020
0254:  DECFSZ 26,F
0255:  GOTO   251
....................         printf(lcd_putc,"\n201803010"); 
0256:  MOVLW  14
0257:  BSF    03.6
0258:  MOVWF  0D
0259:  MOVLW  00
025A:  MOVWF  0F
025B:  BCF    03.6
025C:  CALL   103
....................         } 
....................          
....................         if(input(pin_A1)) 
025D:  BSF    03.5
025E:  BSF    05.1
025F:  BCF    03.5
0260:  BTFSS  05.1
0261:  GOTO   269
....................         { 
....................         c=1; 
0262:  MOVLW  01
0263:  MOVWF  22
....................         while(input(pin_A1)); 
0264:  BSF    03.5
0265:  BSF    05.1
0266:  BCF    03.5
0267:  BTFSC  05.1
0268:  GOTO   264
....................         } 
....................          
....................         if(c==1) 
0269:  DECFSZ 22,W
026A:  GOTO   2A6
....................         { 
....................          
....................         if(number==100) 
026B:  MOVF   25,W
026C:  SUBLW  64
026D:  BTFSC  03.2
....................         number=0; 
026E:  CLRF   25
....................         number++; 
026F:  INCF   25,F
....................          
....................         printf(lcd_putc,"\f sayi= %d",number); 
0270:  MOVLW  1A
0271:  BSF    03.6
0272:  MOVWF  0D
0273:  MOVLW  00
0274:  MOVWF  0F
0275:  BCF    03.0
0276:  MOVLW  08
0277:  BCF    03.6
0278:  MOVWF  26
0279:  GOTO   159
027A:  MOVF   25,W
027B:  MOVWF  26
027C:  MOVLW  18
027D:  MOVWF  27
027E:  GOTO   1C7
....................         for(i=0;i<50;i++) 
027F:  CLRF   24
0280:  MOVF   24,W
0281:  SUBLW  31
0282:  BTFSS  03.0
0283:  GOTO   2A6
....................             { 
....................                if(input(pin_A0) || input(pin_A2)) 
0284:  BSF    03.5
0285:  BSF    05.0
0286:  BCF    03.5
0287:  BTFSC  05.0
0288:  GOTO   28E
0289:  BSF    03.5
028A:  BSF    05.2
028B:  BCF    03.5
028C:  BTFSS  05.2
028D:  GOTO   2A1
....................                { 
....................                c=0; 
028E:  CLRF   22
....................                while(input(pin_A0)); 
028F:  BSF    03.5
0290:  BSF    05.0
0291:  BCF    03.5
0292:  BTFSC  05.0
0293:  GOTO   28F
....................                while(input(pin_A2)); 
0294:  BSF    03.5
0295:  BSF    05.2
0296:  BCF    03.5
0297:  BTFSC  05.2
0298:  GOTO   294
....................                printf(lcd_putc,"\f"); 
0299:  MOVLW  0C
029A:  MOVWF  2C
029B:  CALL   0D7
....................                lcd_send_byte(0,0x0d); 
029C:  CLRF   31
029D:  MOVLW  0D
029E:  MOVWF  32
029F:  CALL   047
....................                break; 
02A0:  GOTO   2A6
....................                } 
....................                delay_ms(10); 
02A1:  MOVLW  0A
02A2:  MOVWF  2D
02A3:  CALL   020
02A4:  INCF   24,F
02A5:  GOTO   280
....................             } 
....................         } 
02A6:  GOTO   237
....................     
....................    } 
.................... } 
02A7:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
