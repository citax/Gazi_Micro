CCS PCM C Compiler, Version 5.015, 5967               27-Mar-23 00:43

               Filename:   C:\Users\Nikola\Documents\GitHub\Gazi_Micro\Mikro\Odev4\Kod\main.lst

               ROM used:   244 words (3%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           28 (8%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   071
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses HS, NOWDT, NOPROTECT  
.................... #use delay(clock=4000000) 
*
004C:  MOVLW  36
004D:  MOVWF  04
004E:  BCF    03.7
004F:  MOVF   00,W
0050:  BTFSC  03.2
0051:  GOTO   060
0052:  MOVLW  01
0053:  MOVWF  78
0054:  CLRF   77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  DECFSZ 78,F
0058:  GOTO   054
0059:  MOVLW  4A
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
005D:  GOTO   05E
005E:  DECFSZ 00,F
005F:  GOTO   052
0060:  RETURN
....................  
.................... #define pin_up pin_A0 
.................... #define pin_down pin_A1 
.................... #define pin_stop pin_A2 
....................  
.................... int i,x,a,b = 0; 
.................... int first_digit, second_digit, overflow = 0; 
.................... int down, up, stop= 0; 
.................... int number[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 0x7F, 0x6F}; 
*
0081:  MOVLW  3F
0082:  BCF    03.5
0083:  MOVWF  2A
0084:  MOVLW  06
0085:  MOVWF  2B
0086:  MOVLW  5B
0087:  MOVWF  2C
0088:  MOVLW  4F
0089:  MOVWF  2D
008A:  MOVLW  66
008B:  MOVWF  2E
008C:  MOVLW  6D
008D:  MOVWF  2F
008E:  MOVLW  7C
008F:  MOVWF  30
0090:  MOVLW  07
0091:  MOVWF  31
0092:  MOVLW  7F
0093:  MOVWF  32
0094:  MOVLW  6F
0095:  MOVWF  33
....................  
....................  
.................... void button_up() 
.................... { 
....................     if(!input(pin_stop) && input(pin_up) && !input(pin_down)) 
*
0004:  BSF    03.5
0005:  BSF    05.2
0006:  BCF    03.5
0007:  BTFSC  05.2
0008:  GOTO   01B
0009:  BSF    03.5
000A:  BSF    05.0
000B:  BCF    03.5
000C:  BTFSS  05.0
000D:  GOTO   01B
000E:  BSF    03.5
000F:  BSF    05.1
0010:  BCF    03.5
0011:  BTFSC  05.1
0012:  GOTO   01B
....................    { 
....................       up = 1; 
0013:  MOVLW  01
0014:  MOVWF  28
....................       down, stop = 0; 
0015:  CLRF   29
....................       while(input(pin_up)); 
0016:  BSF    03.5
0017:  BSF    05.0
0018:  BCF    03.5
0019:  BTFSC  05.0
001A:  GOTO   016
....................    } 
001B:  RETURN
.................... } 
....................  
.................... void button_down() 
.................... { 
....................    if(!input(pin_stop) && !input(pin_up) && input(pin_down)) 
001C:  BSF    03.5
001D:  BSF    05.2
001E:  BCF    03.5
001F:  BTFSC  05.2
0020:  GOTO   033
0021:  BSF    03.5
0022:  BSF    05.0
0023:  BCF    03.5
0024:  BTFSC  05.0
0025:  GOTO   033
0026:  BSF    03.5
0027:  BSF    05.1
0028:  BCF    03.5
0029:  BTFSS  05.1
002A:  GOTO   033
....................    { 
....................       down = 1; 
002B:  MOVLW  01
002C:  MOVWF  27
....................       up , stop = 0; 
002D:  CLRF   29
....................       while(input(pin_down)); 
002E:  BSF    03.5
002F:  BSF    05.1
0030:  BCF    03.5
0031:  BTFSC  05.1
0032:  GOTO   02E
....................    } 
0033:  RETURN
.................... } 
....................  
.................... void button_stop() 
.................... { 
....................    if(input(pin_stop) && !input(pin_up) && !input(pin_down)) 
0034:  BSF    03.5
0035:  BSF    05.2
0036:  BCF    03.5
0037:  BTFSS  05.2
0038:  GOTO   04B
0039:  BSF    03.5
003A:  BSF    05.0
003B:  BCF    03.5
003C:  BTFSC  05.0
003D:  GOTO   04B
003E:  BSF    03.5
003F:  BSF    05.1
0040:  BCF    03.5
0041:  BTFSC  05.1
0042:  GOTO   04B
....................    { 
....................      stop = 1; 
0043:  MOVLW  01
0044:  MOVWF  29
....................      up, down = 0; 
0045:  CLRF   27
....................      while(input(pin_stop)); 
0046:  BSF    03.5
0047:  BSF    05.2
0048:  BCF    03.5
0049:  BTFSC  05.2
004A:  GOTO   046
....................    } 
004B:  RETURN
.................... } 
....................  
.................... void delay_stop() 
.................... { 
....................    for(int z=0; z<38; z++) 
*
0061:  CLRF   35
0062:  MOVF   35,W
0063:  SUBLW  25
0064:  BTFSS  03.0
0065:  GOTO   06E
....................    { 
....................       delay_ms(5); 
0066:  MOVLW  05
0067:  MOVWF  36
0068:  CALL   04C
....................       button_stop(); 
0069:  CALL   034
....................       button_down(); 
006A:  CALL   01C
....................       button_up(); 
006B:  CALL   004
006C:  INCF   35,F
006D:  GOTO   062
....................    }  
006E:  BCF    0A.3
006F:  BCF    0A.4
0070:  GOTO   0EF (RETURN)
.................... } 
....................  
.................... void main() 
0071:  MOVF   03,W
0072:  ANDLW  1F
0073:  MOVWF  03
0074:  CLRF   23
0075:  CLRF   26
0076:  CLRF   29
0077:  MOVLW  FF
0078:  MOVWF  34
0079:  BSF    03.5
007A:  BSF    1F.0
007B:  BSF    1F.1
007C:  BSF    1F.2
007D:  BCF    1F.3
007E:  MOVLW  07
007F:  MOVWF  1C
0080:  BCF    03.7
.................... { 
....................     
....................    set_tris_a(0xFF); 
*
0096:  MOVLW  FF
0097:  BSF    03.5
0098:  MOVWF  05
....................    set_tris_b(0x00); 
0099:  MOVLW  00
009A:  MOVWF  06
....................    set_tris_c(0x00); 
009B:  MOVWF  07
009C:  BCF    03.5
009D:  MOVWF  34
....................    output_b(0x00); 
009E:  BSF    03.5
009F:  CLRF   06
00A0:  BCF    03.5
00A1:  CLRF   06
....................    output_c(0x01); 
00A2:  MOVWF  34
00A3:  BSF    03.5
00A4:  CLRF   07
00A5:  MOVLW  01
00A6:  BCF    03.5
00A7:  MOVWF  07
....................  
....................    while(TRUE) 
....................    {   
....................       button_up(); 
00A8:  CALL   004
....................       button_down(); 
00A9:  CALL   01C
....................       button_stop(); 
00AA:  CALL   034
....................        
....................       while(up == 1) 
00AB:  DECFSZ 28,W
00AC:  GOTO   0F2
....................       { 
....................           
....................          for(i=0 ; i<10; i++) 
00AD:  CLRF   20
00AE:  MOVF   20,W
00AF:  SUBLW  09
00B0:  BTFSS  03.0
00B1:  GOTO   0F1
....................          {   
....................             if(first_digit == 10) 
00B2:  MOVF   24,W
00B3:  SUBLW  0A
00B4:  BTFSS  03.2
00B5:  GOTO   0BC
....................             { 
....................                overflow++; 
00B6:  INCF   26,F
....................                first_digit=0; 
00B7:  CLRF   24
....................                if (overflow == 10) 
00B8:  MOVF   26,W
00B9:  SUBLW  0A
00BA:  BTFSC  03.2
....................                overflow = 0; 
00BB:  CLRF   26
....................             } 
....................              
....................             if(0 < overflow < 10) 
00BC:  MOVF   26,W
00BD:  SUBLW  00
00BE:  BTFSS  03.0
00BF:  GOTO   0C2
00C0:  MOVLW  00
00C1:  GOTO   0C3
00C2:  MOVLW  01
00C3:  SUBLW  09
00C4:  BTFSS  03.0
00C5:  GOTO   0DB
....................             {   
....................                a = number[overflow]; 
00C6:  MOVLW  2A
00C7:  ADDWF  26,W
00C8:  MOVWF  04
00C9:  BCF    03.7
00CA:  MOVF   00,W
00CB:  MOVWF  22
....................                output_c(0x02); 
00CC:  MOVLW  00
00CD:  MOVWF  34
00CE:  BSF    03.5
00CF:  CLRF   07
00D0:  MOVLW  02
00D1:  BCF    03.5
00D2:  MOVWF  07
....................                output_b(a); 
00D3:  BSF    03.5
00D4:  CLRF   06
00D5:  BCF    03.5
00D6:  MOVF   22,W
00D7:  MOVWF  06
....................                delay_ms(20); 
00D8:  MOVLW  14
00D9:  MOVWF  36
00DA:  CALL   04C
....................             } 
....................              
....................             x = number[i]; //# first digit up 
00DB:  MOVLW  2A
00DC:  ADDWF  20,W
00DD:  MOVWF  04
00DE:  BCF    03.7
00DF:  MOVF   00,W
00E0:  MOVWF  21
....................             output_c(0x01); 
00E1:  MOVLW  00
00E2:  MOVWF  34
00E3:  BSF    03.5
00E4:  CLRF   07
00E5:  MOVLW  01
00E6:  BCF    03.5
00E7:  MOVWF  07
....................             output_b(x);   //# first digit up 
00E8:  BSF    03.5
00E9:  CLRF   06
00EA:  BCF    03.5
00EB:  MOVF   21,W
00EC:  MOVWF  06
....................             first_digit++; //# first digit up 
00ED:  INCF   24,F
....................             delay_stop();  // delay stop function 
00EE:  GOTO   061
00EF:  INCF   20,F
00F0:  GOTO   0AE
....................          } 
00F1:  GOTO   0AB
....................       } 
00F2:  GOTO   0A8
....................        
....................    } 
.................... } 
....................  
00F3:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
