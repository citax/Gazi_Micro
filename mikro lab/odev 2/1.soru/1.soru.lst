CCS PCM C Compiler, Version 5.015, 5967               15-Mar-23 21:12

               Filename:   C:\Users\edaoz\Desktop\mikrolab\2.deney\1.soru\1.soru.lst

               ROM used:   161 words (2%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include <1.soru.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT 
.................... #use delay(clock=4000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #define buton pin_A0 
.................... #define stop pin_A1 
.................... int a; 
....................  
.................... void main() 
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  BSF    03.5
001D:  BSF    1F.0
001E:  BSF    1F.1
001F:  BSF    1F.2
0020:  BCF    1F.3
0021:  MOVLW  07
0022:  MOVWF  1C
0023:  BCF    03.7
.................... { 
.................... set_tris_a(0xFF); 
0024:  MOVLW  FF
0025:  MOVWF  05
.................... set_tris_b(0x00); 
0026:  MOVLW  00
0027:  MOVWF  06
....................  
.................... output_b(0x00); 
0028:  CLRF   06
0029:  BCF    03.5
002A:  CLRF   06
....................  
....................  
.................... while(1) 
.................... { 
....................  
....................      if(input(buton)) 
002B:  BSF    03.5
002C:  BSF    05.0
002D:  BCF    03.5
002E:  BTFSS  05.0
002F:  GOTO   09F
....................      { 
....................         delay_ms(15); 
0030:  MOVLW  0F
0031:  MOVWF  22
0032:  CALL   004
....................          
....................          if(input(stop)) 
0033:  BSF    03.5
0034:  BSF    05.1
0035:  BCF    03.5
0036:  BTFSS  05.1
0037:  GOTO   040
....................            { 
....................              delay_ms(15); 
0038:  MOVLW  0F
0039:  MOVWF  22
003A:  CALL   004
....................              output_b(0x00); 
003B:  BSF    03.5
003C:  CLRF   06
003D:  BCF    03.5
003E:  CLRF   06
....................              break; 
003F:  GOTO   0A0
....................            } 
....................          
....................         for(a=0;a<20;a++) 
0040:  CLRF   20
0041:  MOVF   20,W
0042:  SUBLW  13
0043:  BTFSS  03.0
0044:  GOTO   09F
....................         { 
....................            if(input(stop)) 
0045:  BSF    03.5
0046:  BSF    05.1
0047:  BCF    03.5
0048:  BTFSS  05.1
0049:  GOTO   052
....................            { 
....................              delay_ms(15); 
004A:  MOVLW  0F
004B:  MOVWF  22
004C:  CALL   004
....................              output_b(0x00); 
004D:  BSF    03.5
004E:  CLRF   06
004F:  BCF    03.5
0050:  CLRF   06
....................              break; 
0051:  GOTO   09F
....................            }       
....................             
....................            output_b(0xFF); 
0052:  BSF    03.5
0053:  CLRF   06
0054:  MOVLW  FF
0055:  BCF    03.5
0056:  MOVWF  06
....................             
....................            if(input(stop)) 
0057:  BSF    03.5
0058:  BSF    05.1
0059:  BCF    03.5
005A:  BTFSS  05.1
005B:  GOTO   064
....................            { 
....................              delay_ms(15); 
005C:  MOVLW  0F
005D:  MOVWF  22
005E:  CALL   004
....................              output_b(0x00); 
005F:  BSF    03.5
0060:  CLRF   06
0061:  BCF    03.5
0062:  CLRF   06
....................              break; 
0063:  GOTO   09F
....................            } 
....................             
....................            delay_ms(500); 
0064:  MOVLW  02
0065:  MOVWF  21
0066:  MOVLW  FA
0067:  MOVWF  22
0068:  CALL   004
0069:  DECFSZ 21,F
006A:  GOTO   066
....................             
....................            if(input(stop)) 
006B:  BSF    03.5
006C:  BSF    05.1
006D:  BCF    03.5
006E:  BTFSS  05.1
006F:  GOTO   078
....................            { 
....................              delay_ms(15); 
0070:  MOVLW  0F
0071:  MOVWF  22
0072:  CALL   004
....................              output_b(0x00); 
0073:  BSF    03.5
0074:  CLRF   06
0075:  BCF    03.5
0076:  CLRF   06
....................              break; 
0077:  GOTO   09F
....................            } 
....................             
....................            output_b(0x00); 
0078:  BSF    03.5
0079:  CLRF   06
007A:  BCF    03.5
007B:  CLRF   06
....................             
....................            if(input(stop)) 
007C:  BSF    03.5
007D:  BSF    05.1
007E:  BCF    03.5
007F:  BTFSS  05.1
0080:  GOTO   089
....................            { 
....................              delay_ms(15); 
0081:  MOVLW  0F
0082:  MOVWF  22
0083:  CALL   004
....................              output_b(0x00); 
0084:  BSF    03.5
0085:  CLRF   06
0086:  BCF    03.5
0087:  CLRF   06
....................              break; 
0088:  GOTO   09F
....................            } 
....................             
....................            delay_ms(500); 
0089:  MOVLW  02
008A:  MOVWF  21
008B:  MOVLW  FA
008C:  MOVWF  22
008D:  CALL   004
008E:  DECFSZ 21,F
008F:  GOTO   08B
....................             
....................            if(input(stop)) 
0090:  BSF    03.5
0091:  BSF    05.1
0092:  BCF    03.5
0093:  BTFSS  05.1
0094:  GOTO   09D
....................            { 
....................              delay_ms(15); 
0095:  MOVLW  0F
0096:  MOVWF  22
0097:  CALL   004
....................              output_b(0x00); 
0098:  BSF    03.5
0099:  CLRF   06
009A:  BCF    03.5
009B:  CLRF   06
....................              break; 
009C:  GOTO   09F
....................            } 
009D:  INCF   20,F
009E:  GOTO   041
....................             
....................         } 
....................          
....................      }    
009F:  GOTO   02B
.................... } 
.................... } 
00A0:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
