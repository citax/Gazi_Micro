CCS PCM C Compiler, Version 5.015, 5967               12-Nis-23 21:50

               Filename:   E:\Okul\Mikro\mikro lab\odev 6\0'dan 99'a kadar clse + kesme\Kod\main.lst

               ROM used:   523 words (6%)
                           Largest free fragment is 2048
               RAM used:   45 (12%) at main() level
                           52 (14%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   10A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   044
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
00E5:  CLRF   78
00E6:  CLRF   79
00E7:  CLRF   77
00E8:  CLRF   7A
00E9:  MOVF   4C,W
00EA:  BTFSS  03.2
00EB:  GOTO   0EF
00EC:  MOVF   4B,W
00ED:  BTFSC  03.2
00EE:  GOTO   109
00EF:  MOVLW  10
00F0:  MOVWF  4D
00F1:  BCF    03.0
00F2:  RLF    49,F
00F3:  RLF    4A,F
00F4:  RLF    77,F
00F5:  RLF    7A,F
00F6:  MOVF   4C,W
00F7:  SUBWF  7A,W
00F8:  BTFSS  03.2
00F9:  GOTO   0FC
00FA:  MOVF   4B,W
00FB:  SUBWF  77,W
00FC:  BTFSS  03.0
00FD:  GOTO   105
00FE:  MOVF   4B,W
00FF:  SUBWF  77,F
0100:  BTFSS  03.0
0101:  DECF   7A,F
0102:  MOVF   4C,W
0103:  SUBWF  7A,F
0104:  BSF    03.0
0105:  RLF    78,F
0106:  RLF    79,F
0107:  DECFSZ 4D,F
0108:  GOTO   0F1
0109:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses HS, NOWDT, NOPROTECT  
.................... #use delay(clock=4000000) 
*
002F:  MOVLW  4E
0030:  MOVWF  04
0031:  BCF    03.7
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   043
0035:  MOVLW  01
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  4A
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  GOTO   041
0041:  DECFSZ 00,F
0042:  GOTO   035
0043:  RETURN
....................  
.................... #define pin_up   pin_E0 
.................... #define pin_stop pin_E1 
.................... #define display1 pin_C0 
.................... #define display2 pin_C1 
.................... #define display3 pin_C2 
.................... #define display4 pin_C3 
....................  
.................... int k; 
.................... int loop = 0; 
.................... int birler,onlar= 0; 
.................... unsigned long int digit = 0; 
.................... int up, stop= 0; 
.................... int number[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 0x7F, 0x6F}; 
*
011C:  MOVLW  3F
011D:  BCF    03.5
011E:  MOVWF  30
011F:  MOVLW  06
0120:  MOVWF  31
0121:  MOVLW  5B
0122:  MOVWF  32
0123:  MOVLW  4F
0124:  MOVWF  33
0125:  MOVLW  66
0126:  MOVWF  34
0127:  MOVLW  6D
0128:  MOVWF  35
0129:  MOVLW  7C
012A:  MOVWF  36
012B:  MOVLW  07
012C:  MOVWF  37
012D:  MOVLW  7F
012E:  MOVWF  38
012F:  MOVLW  6F
0130:  MOVWF  39
.................... int cls[4] = {0x58, 0x38, 0x6D, 0x79}; 
0131:  MOVLW  58
0132:  MOVWF  3A
0133:  MOVLW  38
0134:  MOVWF  3B
0135:  MOVLW  6D
0136:  MOVWF  3C
0137:  MOVLW  79
0138:  MOVWF  3D
.................... int opn[4] = {0x5C, 0x73, 0x79, 0x54}; 
0139:  MOVLW  5C
013A:  MOVWF  3E
013B:  MOVLW  73
013C:  MOVWF  3F
013D:  MOVLW  79
013E:  MOVWF  40
013F:  MOVLW  54
0140:  MOVWF  41
.................... int itr[4] = {0xB0, 0xD4, 0xF8, 0xBF}; 
0141:  MOVLW  B0
0142:  MOVWF  42
0143:  MOVLW  D4
0144:  MOVWF  43
0145:  MOVLW  F8
0146:  MOVWF  44
0147:  MOVLW  BF
0148:  MOVWF  45
....................  
....................  
.................... void button_stop() 
.................... { 
....................    if(input(pin_stop) && !input(pin_up)) 
*
00A1:  BSF    03.5
00A2:  BSF    09.1
00A3:  BCF    03.5
00A4:  BTFSS  09.1
00A5:  GOTO   0BF
00A6:  BSF    03.5
00A7:  BSF    09.0
00A8:  BCF    03.5
00A9:  BTFSC  09.0
00AA:  GOTO   0BF
....................    { 
....................      stop = 1; 
00AB:  MOVLW  01
00AC:  MOVWF  2F
....................      up = 0; 
00AD:  CLRF   2E
....................      output_c(0x00); 
00AE:  MOVLW  00
00AF:  MOVWF  46
00B0:  BSF    03.5
00B1:  CLRF   07
00B2:  BCF    03.5
00B3:  CLRF   07
....................      output_d(0x00); 
00B4:  BSF    03.5
00B5:  CLRF   08
00B6:  BCF    03.5
00B7:  CLRF   08
....................      digit=0; 
00B8:  CLRF   2D
00B9:  CLRF   2C
....................      while(input(pin_stop)); 
00BA:  BSF    03.5
00BB:  BSF    09.1
00BC:  BCF    03.5
00BD:  BTFSC  09.1
00BE:  GOTO   0BA
....................    } 
00BF:  RETURN
.................... } 
....................  
....................  
.................... void button_up() 
.................... { 
....................     if(!input(pin_stop) && input(pin_up)) 
00C0:  BSF    03.5
00C1:  BSF    09.1
00C2:  BCF    03.5
00C3:  BTFSC  09.1
00C4:  GOTO   0E2
00C5:  BSF    03.5
00C6:  BSF    09.0
00C7:  BCF    03.5
00C8:  BTFSS  09.0
00C9:  GOTO   0E2
....................    { 
....................       output_c(0x00); 
00CA:  MOVLW  00
00CB:  MOVWF  46
00CC:  BSF    03.5
00CD:  CLRF   07
00CE:  BCF    03.5
00CF:  CLRF   07
....................       up = 1; 
00D0:  MOVLW  01
00D1:  MOVWF  2E
....................       loop = 0; 
00D2:  CLRF   29
....................       stop= 0; 
00D3:  CLRF   2F
....................       if (digit==99) 
00D4:  MOVF   2C,W
00D5:  SUBLW  63
00D6:  BTFSS  03.2
00D7:  GOTO   0DD
00D8:  MOVF   2D,F
00D9:  BTFSS  03.2
00DA:  GOTO   0DD
....................       digit=0; 
00DB:  CLRF   2D
00DC:  CLRF   2C
....................       while(input(pin_up)); 
00DD:  BSF    03.5
00DE:  BSF    09.0
00DF:  BCF    03.5
00E0:  BTFSC  09.0
00E1:  GOTO   0DD
....................    } 
00E2:  BCF    0A.3
00E3:  BCF    0A.4
00E4:  GOTO   18D (RETURN)
.................... } 
....................  
.................... #int_timer0 
.................... void ext_kesmesi() 
.................... { 
....................    set_timer0(248); 
*
0044:  MOVLW  F8
0045:  MOVWF  01
....................    for( k=0; k<250; k++) 
0046:  CLRF   28
0047:  MOVF   28,W
0048:  SUBLW  F9
0049:  BTFSS  03.0
004A:  GOTO   09D
....................    { 
....................          
....................          output_high(display1); 
004B:  BCF    46.0
004C:  MOVF   46,W
004D:  BSF    03.5
004E:  MOVWF  07
004F:  BCF    03.5
0050:  BSF    07.0
....................          output_d(itr[3]); 
0051:  BSF    03.5
0052:  CLRF   08
0053:  BCF    03.5
0054:  MOVF   45,W
0055:  MOVWF  08
....................          delay_ms(5); 
0056:  MOVLW  05
0057:  MOVWF  4E
0058:  CALL   02F
....................          output_low(display1); 
0059:  BCF    46.0
005A:  MOVF   46,W
005B:  BSF    03.5
005C:  MOVWF  07
005D:  BCF    03.5
005E:  BCF    07.0
....................           
....................          output_high(display2); 
005F:  BCF    46.1
0060:  MOVF   46,W
0061:  BSF    03.5
0062:  MOVWF  07
0063:  BCF    03.5
0064:  BSF    07.1
....................          output_d(itr[2]); 
0065:  BSF    03.5
0066:  CLRF   08
0067:  BCF    03.5
0068:  MOVF   44,W
0069:  MOVWF  08
....................          delay_ms(5); 
006A:  MOVLW  05
006B:  MOVWF  4E
006C:  CALL   02F
....................          output_low(display2); 
006D:  BCF    46.1
006E:  MOVF   46,W
006F:  BSF    03.5
0070:  MOVWF  07
0071:  BCF    03.5
0072:  BCF    07.1
....................           
....................          output_high(display3); 
0073:  BCF    46.2
0074:  MOVF   46,W
0075:  BSF    03.5
0076:  MOVWF  07
0077:  BCF    03.5
0078:  BSF    07.2
....................          output_d(itr[1]); 
0079:  BSF    03.5
007A:  CLRF   08
007B:  BCF    03.5
007C:  MOVF   43,W
007D:  MOVWF  08
....................          delay_ms(5); 
007E:  MOVLW  05
007F:  MOVWF  4E
0080:  CALL   02F
....................          output_low(display3); 
0081:  BCF    46.2
0082:  MOVF   46,W
0083:  BSF    03.5
0084:  MOVWF  07
0085:  BCF    03.5
0086:  BCF    07.2
....................           
....................          output_high(display4); 
0087:  BCF    46.3
0088:  MOVF   46,W
0089:  BSF    03.5
008A:  MOVWF  07
008B:  BCF    03.5
008C:  BSF    07.3
....................          output_d(itr[0]); 
008D:  BSF    03.5
008E:  CLRF   08
008F:  BCF    03.5
0090:  MOVF   42,W
0091:  MOVWF  08
....................          delay_ms(5); 
0092:  MOVLW  05
0093:  MOVWF  4E
0094:  CALL   02F
....................          output_low(display4); 
0095:  BCF    46.3
0096:  MOVF   46,W
0097:  BSF    03.5
0098:  MOVWF  07
0099:  BCF    03.5
009A:  BCF    07.3
009B:  INCF   28,F
009C:  GOTO   047
....................    } 
009D:  BCF    0B.2
009E:  BCF    0A.3
009F:  BCF    0A.4
00A0:  GOTO   01B
.................... } 
....................  
.................... void main() 
*
010A:  MOVF   03,W
010B:  ANDLW  1F
010C:  MOVWF  03
010D:  CLRF   29
010E:  CLRF   2B
010F:  CLRF   2D
0110:  CLRF   2C
0111:  CLRF   2F
0112:  MOVLW  FF
0113:  MOVWF  46
0114:  BSF    03.5
0115:  BSF    1F.0
0116:  BSF    1F.1
0117:  BSF    1F.2
0118:  BCF    1F.3
0119:  MOVLW  07
011A:  MOVWF  1C
011B:  BCF    03.7
.................... { 
....................    set_tris_b(0xFF); 
*
0149:  MOVLW  FF
014A:  BSF    03.5
014B:  MOVWF  06
....................    set_tris_e(0xFF); 
014C:  BSF    09.0
014D:  BSF    09.1
014E:  BSF    09.2
....................    set_tris_d(0x00); 
014F:  MOVLW  00
0150:  MOVWF  08
....................    set_tris_c(0x00); 
0151:  MOVWF  07
0152:  BCF    03.5
0153:  MOVWF  46
....................    output_d(0x00); 
0154:  BSF    03.5
0155:  CLRF   08
0156:  BCF    03.5
0157:  CLRF   08
....................    output_c(0x00); 
0158:  MOVWF  46
0159:  BSF    03.5
015A:  CLRF   07
015B:  BCF    03.5
015C:  CLRF   07
....................     
....................    enable_interrupts(INT_timer0); //kesme aktif ediliyor 
015D:  BSF    0B.5
....................    enable_interrupts(GLOBAL);  //kesmeler global yapiliyor 
015E:  MOVLW  C0
015F:  IORWF  0B,F
....................    setup_timer_0(RTCC_EXT_H_TO_L | RTCC_DIV_2);  
0160:  BSF    03.5
0161:  MOVF   01,W
0162:  ANDLW  C0
0163:  IORLW  30
0164:  MOVWF  01
....................    set_timer0(248); 
0165:  MOVLW  F8
0166:  BCF    03.5
0167:  MOVWF  01
....................     
....................     
....................    while(TRUE) 
....................    {   
....................       output_c(0xFF); 
0168:  MOVLW  00
0169:  MOVWF  46
016A:  BSF    03.5
016B:  CLRF   07
016C:  MOVLW  FF
016D:  BCF    03.5
016E:  MOVWF  07
....................       output_d(0x00); 
016F:  BSF    03.5
0170:  CLRF   08
0171:  BCF    03.5
0172:  CLRF   08
0173:  CLRF   27
0174:  BTFSC  0B.7
0175:  BSF    27.7
0176:  BCF    0B.7
....................       delay_ms(20); 
0177:  MOVLW  14
0178:  MOVWF  4E
0179:  CALL   02F
017A:  BTFSC  27.7
017B:  BSF    0B.7
....................       loop=0;  
017C:  CLRF   29
....................       output_d(0x80); 
017D:  BSF    03.5
017E:  CLRF   08
017F:  MOVLW  80
0180:  BCF    03.5
0181:  MOVWF  08
0182:  CLRF   27
0183:  BTFSC  0B.7
0184:  BSF    27.7
0185:  BCF    0B.7
....................       delay_ms(20); 
0186:  MOVLW  14
0187:  MOVWF  4E
0188:  CALL   02F
0189:  BTFSC  27.7
018A:  BSF    0B.7
....................         
....................       button_stop(); 
018B:  CALL   0A1
....................       button_up(); 
018C:  GOTO   0C0
....................        
....................        while(up == 1) 
018D:  DECFSZ 2E,W
018E:  GOTO   209
....................       {      
....................              
....................              
....................             for(int y=0; y<200;y++) 
018F:  CLRF   47
0190:  MOVF   47,W
0191:  SUBLW  C7
0192:  BTFSS  03.0
0193:  GOTO   205
....................             { 
....................              
....................             birler = digit % 10 ; //birler 
0194:  MOVF   2D,W
0195:  MOVWF  4A
0196:  MOVF   2C,W
0197:  MOVWF  49
0198:  CLRF   4C
0199:  MOVLW  0A
019A:  MOVWF  4B
019B:  CALL   0E5
019C:  MOVF   77,W
019D:  MOVWF  2A
....................             onlar = digit / 10 ; //onlar 
019E:  MOVF   2D,W
019F:  MOVWF  4A
01A0:  MOVF   2C,W
01A1:  MOVWF  49
01A2:  CLRF   4C
01A3:  MOVLW  0A
01A4:  MOVWF  4B
01A5:  CALL   0E5
01A6:  MOVF   78,W
01A7:  MOVWF  2B
....................              
....................             digit++; 
01A8:  INCF   2C,F
01A9:  BTFSC  03.2
01AA:  INCF   2D,F
....................              
....................             if(digit == 100) 
01AB:  MOVF   2C,W
01AC:  SUBLW  64
01AD:  BTFSS  03.2
01AE:  GOTO   1B5
01AF:  MOVF   2D,F
01B0:  BTFSS  03.2
01B1:  GOTO   1B5
....................             { 
....................             digit=0; 
01B2:  CLRF   2D
01B3:  CLRF   2C
....................             loop++; 
01B4:  INCF   29,F
....................             } 
....................              
....................             for(int k=0; k<10 ; k++) 
01B5:  CLRF   48
01B6:  MOVF   48,W
01B7:  SUBLW  09
01B8:  BTFSS  03.0
01B9:  GOTO   200
....................                {   
....................                    
....................                   output_high(display1); 
01BA:  BCF    46.0
01BB:  MOVF   46,W
01BC:  BSF    03.5
01BD:  MOVWF  07
01BE:  BCF    03.5
01BF:  BSF    07.0
....................                   output_d(number[birler]); 
01C0:  MOVLW  30
01C1:  ADDWF  2A,W
01C2:  MOVWF  04
01C3:  BCF    03.7
01C4:  MOVF   00,W
01C5:  MOVWF  49
01C6:  BSF    03.5
01C7:  CLRF   08
01C8:  BCF    03.5
01C9:  MOVF   49,W
01CA:  MOVWF  08
01CB:  CLRF   27
01CC:  BTFSC  0B.7
01CD:  BSF    27.7
01CE:  BCF    0B.7
....................                   delay_ms(5); 
01CF:  MOVLW  05
01D0:  MOVWF  4E
01D1:  CALL   02F
01D2:  BTFSC  27.7
01D3:  BSF    0B.7
....................                   output_low(display1); 
01D4:  BCF    46.0
01D5:  MOVF   46,W
01D6:  BSF    03.5
01D7:  MOVWF  07
01D8:  BCF    03.5
01D9:  BCF    07.0
....................                    
....................                   output_high(display2); 
01DA:  BCF    46.1
01DB:  MOVF   46,W
01DC:  BSF    03.5
01DD:  MOVWF  07
01DE:  BCF    03.5
01DF:  BSF    07.1
....................                   output_d(number[onlar]); 
01E0:  MOVLW  30
01E1:  ADDWF  2B,W
01E2:  MOVWF  04
01E3:  BCF    03.7
01E4:  MOVF   00,W
01E5:  MOVWF  49
01E6:  BSF    03.5
01E7:  CLRF   08
01E8:  BCF    03.5
01E9:  MOVF   49,W
01EA:  MOVWF  08
01EB:  CLRF   27
01EC:  BTFSC  0B.7
01ED:  BSF    27.7
01EE:  BCF    0B.7
....................                   delay_ms(5); 
01EF:  MOVLW  05
01F0:  MOVWF  4E
01F1:  CALL   02F
01F2:  BTFSC  27.7
01F3:  BSF    0B.7
....................                   output_low(display2); 
01F4:  BCF    46.1
01F5:  MOVF   46,W
01F6:  BSF    03.5
01F7:  MOVWF  07
01F8:  BCF    03.5
01F9:  BCF    07.1
....................   
....................                   button_stop();  
01FA:  CALL   0A1
....................                    
....................                   if(stop == 1) 
01FB:  DECFSZ 2F,W
01FC:  GOTO   1FE
....................                   break; 
01FD:  GOTO   200
01FE:  INCF   48,F
01FF:  GOTO   1B6
....................                    
....................                } 
....................              if(stop == 1) 
0200:  DECFSZ 2F,W
0201:  GOTO   203
....................              break; 
0202:  GOTO   205
0203:  INCF   47,F
0204:  GOTO   190
....................              } 
....................              if(stop == 1) 
0205:  DECFSZ 2F,W
0206:  GOTO   208
....................              break; 
0207:  GOTO   209
0208:  GOTO   18D
....................  
....................         } 
0209:  GOTO   168
....................  
....................    } 
.................... } 
....................  
020A:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
