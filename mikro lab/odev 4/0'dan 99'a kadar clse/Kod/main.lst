CCS PCM C Compiler, Version 5.015, 5967               29-Mar-23 23:30

               Filename:   E:\Okul\Mikro\mikro lab\odev 4\0'dan 99'a kadar clse\Kod\main.lst

               ROM used:   537 words (7%)
                           Largest free fragment is 2048
               RAM used:   35 (10%) at main() level
                           43 (12%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   083
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
005E:  CLRF   78
005F:  CLRF   79
0060:  CLRF   77
0061:  CLRF   7A
0062:  MOVF   44,W
0063:  BTFSS  03.2
0064:  GOTO   068
0065:  MOVF   43,W
0066:  BTFSC  03.2
0067:  GOTO   082
0068:  MOVLW  10
0069:  MOVWF  45
006A:  BCF    03.0
006B:  RLF    41,F
006C:  RLF    42,F
006D:  RLF    77,F
006E:  RLF    7A,F
006F:  MOVF   44,W
0070:  SUBWF  7A,W
0071:  BTFSS  03.2
0072:  GOTO   075
0073:  MOVF   43,W
0074:  SUBWF  77,W
0075:  BTFSS  03.0
0076:  GOTO   07E
0077:  MOVF   43,W
0078:  SUBWF  77,F
0079:  BTFSS  03.0
007A:  DECF   7A,F
007B:  MOVF   44,W
007C:  SUBWF  7A,F
007D:  BSF    03.0
007E:  RLF    78,F
007F:  RLF    79,F
0080:  DECFSZ 45,F
0081:  GOTO   06A
0082:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses HS, NOWDT, NOPROTECT  
.................... #use delay(clock=4000000) 
*
0004:  MOVLW  41
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
.................... #define pin_up   pin_A0 
.................... #define pin_stop pin_A2 
.................... #define display1 pin_C0 
.................... #define display2 pin_C1 
.................... #define display3 pin_C2 
.................... #define display4 pin_C3 
.................... int a,b,loop,c = 0; 
.................... int birler,onlar= 0; 
.................... unsigned long int digit = 0; 
.................... int up, stop= 0; 
.................... int number[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 0x7F, 0x6F}; 
*
0095:  MOVLW  3F
0096:  BCF    03.5
0097:  MOVWF  2A
0098:  MOVLW  06
0099:  MOVWF  2B
009A:  MOVLW  5B
009B:  MOVWF  2C
009C:  MOVLW  4F
009D:  MOVWF  2D
009E:  MOVLW  66
009F:  MOVWF  2E
00A0:  MOVLW  6D
00A1:  MOVWF  2F
00A2:  MOVLW  7C
00A3:  MOVWF  30
00A4:  MOVLW  07
00A5:  MOVWF  31
00A6:  MOVLW  7F
00A7:  MOVWF  32
00A8:  MOVLW  6F
00A9:  MOVWF  33
.................... int cls[4] = {0x58, 0x38, 0x6D, 0x79}; 
00AA:  MOVLW  58
00AB:  MOVWF  34
00AC:  MOVLW  38
00AD:  MOVWF  35
00AE:  MOVLW  6D
00AF:  MOVWF  36
00B0:  MOVLW  79
00B1:  MOVWF  37
.................... int opn[4] = {0x5C, 0x73, 0x79, 0x54}; 
00B2:  MOVLW  5C
00B3:  MOVWF  38
00B4:  MOVLW  73
00B5:  MOVWF  39
00B6:  MOVLW  79
00B7:  MOVWF  3A
00B8:  MOVLW  54
00B9:  MOVWF  3B
....................  
.................... void button_stop() 
.................... { 
....................    if(input(pin_stop) && !input(pin_up)) 
*
0019:  BSF    03.5
001A:  BSF    05.2
001B:  BCF    03.5
001C:  BTFSS  05.2
001D:  GOTO   037
001E:  BSF    03.5
001F:  BSF    05.0
0020:  BCF    03.5
0021:  BTFSC  05.0
0022:  GOTO   037
....................    { 
....................      stop = 1; 
0023:  MOVLW  01
0024:  MOVWF  29
....................      up,a,b = 0; 
0025:  CLRF   21
....................      output_c(0x00); 
0026:  MOVLW  00
0027:  MOVWF  3C
0028:  BSF    03.5
0029:  CLRF   07
002A:  BCF    03.5
002B:  CLRF   07
....................      output_b(0x00); 
002C:  BSF    03.5
002D:  CLRF   06
002E:  BCF    03.5
002F:  CLRF   06
....................      digit=0; 
0030:  CLRF   27
0031:  CLRF   26
....................      while(input(pin_stop)); 
0032:  BSF    03.5
0033:  BSF    05.2
0034:  BCF    03.5
0035:  BTFSC  05.2
0036:  GOTO   032
....................    } 
....................    up=0; 
0037:  CLRF   28
0038:  RETURN
.................... } 
....................  
....................  
.................... void button_up() 
.................... { 
....................     if(!input(pin_stop) && input(pin_up)) 
0039:  BSF    03.5
003A:  BSF    05.2
003B:  BCF    03.5
003C:  BTFSC  05.2
003D:  GOTO   05B
003E:  BSF    03.5
003F:  BSF    05.0
0040:  BCF    03.5
0041:  BTFSS  05.0
0042:  GOTO   05B
....................    { 
....................       output_c(0x00); 
0043:  MOVLW  00
0044:  MOVWF  3C
0045:  BSF    03.5
0046:  CLRF   07
0047:  BCF    03.5
0048:  CLRF   07
....................       up = 1; 
0049:  MOVLW  01
004A:  MOVWF  28
....................       a,c,b,loop = 0; 
004B:  CLRF   22
....................       stop= 0; 
004C:  CLRF   29
....................       if (digit==99) 
004D:  MOVF   26,W
004E:  SUBLW  63
004F:  BTFSS  03.2
0050:  GOTO   056
0051:  MOVF   27,F
0052:  BTFSS  03.2
0053:  GOTO   056
....................       digit=0; 
0054:  CLRF   27
0055:  CLRF   26
....................       while(input(pin_up)); 
0056:  BSF    03.5
0057:  BSF    05.0
0058:  BCF    03.5
0059:  BTFSC  05.0
005A:  GOTO   056
....................    } 
005B:  BCF    0A.3
005C:  BCF    0A.4
005D:  GOTO   0E5 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void main() 
*
0083:  MOVF   03,W
0084:  ANDLW  1F
0085:  MOVWF  03
0086:  CLRF   23
0087:  CLRF   25
0088:  CLRF   27
0089:  CLRF   26
008A:  CLRF   29
008B:  MOVLW  FF
008C:  MOVWF  3C
008D:  BSF    03.5
008E:  BSF    1F.0
008F:  BSF    1F.1
0090:  BSF    1F.2
0091:  BCF    1F.3
0092:  MOVLW  07
0093:  MOVWF  1C
0094:  BCF    03.7
.................... { 
....................    set_tris_a(0xFF); 
*
00BA:  MOVLW  FF
00BB:  BSF    03.5
00BC:  MOVWF  05
....................    set_tris_b(0x00); 
00BD:  MOVLW  00
00BE:  MOVWF  06
....................    set_tris_c(0x00); 
00BF:  MOVWF  07
00C0:  BCF    03.5
00C1:  MOVWF  3C
....................    output_b(0x00); 
00C2:  BSF    03.5
00C3:  CLRF   06
00C4:  BCF    03.5
00C5:  CLRF   06
....................   output_c(0x00); 
00C6:  MOVWF  3C
00C7:  BSF    03.5
00C8:  CLRF   07
00C9:  BCF    03.5
00CA:  CLRF   07
....................     
....................    while(TRUE) 
....................    {   
....................       output_c(0xFF); 
00CB:  MOVLW  00
00CC:  MOVWF  3C
00CD:  BSF    03.5
00CE:  CLRF   07
00CF:  MOVLW  FF
00D0:  BCF    03.5
00D1:  MOVWF  07
....................       output_b(0x00); 
00D2:  BSF    03.5
00D3:  CLRF   06
00D4:  BCF    03.5
00D5:  CLRF   06
....................       delay_ms(20); 
00D6:  MOVLW  14
00D7:  MOVWF  41
00D8:  CALL   004
....................         loop=0;  
00D9:  CLRF   22
....................         output_b(0x80); 
00DA:  BSF    03.5
00DB:  CLRF   06
00DC:  MOVLW  80
00DD:  BCF    03.5
00DE:  MOVWF  06
....................       a=0; 
00DF:  CLRF   20
....................       delay_ms(20); 
00E0:  MOVLW  14
00E1:  MOVWF  41
00E2:  CALL   004
....................       
....................        
....................      
....................       button_stop(); 
00E3:  CALL   019
....................       button_up(); 
00E4:  GOTO   039
....................        
....................        while(up == 1) 
00E5:  DECFSZ 28,W
00E6:  GOTO   217
....................       {      
....................               
....................   ///////////////////////////////////////////////////////// 
....................      for(int t=0; t<15 ; t++) 
00E7:  CLRF   3D
00E8:  MOVF   3D,W
00E9:  SUBLW  0E
00EA:  BTFSS  03.0
00EB:  GOTO   142
....................      { 
....................          output_high(display1); 
00EC:  BCF    3C.0
00ED:  MOVF   3C,W
00EE:  BSF    03.5
00EF:  MOVWF  07
00F0:  BCF    03.5
00F1:  BSF    07.0
....................          output_b(opn[3]); 
00F2:  BSF    03.5
00F3:  CLRF   06
00F4:  BCF    03.5
00F5:  MOVF   3B,W
00F6:  MOVWF  06
....................          delay_ms(5); 
00F7:  MOVLW  05
00F8:  MOVWF  41
00F9:  CALL   004
....................          output_low(display1); 
00FA:  BCF    3C.0
00FB:  MOVF   3C,W
00FC:  BSF    03.5
00FD:  MOVWF  07
00FE:  BCF    03.5
00FF:  BCF    07.0
....................           
....................          output_high(display2); 
0100:  BCF    3C.1
0101:  MOVF   3C,W
0102:  BSF    03.5
0103:  MOVWF  07
0104:  BCF    03.5
0105:  BSF    07.1
....................          output_b(opn[2]); 
0106:  BSF    03.5
0107:  CLRF   06
0108:  BCF    03.5
0109:  MOVF   3A,W
010A:  MOVWF  06
....................          delay_ms(5); 
010B:  MOVLW  05
010C:  MOVWF  41
010D:  CALL   004
....................          output_low(display2); 
010E:  BCF    3C.1
010F:  MOVF   3C,W
0110:  BSF    03.5
0111:  MOVWF  07
0112:  BCF    03.5
0113:  BCF    07.1
....................           
....................          output_high(display3); 
0114:  BCF    3C.2
0115:  MOVF   3C,W
0116:  BSF    03.5
0117:  MOVWF  07
0118:  BCF    03.5
0119:  BSF    07.2
....................          output_b(opn[1]); 
011A:  BSF    03.5
011B:  CLRF   06
011C:  BCF    03.5
011D:  MOVF   39,W
011E:  MOVWF  06
....................          delay_ms(5); 
011F:  MOVLW  05
0120:  MOVWF  41
0121:  CALL   004
....................          output_low(display3); 
0122:  BCF    3C.2
0123:  MOVF   3C,W
0124:  BSF    03.5
0125:  MOVWF  07
0126:  BCF    03.5
0127:  BCF    07.2
....................           
....................          output_high(display4); 
0128:  BCF    3C.3
0129:  MOVF   3C,W
012A:  BSF    03.5
012B:  MOVWF  07
012C:  BCF    03.5
012D:  BSF    07.3
....................          output_b(opn[0]); 
012E:  BSF    03.5
012F:  CLRF   06
0130:  BCF    03.5
0131:  MOVF   38,W
0132:  MOVWF  06
....................          delay_ms(5); 
0133:  MOVLW  05
0134:  MOVWF  41
0135:  CALL   004
....................          output_low(display4); 
0136:  BCF    3C.3
0137:  MOVF   3C,W
0138:  BSF    03.5
0139:  MOVWF  07
013A:  BCF    03.5
013B:  BCF    07.3
....................           
....................          button_stop();          
013C:  CALL   019
....................          if(stop == 1) 
013D:  DECFSZ 29,W
013E:  GOTO   140
....................           break; 
013F:  GOTO   142
0140:  INCF   3D,F
0141:  GOTO   0E8
....................       } 
....................  ////////////////////////////////////////////////////////////      
....................          
....................             if(stop == 1) 
0142:  DECFSZ 29,W
0143:  GOTO   145
....................             break; 
0144:  GOTO   217
....................              
....................             for(int y=0; y<200;y++) 
0145:  CLRF   3E
0146:  MOVF   3E,W
0147:  SUBLW  C7
0148:  BTFSS  03.0
0149:  GOTO   1AF
....................             { 
....................              
....................             birler = digit % 10 ; //birler 
014A:  MOVF   27,W
014B:  MOVWF  42
014C:  MOVF   26,W
014D:  MOVWF  41
014E:  CLRF   44
014F:  MOVLW  0A
0150:  MOVWF  43
0151:  CALL   05E
0152:  MOVF   77,W
0153:  MOVWF  24
....................             onlar = digit / 10 ; //onlar 
0154:  MOVF   27,W
0155:  MOVWF  42
0156:  MOVF   26,W
0157:  MOVWF  41
0158:  CLRF   44
0159:  MOVLW  0A
015A:  MOVWF  43
015B:  CALL   05E
015C:  MOVF   78,W
015D:  MOVWF  25
....................              
....................             digit++; 
015E:  INCF   26,F
015F:  BTFSC  03.2
0160:  INCF   27,F
....................              
....................             if(digit == 100) 
0161:  MOVF   26,W
0162:  SUBLW  64
0163:  BTFSS  03.2
0164:  GOTO   16B
0165:  MOVF   27,F
0166:  BTFSS  03.2
0167:  GOTO   16B
....................             { 
....................             digit=0; 
0168:  CLRF   27
0169:  CLRF   26
....................             loop++; 
016A:  INCF   22,F
....................             } 
....................              
....................             for(int k=0; k<3 ; k++) 
016B:  CLRF   3F
016C:  MOVF   3F,W
016D:  SUBLW  02
016E:  BTFSS  03.0
016F:  GOTO   1AA
....................                {   
....................                    
....................                   output_high(display1); 
0170:  BCF    3C.0
0171:  MOVF   3C,W
0172:  BSF    03.5
0173:  MOVWF  07
0174:  BCF    03.5
0175:  BSF    07.0
....................                   output_b(number[birler]); 
0176:  MOVLW  2A
0177:  ADDWF  24,W
0178:  MOVWF  04
0179:  BCF    03.7
017A:  MOVF   00,W
017B:  MOVWF  41
017C:  BSF    03.5
017D:  CLRF   06
017E:  BCF    03.5
017F:  MOVF   41,W
0180:  MOVWF  06
....................                   delay_ms(5); 
0181:  MOVLW  05
0182:  MOVWF  41
0183:  CALL   004
....................                   output_low(display1); 
0184:  BCF    3C.0
0185:  MOVF   3C,W
0186:  BSF    03.5
0187:  MOVWF  07
0188:  BCF    03.5
0189:  BCF    07.0
....................                    
....................                   output_high(display2); 
018A:  BCF    3C.1
018B:  MOVF   3C,W
018C:  BSF    03.5
018D:  MOVWF  07
018E:  BCF    03.5
018F:  BSF    07.1
....................                   output_b(number[onlar]); 
0190:  MOVLW  2A
0191:  ADDWF  25,W
0192:  MOVWF  04
0193:  BCF    03.7
0194:  MOVF   00,W
0195:  MOVWF  41
0196:  BSF    03.5
0197:  CLRF   06
0198:  BCF    03.5
0199:  MOVF   41,W
019A:  MOVWF  06
....................                   delay_ms(5); 
019B:  MOVLW  05
019C:  MOVWF  41
019D:  CALL   004
....................                    output_low(display2); 
019E:  BCF    3C.1
019F:  MOVF   3C,W
01A0:  BSF    03.5
01A1:  MOVWF  07
01A2:  BCF    03.5
01A3:  BCF    07.1
....................   
....................                   button_stop();          
01A4:  CALL   019
....................                  if(stop == 1){ 
01A5:  DECFSZ 29,W
01A6:  GOTO   1A8
....................                  break;} 
01A7:  GOTO   1AA
01A8:  INCF   3F,F
01A9:  GOTO   16C
....................                    
....................                } 
....................                   if(stop == 1) 
01AA:  DECFSZ 29,W
01AB:  GOTO   1AD
....................             break; 
01AC:  GOTO   1AF
01AD:  INCF   3E,F
01AE:  GOTO   146
....................             } 
....................              if(stop == 1){ 
01AF:  DECFSZ 29,W
01B0:  GOTO   1B2
....................              break;} 
01B1:  GOTO   217
....................               
....................              if(loop == 2) 
01B2:  MOVF   22,W
01B3:  SUBLW  02
01B4:  BTFSS  03.2
01B5:  GOTO   213
....................              { 
....................               
....................              for(int t=0; t<15 ; t++) 
01B6:  CLRF   40
01B7:  MOVF   40,W
01B8:  SUBLW  0E
01B9:  BTFSS  03.0
01BA:  GOTO   211
....................                { 
....................          output_high(display1); 
01BB:  BCF    3C.0
01BC:  MOVF   3C,W
01BD:  BSF    03.5
01BE:  MOVWF  07
01BF:  BCF    03.5
01C0:  BSF    07.0
....................          output_b(cls[3]); 
01C1:  BSF    03.5
01C2:  CLRF   06
01C3:  BCF    03.5
01C4:  MOVF   37,W
01C5:  MOVWF  06
....................          delay_ms(5); 
01C6:  MOVLW  05
01C7:  MOVWF  41
01C8:  CALL   004
....................          output_low(display1); 
01C9:  BCF    3C.0
01CA:  MOVF   3C,W
01CB:  BSF    03.5
01CC:  MOVWF  07
01CD:  BCF    03.5
01CE:  BCF    07.0
....................           
....................          output_high(display2); 
01CF:  BCF    3C.1
01D0:  MOVF   3C,W
01D1:  BSF    03.5
01D2:  MOVWF  07
01D3:  BCF    03.5
01D4:  BSF    07.1
....................          output_b(cls[2]); 
01D5:  BSF    03.5
01D6:  CLRF   06
01D7:  BCF    03.5
01D8:  MOVF   36,W
01D9:  MOVWF  06
....................          delay_ms(5); 
01DA:  MOVLW  05
01DB:  MOVWF  41
01DC:  CALL   004
....................          output_low(display2); 
01DD:  BCF    3C.1
01DE:  MOVF   3C,W
01DF:  BSF    03.5
01E0:  MOVWF  07
01E1:  BCF    03.5
01E2:  BCF    07.1
....................           
....................          output_high(display3); 
01E3:  BCF    3C.2
01E4:  MOVF   3C,W
01E5:  BSF    03.5
01E6:  MOVWF  07
01E7:  BCF    03.5
01E8:  BSF    07.2
....................          output_b(cls[1]); 
01E9:  BSF    03.5
01EA:  CLRF   06
01EB:  BCF    03.5
01EC:  MOVF   35,W
01ED:  MOVWF  06
....................          delay_ms(5); 
01EE:  MOVLW  05
01EF:  MOVWF  41
01F0:  CALL   004
....................          output_low(display3); 
01F1:  BCF    3C.2
01F2:  MOVF   3C,W
01F3:  BSF    03.5
01F4:  MOVWF  07
01F5:  BCF    03.5
01F6:  BCF    07.2
....................           
....................          output_high(display4); 
01F7:  BCF    3C.3
01F8:  MOVF   3C,W
01F9:  BSF    03.5
01FA:  MOVWF  07
01FB:  BCF    03.5
01FC:  BSF    07.3
....................          output_b(cls[0]); 
01FD:  BSF    03.5
01FE:  CLRF   06
01FF:  BCF    03.5
0200:  MOVF   34,W
0201:  MOVWF  06
....................          delay_ms(5); 
0202:  MOVLW  05
0203:  MOVWF  41
0204:  CALL   004
....................          output_low(display4); 
0205:  BCF    3C.3
0206:  MOVF   3C,W
0207:  BSF    03.5
0208:  MOVWF  07
0209:  BCF    03.5
020A:  BCF    07.3
....................          button_stop();          
020B:  CALL   019
....................          if(stop == 1) 
020C:  DECFSZ 29,W
020D:  GOTO   20F
....................          break; 
020E:  GOTO   211
020F:  INCF   40,F
0210:  GOTO   1B7
....................      } 
....................              up=0; 
0211:  CLRF   28
....................              break; 
0212:  GOTO   217
....................              } 
....................                 
....................              if(stop == 1) 
0213:  DECFSZ 29,W
0214:  GOTO   216
....................              { 
....................              break; 
0215:  GOTO   217
....................              } 
0216:  GOTO   0E5
....................         } 
0217:  GOTO   0CB
....................  
....................    } 
....................    } 
....................  
0218:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
