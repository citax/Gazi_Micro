CCS PCM C Compiler, Version 5.015, 5967               02-Nis-23 03:34

               Filename:   E:\Okul\Mikro\mikro lab\odev 5\0'dan 99'a kadar clse + kesme\Kod\main.lst

               ROM used:   759 words (9%)
                           Largest free fragment is 2048
               RAM used:   45 (12%) at main() level
                           54 (15%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   108
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   044
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
00E3:  CLRF   78
00E4:  CLRF   79
00E5:  CLRF   77
00E6:  CLRF   7A
00E7:  MOVF   4E,W
00E8:  BTFSS  03.2
00E9:  GOTO   0ED
00EA:  MOVF   4D,W
00EB:  BTFSC  03.2
00EC:  GOTO   107
00ED:  MOVLW  10
00EE:  MOVWF  4F
00EF:  BCF    03.0
00F0:  RLF    4B,F
00F1:  RLF    4C,F
00F2:  RLF    77,F
00F3:  RLF    7A,F
00F4:  MOVF   4E,W
00F5:  SUBWF  7A,W
00F6:  BTFSS  03.2
00F7:  GOTO   0FA
00F8:  MOVF   4D,W
00F9:  SUBWF  77,W
00FA:  BTFSS  03.0
00FB:  GOTO   103
00FC:  MOVF   4D,W
00FD:  SUBWF  77,F
00FE:  BTFSS  03.0
00FF:  DECF   7A,F
0100:  MOVF   4E,W
0101:  SUBWF  7A,F
0102:  BSF    03.0
0103:  RLF    78,F
0104:  RLF    79,F
0105:  DECFSZ 4F,F
0106:  GOTO   0EF
0107:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses HS, NOWDT, NOPROTECT  
.................... #use delay(clock=4000000) 
*
002F:  MOVLW  50
0030:  MOVWF  04
0031:  BCF    03.7
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   043
0035:  MOVLW  01
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  4A
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  GOTO   041
0041:  DECFSZ 00,F
0042:  GOTO   035
0043:  RETURN
....................  
.................... #define pin_up   pin_E0 
.................... #define pin_stop pin_E1 
.................... #define display1 pin_C0 
.................... #define display2 pin_C1 
.................... #define display3 pin_C2 
.................... #define display4 pin_C3 
....................  
.................... int k; 
.................... int loop = 0; 
.................... int birler,onlar= 0; 
.................... unsigned long int digit = 0; 
.................... int up, stop= 0; 
.................... int number[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 0x7F, 0x6F}; 
*
011A:  MOVLW  3F
011B:  BCF    03.5
011C:  MOVWF  30
011D:  MOVLW  06
011E:  MOVWF  31
011F:  MOVLW  5B
0120:  MOVWF  32
0121:  MOVLW  4F
0122:  MOVWF  33
0123:  MOVLW  66
0124:  MOVWF  34
0125:  MOVLW  6D
0126:  MOVWF  35
0127:  MOVLW  7C
0128:  MOVWF  36
0129:  MOVLW  07
012A:  MOVWF  37
012B:  MOVLW  7F
012C:  MOVWF  38
012D:  MOVLW  6F
012E:  MOVWF  39
.................... int cls[4] = {0x58, 0x38, 0x6D, 0x79}; 
012F:  MOVLW  58
0130:  MOVWF  3A
0131:  MOVLW  38
0132:  MOVWF  3B
0133:  MOVLW  6D
0134:  MOVWF  3C
0135:  MOVLW  79
0136:  MOVWF  3D
.................... int opn[4] = {0x5C, 0x73, 0x79, 0x54}; 
0137:  MOVLW  5C
0138:  MOVWF  3E
0139:  MOVLW  73
013A:  MOVWF  3F
013B:  MOVLW  79
013C:  MOVWF  40
013D:  MOVLW  54
013E:  MOVWF  41
.................... int itr[4] = {0xB0, 0xD4, 0xF8, 0xBF}; 
013F:  MOVLW  B0
0140:  MOVWF  42
0141:  MOVLW  D4
0142:  MOVWF  43
0143:  MOVLW  F8
0144:  MOVWF  44
0145:  MOVLW  BF
0146:  MOVWF  45
....................  
....................  
.................... void button_stop() 
.................... { 
....................    if(input(pin_stop) && !input(pin_up)) 
*
009F:  BSF    03.5
00A0:  BSF    09.1
00A1:  BCF    03.5
00A2:  BTFSS  09.1
00A3:  GOTO   0BD
00A4:  BSF    03.5
00A5:  BSF    09.0
00A6:  BCF    03.5
00A7:  BTFSC  09.0
00A8:  GOTO   0BD
....................    { 
....................      stop = 1; 
00A9:  MOVLW  01
00AA:  MOVWF  2F
....................      up = 0; 
00AB:  CLRF   2E
....................      output_c(0x00); 
00AC:  MOVLW  00
00AD:  MOVWF  46
00AE:  BSF    03.5
00AF:  CLRF   07
00B0:  BCF    03.5
00B1:  CLRF   07
....................      output_d(0x00); 
00B2:  BSF    03.5
00B3:  CLRF   08
00B4:  BCF    03.5
00B5:  CLRF   08
....................      digit=0; 
00B6:  CLRF   2D
00B7:  CLRF   2C
....................      while(input(pin_stop)); 
00B8:  BSF    03.5
00B9:  BSF    09.1
00BA:  BCF    03.5
00BB:  BTFSC  09.1
00BC:  GOTO   0B8
....................    } 
00BD:  RETURN
.................... } 
....................  
....................  
.................... void button_up() 
.................... { 
....................     if(!input(pin_stop) && input(pin_up)) 
00BE:  BSF    03.5
00BF:  BSF    09.1
00C0:  BCF    03.5
00C1:  BTFSC  09.1
00C2:  GOTO   0E0
00C3:  BSF    03.5
00C4:  BSF    09.0
00C5:  BCF    03.5
00C6:  BTFSS  09.0
00C7:  GOTO   0E0
....................    { 
....................       output_c(0x00); 
00C8:  MOVLW  00
00C9:  MOVWF  46
00CA:  BSF    03.5
00CB:  CLRF   07
00CC:  BCF    03.5
00CD:  CLRF   07
....................       up = 1; 
00CE:  MOVLW  01
00CF:  MOVWF  2E
....................       loop = 0; 
00D0:  CLRF   29
....................       stop= 0; 
00D1:  CLRF   2F
....................       if (digit==99) 
00D2:  MOVF   2C,W
00D3:  SUBLW  63
00D4:  BTFSS  03.2
00D5:  GOTO   0DB
00D6:  MOVF   2D,F
00D7:  BTFSS  03.2
00D8:  GOTO   0DB
....................       digit=0; 
00D9:  CLRF   2D
00DA:  CLRF   2C
....................       while(input(pin_up)); 
00DB:  BSF    03.5
00DC:  BSF    09.0
00DD:  BCF    03.5
00DE:  BTFSC  09.0
00DF:  GOTO   0DB
....................    } 
00E0:  BCF    0A.3
00E1:  BCF    0A.4
00E2:  GOTO   186 (RETURN)
.................... } 
....................  
.................... #int_ext 
.................... void ext_kesmesi() 
.................... { 
....................    for( k=0; k<40; k++) 
*
0044:  CLRF   28
0045:  MOVF   28,W
0046:  SUBLW  27
0047:  BTFSS  03.0
0048:  GOTO   09B
....................    { 
....................          output_high(display1); 
0049:  BCF    46.0
004A:  MOVF   46,W
004B:  BSF    03.5
004C:  MOVWF  07
004D:  BCF    03.5
004E:  BSF    07.0
....................          output_d(itr[3]); 
004F:  BSF    03.5
0050:  CLRF   08
0051:  BCF    03.5
0052:  MOVF   45,W
0053:  MOVWF  08
....................          delay_ms(5); 
0054:  MOVLW  05
0055:  MOVWF  50
0056:  CALL   02F
....................          output_low(display1); 
0057:  BCF    46.0
0058:  MOVF   46,W
0059:  BSF    03.5
005A:  MOVWF  07
005B:  BCF    03.5
005C:  BCF    07.0
....................           
....................          output_high(display2); 
005D:  BCF    46.1
005E:  MOVF   46,W
005F:  BSF    03.5
0060:  MOVWF  07
0061:  BCF    03.5
0062:  BSF    07.1
....................          output_d(itr[2]); 
0063:  BSF    03.5
0064:  CLRF   08
0065:  BCF    03.5
0066:  MOVF   44,W
0067:  MOVWF  08
....................          delay_ms(5); 
0068:  MOVLW  05
0069:  MOVWF  50
006A:  CALL   02F
....................          output_low(display2); 
006B:  BCF    46.1
006C:  MOVF   46,W
006D:  BSF    03.5
006E:  MOVWF  07
006F:  BCF    03.5
0070:  BCF    07.1
....................           
....................          output_high(display3); 
0071:  BCF    46.2
0072:  MOVF   46,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  BSF    07.2
....................          output_d(itr[1]); 
0077:  BSF    03.5
0078:  CLRF   08
0079:  BCF    03.5
007A:  MOVF   43,W
007B:  MOVWF  08
....................          delay_ms(5); 
007C:  MOVLW  05
007D:  MOVWF  50
007E:  CALL   02F
....................          output_low(display3); 
007F:  BCF    46.2
0080:  MOVF   46,W
0081:  BSF    03.5
0082:  MOVWF  07
0083:  BCF    03.5
0084:  BCF    07.2
....................           
....................          output_high(display4); 
0085:  BCF    46.3
0086:  MOVF   46,W
0087:  BSF    03.5
0088:  MOVWF  07
0089:  BCF    03.5
008A:  BSF    07.3
....................          output_d(itr[0]); 
008B:  BSF    03.5
008C:  CLRF   08
008D:  BCF    03.5
008E:  MOVF   42,W
008F:  MOVWF  08
....................          delay_ms(5); 
0090:  MOVLW  05
0091:  MOVWF  50
0092:  CALL   02F
....................          output_low(display4); 
0093:  BCF    46.3
0094:  MOVF   46,W
0095:  BSF    03.5
0096:  MOVWF  07
0097:  BCF    03.5
0098:  BCF    07.3
0099:  INCF   28,F
009A:  GOTO   045
....................    } 
009B:  BCF    0B.1
009C:  BCF    0A.3
009D:  BCF    0A.4
009E:  GOTO   01B
.................... } 
....................  
.................... void main() 
*
0108:  MOVF   03,W
0109:  ANDLW  1F
010A:  MOVWF  03
010B:  CLRF   29
010C:  CLRF   2B
010D:  CLRF   2D
010E:  CLRF   2C
010F:  CLRF   2F
0110:  MOVLW  FF
0111:  MOVWF  46
0112:  BSF    03.5
0113:  BSF    1F.0
0114:  BSF    1F.1
0115:  BSF    1F.2
0116:  BCF    1F.3
0117:  MOVLW  07
0118:  MOVWF  1C
0119:  BCF    03.7
.................... { 
....................    set_tris_b(0xFF); 
*
0147:  MOVLW  FF
0148:  BSF    03.5
0149:  MOVWF  06
....................    set_tris_e(0xFF); 
014A:  BSF    09.0
014B:  BSF    09.1
014C:  BSF    09.2
....................    set_tris_d(0x00); 
014D:  MOVLW  00
014E:  MOVWF  08
....................    set_tris_c(0x00); 
014F:  MOVWF  07
0150:  BCF    03.5
0151:  MOVWF  46
....................    output_d(0x00); 
0152:  BSF    03.5
0153:  CLRF   08
0154:  BCF    03.5
0155:  CLRF   08
....................    output_c(0x00); 
0156:  MOVWF  46
0157:  BSF    03.5
0158:  CLRF   07
0159:  BCF    03.5
015A:  CLRF   07
....................     
....................    enable_interrupts(INT_EXT); //kesme aktif ediliyor 
015B:  BSF    0B.4
....................    enable_interrupts(GLOBAL);  //kesmeler global yapiliyor 
015C:  MOVLW  C0
015D:  IORWF  0B,F
....................    ext_int_edge(H_TO_L); //dusen kenarda tetiklenecek 
015E:  BSF    03.5
015F:  BCF    01.6
....................     
....................    while(TRUE) 
....................    {   
....................       output_c(0xFF); 
0160:  MOVLW  00
0161:  BCF    03.5
0162:  MOVWF  46
0163:  BSF    03.5
0164:  CLRF   07
0165:  MOVLW  FF
0166:  BCF    03.5
0167:  MOVWF  07
....................       output_d(0x00); 
0168:  BSF    03.5
0169:  CLRF   08
016A:  BCF    03.5
016B:  CLRF   08
016C:  CLRF   27
016D:  BTFSC  0B.7
016E:  BSF    27.7
016F:  BCF    0B.7
....................       delay_ms(20); 
0170:  MOVLW  14
0171:  MOVWF  50
0172:  CALL   02F
0173:  BTFSC  27.7
0174:  BSF    0B.7
....................       loop=0;  
0175:  CLRF   29
....................       output_d(0x80); 
0176:  BSF    03.5
0177:  CLRF   08
0178:  MOVLW  80
0179:  BCF    03.5
017A:  MOVWF  08
017B:  CLRF   27
017C:  BTFSC  0B.7
017D:  BSF    27.7
017E:  BCF    0B.7
....................       delay_ms(20); 
017F:  MOVLW  14
0180:  MOVWF  50
0181:  CALL   02F
0182:  BTFSC  27.7
0183:  BSF    0B.7
....................         
....................       button_stop(); 
0184:  CALL   09F
....................       button_up(); 
0185:  GOTO   0BE
....................        
....................        while(up == 1) 
0186:  DECFSZ 2E,W
0187:  GOTO   2F4
....................       {      
....................               
....................    
....................      for(int t=0; t<25 ; t++) 
0188:  CLRF   47
0189:  MOVF   47,W
018A:  SUBLW  18
018B:  BTFSS  03.0
018C:  GOTO   1FB
....................      { 
....................          output_high(display1); 
018D:  BCF    46.0
018E:  MOVF   46,W
018F:  BSF    03.5
0190:  MOVWF  07
0191:  BCF    03.5
0192:  BSF    07.0
....................          output_d(opn[3]); 
0193:  BSF    03.5
0194:  CLRF   08
0195:  BCF    03.5
0196:  MOVF   41,W
0197:  MOVWF  08
0198:  CLRF   27
0199:  BTFSC  0B.7
019A:  BSF    27.7
019B:  BCF    0B.7
....................          delay_ms(5); 
019C:  MOVLW  05
019D:  MOVWF  50
019E:  CALL   02F
019F:  BTFSC  27.7
01A0:  BSF    0B.7
....................          output_low(display1); 
01A1:  BCF    46.0
01A2:  MOVF   46,W
01A3:  BSF    03.5
01A4:  MOVWF  07
01A5:  BCF    03.5
01A6:  BCF    07.0
....................           
....................          output_high(display2); 
01A7:  BCF    46.1
01A8:  MOVF   46,W
01A9:  BSF    03.5
01AA:  MOVWF  07
01AB:  BCF    03.5
01AC:  BSF    07.1
....................          output_d(opn[2]); 
01AD:  BSF    03.5
01AE:  CLRF   08
01AF:  BCF    03.5
01B0:  MOVF   40,W
01B1:  MOVWF  08
01B2:  CLRF   27
01B3:  BTFSC  0B.7
01B4:  BSF    27.7
01B5:  BCF    0B.7
....................          delay_ms(5); 
01B6:  MOVLW  05
01B7:  MOVWF  50
01B8:  CALL   02F
01B9:  BTFSC  27.7
01BA:  BSF    0B.7
....................          output_low(display2); 
01BB:  BCF    46.1
01BC:  MOVF   46,W
01BD:  BSF    03.5
01BE:  MOVWF  07
01BF:  BCF    03.5
01C0:  BCF    07.1
....................           
....................          output_high(display3); 
01C1:  BCF    46.2
01C2:  MOVF   46,W
01C3:  BSF    03.5
01C4:  MOVWF  07
01C5:  BCF    03.5
01C6:  BSF    07.2
....................          output_d(opn[1]); 
01C7:  BSF    03.5
01C8:  CLRF   08
01C9:  BCF    03.5
01CA:  MOVF   3F,W
01CB:  MOVWF  08
01CC:  CLRF   27
01CD:  BTFSC  0B.7
01CE:  BSF    27.7
01CF:  BCF    0B.7
....................          delay_ms(5); 
01D0:  MOVLW  05
01D1:  MOVWF  50
01D2:  CALL   02F
01D3:  BTFSC  27.7
01D4:  BSF    0B.7
....................          output_low(display3); 
01D5:  BCF    46.2
01D6:  MOVF   46,W
01D7:  BSF    03.5
01D8:  MOVWF  07
01D9:  BCF    03.5
01DA:  BCF    07.2
....................           
....................          output_high(display4); 
01DB:  BCF    46.3
01DC:  MOVF   46,W
01DD:  BSF    03.5
01DE:  MOVWF  07
01DF:  BCF    03.5
01E0:  BSF    07.3
....................          output_d(opn[0]); 
01E1:  BSF    03.5
01E2:  CLRF   08
01E3:  BCF    03.5
01E4:  MOVF   3E,W
01E5:  MOVWF  08
01E6:  CLRF   27
01E7:  BTFSC  0B.7
01E8:  BSF    27.7
01E9:  BCF    0B.7
....................          delay_ms(5); 
01EA:  MOVLW  05
01EB:  MOVWF  50
01EC:  CALL   02F
01ED:  BTFSC  27.7
01EE:  BSF    0B.7
....................          output_low(display4); 
01EF:  BCF    46.3
01F0:  MOVF   46,W
01F1:  BSF    03.5
01F2:  MOVWF  07
01F3:  BCF    03.5
01F4:  BCF    07.3
....................           
....................          button_stop();          
01F5:  CALL   09F
....................          if(stop == 1) 
01F6:  DECFSZ 2F,W
01F7:  GOTO   1F9
....................           break; 
01F8:  GOTO   1FB
01F9:  INCF   47,F
01FA:  GOTO   189
....................       } 
....................  
....................          
....................             if(stop == 1) 
01FB:  DECFSZ 2F,W
01FC:  GOTO   1FE
....................             break; 
01FD:  GOTO   2F4
....................              
....................             for(int y=0; y<200;y++) 
01FE:  CLRF   48
01FF:  MOVF   48,W
0200:  SUBLW  C7
0201:  BTFSS  03.0
0202:  GOTO   274
....................             { 
....................              
....................             birler = digit % 10 ; //birler 
0203:  MOVF   2D,W
0204:  MOVWF  4C
0205:  MOVF   2C,W
0206:  MOVWF  4B
0207:  CLRF   4E
0208:  MOVLW  0A
0209:  MOVWF  4D
020A:  CALL   0E3
020B:  MOVF   77,W
020C:  MOVWF  2A
....................             onlar = digit / 10 ; //onlar 
020D:  MOVF   2D,W
020E:  MOVWF  4C
020F:  MOVF   2C,W
0210:  MOVWF  4B
0211:  CLRF   4E
0212:  MOVLW  0A
0213:  MOVWF  4D
0214:  CALL   0E3
0215:  MOVF   78,W
0216:  MOVWF  2B
....................              
....................             digit++; 
0217:  INCF   2C,F
0218:  BTFSC  03.2
0219:  INCF   2D,F
....................              
....................             if(digit == 100) 
021A:  MOVF   2C,W
021B:  SUBLW  64
021C:  BTFSS  03.2
021D:  GOTO   224
021E:  MOVF   2D,F
021F:  BTFSS  03.2
0220:  GOTO   224
....................             { 
....................             digit=0; 
0221:  CLRF   2D
0222:  CLRF   2C
....................             loop++; 
0223:  INCF   29,F
....................             } 
....................              
....................             for(int k=0; k<10 ; k++) 
0224:  CLRF   49
0225:  MOVF   49,W
0226:  SUBLW  09
0227:  BTFSS  03.0
0228:  GOTO   26F
....................                {   
....................                    
....................                   output_high(display1); 
0229:  BCF    46.0
022A:  MOVF   46,W
022B:  BSF    03.5
022C:  MOVWF  07
022D:  BCF    03.5
022E:  BSF    07.0
....................                   output_d(number[birler]); 
022F:  MOVLW  30
0230:  ADDWF  2A,W
0231:  MOVWF  04
0232:  BCF    03.7
0233:  MOVF   00,W
0234:  MOVWF  4B
0235:  BSF    03.5
0236:  CLRF   08
0237:  BCF    03.5
0238:  MOVF   4B,W
0239:  MOVWF  08
023A:  CLRF   27
023B:  BTFSC  0B.7
023C:  BSF    27.7
023D:  BCF    0B.7
....................                   delay_ms(5); 
023E:  MOVLW  05
023F:  MOVWF  50
0240:  CALL   02F
0241:  BTFSC  27.7
0242:  BSF    0B.7
....................                   output_low(display1); 
0243:  BCF    46.0
0244:  MOVF   46,W
0245:  BSF    03.5
0246:  MOVWF  07
0247:  BCF    03.5
0248:  BCF    07.0
....................                    
....................                   output_high(display2); 
0249:  BCF    46.1
024A:  MOVF   46,W
024B:  BSF    03.5
024C:  MOVWF  07
024D:  BCF    03.5
024E:  BSF    07.1
....................                   output_d(number[onlar]); 
024F:  MOVLW  30
0250:  ADDWF  2B,W
0251:  MOVWF  04
0252:  BCF    03.7
0253:  MOVF   00,W
0254:  MOVWF  4B
0255:  BSF    03.5
0256:  CLRF   08
0257:  BCF    03.5
0258:  MOVF   4B,W
0259:  MOVWF  08
025A:  CLRF   27
025B:  BTFSC  0B.7
025C:  BSF    27.7
025D:  BCF    0B.7
....................                   delay_ms(5); 
025E:  MOVLW  05
025F:  MOVWF  50
0260:  CALL   02F
0261:  BTFSC  27.7
0262:  BSF    0B.7
....................                   output_low(display2); 
0263:  BCF    46.1
0264:  MOVF   46,W
0265:  BSF    03.5
0266:  MOVWF  07
0267:  BCF    03.5
0268:  BCF    07.1
....................   
....................                   button_stop();  
0269:  CALL   09F
....................                    
....................                   if(stop == 1) 
026A:  DECFSZ 2F,W
026B:  GOTO   26D
....................                   break; 
026C:  GOTO   26F
026D:  INCF   49,F
026E:  GOTO   225
....................                    
....................                } 
....................              if(stop == 1) 
026F:  DECFSZ 2F,W
0270:  GOTO   272
....................              break; 
0271:  GOTO   274
0272:  INCF   48,F
0273:  GOTO   1FF
....................              } 
....................              if(stop == 1) 
0274:  DECFSZ 2F,W
0275:  GOTO   277
....................              break; 
0276:  GOTO   2F4
....................               
....................              if(loop == 2) 
0277:  MOVF   29,W
0278:  SUBLW  02
0279:  BTFSS  03.2
027A:  GOTO   2F0
....................              { 
....................               
....................              for(int t=0; t<25 ; t++) 
027B:  CLRF   4A
027C:  MOVF   4A,W
027D:  SUBLW  18
027E:  BTFSS  03.0
027F:  GOTO   2EE
....................                { 
....................          output_high(display1); 
0280:  BCF    46.0
0281:  MOVF   46,W
0282:  BSF    03.5
0283:  MOVWF  07
0284:  BCF    03.5
0285:  BSF    07.0
....................          output_d(cls[3]); 
0286:  BSF    03.5
0287:  CLRF   08
0288:  BCF    03.5
0289:  MOVF   3D,W
028A:  MOVWF  08
028B:  CLRF   27
028C:  BTFSC  0B.7
028D:  BSF    27.7
028E:  BCF    0B.7
....................          delay_ms(5); 
028F:  MOVLW  05
0290:  MOVWF  50
0291:  CALL   02F
0292:  BTFSC  27.7
0293:  BSF    0B.7
....................          output_low(display1); 
0294:  BCF    46.0
0295:  MOVF   46,W
0296:  BSF    03.5
0297:  MOVWF  07
0298:  BCF    03.5
0299:  BCF    07.0
....................           
....................          output_high(display2); 
029A:  BCF    46.1
029B:  MOVF   46,W
029C:  BSF    03.5
029D:  MOVWF  07
029E:  BCF    03.5
029F:  BSF    07.1
....................          output_d(cls[2]); 
02A0:  BSF    03.5
02A1:  CLRF   08
02A2:  BCF    03.5
02A3:  MOVF   3C,W
02A4:  MOVWF  08
02A5:  CLRF   27
02A6:  BTFSC  0B.7
02A7:  BSF    27.7
02A8:  BCF    0B.7
....................          delay_ms(5); 
02A9:  MOVLW  05
02AA:  MOVWF  50
02AB:  CALL   02F
02AC:  BTFSC  27.7
02AD:  BSF    0B.7
....................          output_low(display2); 
02AE:  BCF    46.1
02AF:  MOVF   46,W
02B0:  BSF    03.5
02B1:  MOVWF  07
02B2:  BCF    03.5
02B3:  BCF    07.1
....................           
....................          output_high(display3); 
02B4:  BCF    46.2
02B5:  MOVF   46,W
02B6:  BSF    03.5
02B7:  MOVWF  07
02B8:  BCF    03.5
02B9:  BSF    07.2
....................          output_d(cls[1]); 
02BA:  BSF    03.5
02BB:  CLRF   08
02BC:  BCF    03.5
02BD:  MOVF   3B,W
02BE:  MOVWF  08
02BF:  CLRF   27
02C0:  BTFSC  0B.7
02C1:  BSF    27.7
02C2:  BCF    0B.7
....................          delay_ms(5); 
02C3:  MOVLW  05
02C4:  MOVWF  50
02C5:  CALL   02F
02C6:  BTFSC  27.7
02C7:  BSF    0B.7
....................          output_low(display3); 
02C8:  BCF    46.2
02C9:  MOVF   46,W
02CA:  BSF    03.5
02CB:  MOVWF  07
02CC:  BCF    03.5
02CD:  BCF    07.2
....................           
....................          output_high(display4); 
02CE:  BCF    46.3
02CF:  MOVF   46,W
02D0:  BSF    03.5
02D1:  MOVWF  07
02D2:  BCF    03.5
02D3:  BSF    07.3
....................          output_d(cls[0]); 
02D4:  BSF    03.5
02D5:  CLRF   08
02D6:  BCF    03.5
02D7:  MOVF   3A,W
02D8:  MOVWF  08
02D9:  CLRF   27
02DA:  BTFSC  0B.7
02DB:  BSF    27.7
02DC:  BCF    0B.7
....................          delay_ms(5); 
02DD:  MOVLW  05
02DE:  MOVWF  50
02DF:  CALL   02F
02E0:  BTFSC  27.7
02E1:  BSF    0B.7
....................          output_low(display4); 
02E2:  BCF    46.3
02E3:  MOVF   46,W
02E4:  BSF    03.5
02E5:  MOVWF  07
02E6:  BCF    03.5
02E7:  BCF    07.3
....................          button_stop();          
02E8:  CALL   09F
....................          if(stop == 1) 
02E9:  DECFSZ 2F,W
02EA:  GOTO   2EC
....................          break; 
02EB:  GOTO   2EE
02EC:  INCF   4A,F
02ED:  GOTO   27C
....................      } 
....................              up=0; 
02EE:  CLRF   2E
....................              break; 
02EF:  GOTO   2F4
....................              } 
....................                 
....................              if(stop == 1) 
02F0:  DECFSZ 2F,W
02F1:  GOTO   2F3
....................              { 
....................              break; 
02F2:  GOTO   2F4
....................              } 
02F3:  GOTO   186
....................         } 
02F4:  BSF    03.5
02F5:  GOTO   160
....................  
....................    } 
.................... } 
....................  
02F6:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
