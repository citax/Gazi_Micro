CCS PCM C Compiler, Version 5.015, 5967               03-May-23 02:28

               Filename:   E:\Okul\Mikro\mikro lab\odev 8\LCD Sayma Uygulamasi 2\Kod\main.lst

               ROM used:   759 words (9%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           28 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   275
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,10
0005:  DATA C2,3A
0006:  DATA F4,37
0007:  DATA EE,30
0008:  DATA 20,21
0009:  DATA E1,39
000A:  DATA 69,37
000B:  DATA 69,3D
000C:  DATA 21,00
000D:  DATA 0C,21
000E:  DATA 69,39
000F:  DATA 69,37
0010:  DATA E3,34
0011:  DATA A0,29
0012:  DATA E1,3C
0013:  DATA E9,1E
0014:  DATA A0,12
0015:  DATA 64,00
0016:  DATA 8A,24
0017:  DATA EB,34
0018:  DATA EE,31
0019:  DATA 69,10
001A:  DATA D3,30
001B:  DATA F9,34
001C:  DATA 3D,10
001D:  DATA 25,32
001E:  DATA 00,01
001F:  DATA 0C,21
0020:  DATA 69,39
0021:  DATA 69,37
0022:  DATA E3,34
0023:  DATA A0,29
0024:  DATA E1,3C
0025:  DATA E9,1E
0026:  DATA A0,12
0027:  DATA 64,00
0028:  DATA 8A,24
0029:  DATA EB,34
002A:  DATA EE,31
002B:  DATA 69,10
002C:  DATA D3,30
002D:  DATA F9,34
002E:  DATA 3D,10
002F:  DATA 25,32
0030:  DATA 00,01
0031:  DATA 0C,2A
0032:  DATA 4F,28
0033:  DATA CC,20
0034:  DATA CD,1E
0035:  DATA A0,12
0036:  DATA 64,00
*
011A:  MOVF   0B,W
011B:  MOVWF  27
011C:  BCF    0B.7
011D:  BSF    03.5
011E:  BSF    03.6
011F:  BSF    0C.7
0120:  BSF    0C.0
0121:  NOP
0122:  NOP
0123:  BCF    03.5
0124:  BCF    03.6
0125:  BTFSC  27.7
0126:  BSF    0B.7
0127:  BSF    03.6
0128:  MOVF   0C,W
0129:  ANDLW  7F
012A:  BTFSC  03.2
012B:  GOTO   16E
012C:  BCF    03.6
012D:  MOVWF  27
012E:  BSF    03.6
012F:  MOVF   0D,W
0130:  BCF    03.6
0131:  MOVWF  28
0132:  BSF    03.6
0133:  MOVF   0F,W
0134:  BCF    03.6
0135:  MOVWF  29
0136:  MOVF   27,W
0137:  MOVWF  2D
0138:  CALL   0EE
0139:  MOVF   28,W
013A:  BSF    03.6
013B:  MOVWF  0D
013C:  BCF    03.6
013D:  MOVF   29,W
013E:  BSF    03.6
013F:  MOVWF  0F
0140:  BCF    03.6
0141:  MOVF   0B,W
0142:  MOVWF  2A
0143:  BCF    0B.7
0144:  BSF    03.5
0145:  BSF    03.6
0146:  BSF    0C.7
0147:  BSF    0C.0
0148:  NOP
0149:  NOP
014A:  BCF    03.5
014B:  BCF    03.6
014C:  BTFSC  2A.7
014D:  BSF    0B.7
014E:  BSF    03.6
014F:  RLF    0C,W
0150:  RLF    0E,W
0151:  ANDLW  7F
0152:  BTFSC  03.2
0153:  GOTO   16E
0154:  BCF    03.6
0155:  MOVWF  27
0156:  BSF    03.6
0157:  MOVF   0D,W
0158:  BCF    03.6
0159:  MOVWF  28
015A:  BSF    03.6
015B:  MOVF   0F,W
015C:  BCF    03.6
015D:  MOVWF  29
015E:  MOVF   27,W
015F:  MOVWF  2D
0160:  CALL   0EE
0161:  MOVF   28,W
0162:  BSF    03.6
0163:  MOVWF  0D
0164:  BCF    03.6
0165:  MOVF   29,W
0166:  BSF    03.6
0167:  MOVWF  0F
0168:  INCF   0D,F
0169:  BTFSC  03.2
016A:  INCF   0F,F
016B:  BCF    03.6
016C:  GOTO   11A
016D:  BSF    03.6
016E:  BCF    03.6
016F:  BCF    0A.3
0170:  BCF    0A.4
0171:  GOTO   28C (RETURN)
*
01A4:  MOVF   0B,W
01A5:  MOVWF  28
01A6:  BCF    0B.7
01A7:  BSF    03.5
01A8:  BSF    03.6
01A9:  BSF    0C.7
01AA:  BSF    0C.0
01AB:  NOP
01AC:  NOP
01AD:  BCF    03.5
01AE:  BCF    03.6
01AF:  BTFSC  28.7
01B0:  BSF    0B.7
01B1:  BTFSC  03.0
01B2:  GOTO   1DB
01B3:  BSF    03.6
01B4:  MOVF   0C,W
01B5:  ANDLW  7F
01B6:  BCF    03.6
01B7:  MOVWF  28
01B8:  BSF    03.6
01B9:  MOVF   0D,W
01BA:  BCF    03.6
01BB:  MOVWF  29
01BC:  BSF    03.6
01BD:  MOVF   0F,W
01BE:  BCF    03.6
01BF:  MOVWF  2A
01C0:  MOVF   28,W
01C1:  MOVWF  2D
01C2:  CALL   0EE
01C3:  MOVF   29,W
01C4:  BSF    03.6
01C5:  MOVWF  0D
01C6:  BCF    03.6
01C7:  MOVF   2A,W
01C8:  BSF    03.6
01C9:  MOVWF  0F
01CA:  BCF    03.6
01CB:  MOVF   0B,W
01CC:  MOVWF  2B
01CD:  BCF    0B.7
01CE:  BSF    03.5
01CF:  BSF    03.6
01D0:  BSF    0C.7
01D1:  BSF    0C.0
01D2:  NOP
01D3:  NOP
01D4:  BCF    03.5
01D5:  BCF    03.6
01D6:  BTFSC  2B.7
01D7:  BSF    0B.7
01D8:  DECFSZ 27,F
01D9:  GOTO   1DB
01DA:  GOTO   1FA
01DB:  BSF    03.6
01DC:  RLF    0C,W
01DD:  RLF    0E,W
01DE:  ANDLW  7F
01DF:  BCF    03.6
01E0:  MOVWF  28
01E1:  BSF    03.6
01E2:  MOVF   0D,W
01E3:  BCF    03.6
01E4:  MOVWF  29
01E5:  BSF    03.6
01E6:  MOVF   0F,W
01E7:  BCF    03.6
01E8:  MOVWF  2A
01E9:  MOVF   28,W
01EA:  MOVWF  2D
01EB:  CALL   0EE
01EC:  MOVF   29,W
01ED:  BSF    03.6
01EE:  MOVWF  0D
01EF:  BCF    03.6
01F0:  MOVF   2A,W
01F1:  BSF    03.6
01F2:  MOVWF  0F
01F3:  INCF   0D,F
01F4:  BTFSC  03.2
01F5:  INCF   0F,F
01F6:  BCF    03.0
01F7:  BCF    03.6
01F8:  DECFSZ 27,F
01F9:  GOTO   1A4
01FA:  RETURN
01FB:  MOVF   2E,W
01FC:  CLRF   78
01FD:  SUBWF  2D,W
01FE:  BTFSC  03.0
01FF:  GOTO   203
0200:  MOVF   2D,W
0201:  MOVWF  77
0202:  GOTO   20F
0203:  CLRF   77
0204:  MOVLW  08
0205:  MOVWF  2F
0206:  RLF    2D,F
0207:  RLF    77,F
0208:  MOVF   2E,W
0209:  SUBWF  77,W
020A:  BTFSC  03.0
020B:  MOVWF  77
020C:  RLF    78,F
020D:  DECFSZ 2F,F
020E:  GOTO   206
020F:  RETURN
0210:  MOVLW  20
0211:  BTFSS  28.4
0212:  MOVLW  30
0213:  MOVWF  29
0214:  MOVF   27,W
0215:  MOVWF  77
0216:  BTFSS  27.7
0217:  GOTO   220
0218:  COMF   77,F
0219:  INCF   77,F
021A:  MOVF   77,W
021B:  MOVWF  27
021C:  MOVLW  2D
021D:  MOVWF  29
021E:  BSF    28.7
021F:  BSF    28.0
0220:  MOVF   27,W
0221:  MOVWF  2D
0222:  MOVLW  64
0223:  MOVWF  2E
0224:  CALL   1FB
0225:  MOVF   77,W
0226:  MOVWF  27
0227:  MOVLW  30
0228:  ADDWF  78,W
0229:  MOVWF  2A
022A:  MOVF   27,W
022B:  MOVWF  2D
022C:  MOVLW  0A
022D:  MOVWF  2E
022E:  CALL   1FB
022F:  MOVLW  30
0230:  ADDWF  77,W
0231:  MOVWF  2C
0232:  MOVLW  30
0233:  ADDWF  78,W
0234:  MOVWF  2B
0235:  MOVF   29,W
0236:  MOVWF  77
0237:  MOVLW  30
0238:  SUBWF  2A,W
0239:  BTFSC  03.2
023A:  GOTO   23F
023B:  BSF    28.1
023C:  BTFSC  28.7
023D:  BSF    28.2
023E:  GOTO   253
023F:  MOVF   29,W
0240:  MOVWF  2A
0241:  MOVLW  20
0242:  MOVWF  29
0243:  MOVLW  30
0244:  SUBWF  2B,W
0245:  BTFSC  03.2
0246:  GOTO   24B
0247:  BSF    28.0
0248:  BTFSC  28.7
0249:  BSF    28.1
024A:  GOTO   253
024B:  BTFSS  03.2
024C:  BSF    28.0
024D:  BTFSS  03.2
024E:  GOTO   253
024F:  MOVF   2A,W
0250:  MOVWF  2B
0251:  MOVLW  20
0252:  MOVWF  2A
0253:  BTFSC  28.2
0254:  GOTO   25A
0255:  BTFSC  28.1
0256:  GOTO   25D
0257:  BTFSC  28.0
0258:  GOTO   260
0259:  GOTO   263
025A:  MOVF   29,W
025B:  MOVWF  2D
025C:  CALL   0EE
025D:  MOVF   2A,W
025E:  MOVWF  2D
025F:  CALL   0EE
0260:  MOVF   2B,W
0261:  MOVWF  2D
0262:  CALL   0EE
0263:  MOVF   2C,W
0264:  MOVWF  2D
0265:  CALL   0EE
0266:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #use delay(clock = 4000000) 
*
0037:  MOVLW  2E
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04B
003D:  MOVLW  01
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  4A
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  GOTO   049
0049:  DECFSZ 00,F
004A:  GOTO   03D
004B:  RETURN
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0064:  MOVLW  0F
0065:  BSF    03.5
0066:  ANDWF  06,W
0067:  IORLW  F0
0068:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0069:  BCF    03.5
006A:  BSF    06.2
....................    delay_cycles(1); 
006B:  NOP
....................    lcd_output_enable(1); 
006C:  BSF    06.0
....................    delay_cycles(1); 
006D:  NOP
....................    high = lcd_read_nibble(); 
006E:  CALL   058
006F:  MOVF   78,W
0070:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
0071:  BCF    06.0
....................    delay_cycles(1); 
0072:  NOP
....................    lcd_output_enable(1); 
0073:  BSF    06.0
....................    delay_us(1); 
0074:  NOP
....................    low = lcd_read_nibble(); 
0075:  CALL   058
0076:  MOVF   78,W
0077:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
0078:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0079:  MOVLW  0F
007A:  BSF    03.5
007B:  ANDWF  06,W
007C:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
007D:  BCF    03.5
007E:  SWAPF  35,W
007F:  MOVWF  77
0080:  MOVLW  F0
0081:  ANDWF  77,F
0082:  MOVF   77,W
0083:  IORWF  34,W
0084:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0058:  MOVF   06,W
0059:  MOVWF  77
005A:  SWAPF  06,W
005B:  ANDLW  0F
005C:  MOVWF  78
....................   #endif 
005D:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
004C:  SWAPF  35,W
004D:  ANDLW  F0
004E:  MOVWF  77
004F:  MOVLW  0F
0050:  ANDWF  06,W
0051:  IORWF  77,W
0052:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0053:  NOP
....................    lcd_output_enable(1); 
0054:  BSF    06.0
....................    delay_us(2); 
0055:  GOTO   056
....................    lcd_output_enable(0); 
0056:  BCF    06.0
0057:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
005E:  BSF    03.5
005F:  BCF    06.0
....................    lcd_rs_tris(); 
0060:  BCF    06.1
....................    lcd_rw_tris(); 
0061:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0062:  BCF    03.5
0063:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0085:  MOVF   78,W
0086:  MOVWF  34
0087:  BTFSC  34.7
0088:  GOTO   064
....................    lcd_output_rs(address); 
0089:  BTFSS  32.0
008A:  BCF    06.1
008B:  BTFSC  32.0
008C:  BSF    06.1
....................    delay_cycles(1); 
008D:  NOP
....................    lcd_output_rw(0); 
008E:  BCF    06.2
....................    delay_cycles(1); 
008F:  NOP
....................    lcd_output_enable(0); 
0090:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0091:  SWAPF  33,W
0092:  MOVWF  34
0093:  MOVLW  0F
0094:  ANDWF  34,F
0095:  MOVF   34,W
0096:  MOVWF  35
0097:  CALL   04C
....................    lcd_send_nibble(n & 0xf); 
0098:  MOVF   33,W
0099:  ANDLW  0F
009A:  MOVWF  34
009B:  MOVWF  35
009C:  CALL   04C
009D:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
009E:  MOVLW  28
009F:  MOVWF  28
00A0:  MOVLW  0C
00A1:  MOVWF  29
00A2:  MOVLW  01
00A3:  MOVWF  2A
00A4:  MOVLW  06
00A5:  MOVWF  2B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00A6:  BCF    06.0
....................    lcd_output_rs(0); 
00A7:  BCF    06.1
....................    lcd_output_rw(0); 
00A8:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A9:  MOVLW  0F
00AA:  BSF    03.5
00AB:  ANDWF  06,W
00AC:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00AD:  BCF    06.0
....................    lcd_rs_tris(); 
00AE:  BCF    06.1
....................    lcd_rw_tris(); 
00AF:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00B0:  MOVLW  0F
00B1:  BCF    03.5
00B2:  MOVWF  2E
00B3:  CALL   037
....................    for(i=1;i<=3;++i) 
00B4:  MOVLW  01
00B5:  MOVWF  27
00B6:  MOVF   27,W
00B7:  SUBLW  03
00B8:  BTFSS  03.0
00B9:  GOTO   0C2
....................    { 
....................        lcd_send_nibble(3); 
00BA:  MOVLW  03
00BB:  MOVWF  35
00BC:  CALL   04C
....................        delay_ms(5); 
00BD:  MOVLW  05
00BE:  MOVWF  2E
00BF:  CALL   037
00C0:  INCF   27,F
00C1:  GOTO   0B6
....................    } 
....................     
....................    lcd_send_nibble(2); 
00C2:  MOVLW  02
00C3:  MOVWF  35
00C4:  CALL   04C
....................    delay_ms(5); 
00C5:  MOVLW  05
00C6:  MOVWF  2E
00C7:  CALL   037
....................    for(i=0;i<=3;++i) 
00C8:  CLRF   27
00C9:  MOVF   27,W
00CA:  SUBLW  03
00CB:  BTFSS  03.0
00CC:  GOTO   0D9
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00CD:  MOVLW  28
00CE:  ADDWF  27,W
00CF:  MOVWF  04
00D0:  BCF    03.7
00D1:  MOVF   00,W
00D2:  MOVWF  2C
00D3:  CLRF   32
00D4:  MOVF   2C,W
00D5:  MOVWF  33
00D6:  CALL   05E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D7:  INCF   27,F
00D8:  GOTO   0C9
00D9:  BCF    0A.3
00DA:  BCF    0A.4
00DB:  GOTO   285 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00DC:  DECFSZ 2F,W
00DD:  GOTO   0DF
00DE:  GOTO   0E2
....................       address=LCD_LINE_TWO; 
00DF:  MOVLW  40
00E0:  MOVWF  30
00E1:  GOTO   0E3
....................    else 
....................       address=0; 
00E2:  CLRF   30
....................       
....................    address+=x-1; 
00E3:  MOVLW  01
00E4:  SUBWF  2E,W
00E5:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
00E6:  MOVF   30,W
00E7:  IORLW  80
00E8:  MOVWF  31
00E9:  CLRF   32
00EA:  MOVF   31,W
00EB:  MOVWF  33
00EC:  CALL   05E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00ED:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00EE:  MOVF   2D,W
00EF:  XORLW  07
00F0:  BTFSC  03.2
00F1:  GOTO   0FC
00F2:  XORLW  0B
00F3:  BTFSC  03.2
00F4:  GOTO   101
00F5:  XORLW  06
00F6:  BTFSC  03.2
00F7:  GOTO   109
00F8:  XORLW  02
00F9:  BTFSC  03.2
00FA:  GOTO   10F
00FB:  GOTO   114
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00FC:  MOVLW  01
00FD:  MOVWF  2E
00FE:  MOVWF  2F
00FF:  CALL   0DC
0100:  GOTO   119
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0101:  CLRF   32
0102:  MOVLW  01
0103:  MOVWF  33
0104:  CALL   05E
....................                      delay_ms(2); 
0105:  MOVLW  02
0106:  MOVWF  2E
0107:  CALL   037
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0108:  GOTO   119
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0109:  MOVLW  01
010A:  MOVWF  2E
010B:  MOVLW  02
010C:  MOVWF  2F
010D:  CALL   0DC
010E:  GOTO   119
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
010F:  CLRF   32
0110:  MOVLW  10
0111:  MOVWF  33
0112:  CALL   05E
0113:  GOTO   119
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0114:  MOVLW  01
0115:  MOVWF  32
0116:  MOVF   2D,W
0117:  MOVWF  33
0118:  CALL   05E
....................      #endif 
....................    } 
0119:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... int up1,up2,plus = 0; 
.................... int i,k,x,z; 
....................  
.................... void button_up1() 
.................... { 
....................    if(input(pin_A0)) 
*
0172:  BSF    03.5
0173:  BSF    05.0
0174:  BCF    03.5
0175:  BTFSS  05.0
0176:  GOTO   181
....................    { 
....................       up1=1; 
0177:  MOVLW  01
0178:  MOVWF  20
....................       up2=0; 
0179:  CLRF   21
....................       plus=0; 
017A:  CLRF   22
....................       i++; 
017B:  INCF   23,F
....................       while(input(pin_A0)); 
017C:  BSF    03.5
017D:  BSF    05.0
017E:  BCF    03.5
017F:  BTFSC  05.0
0180:  GOTO   17C
....................    } 
0181:  RETURN
.................... } 
....................  
.................... void button_up2() 
.................... { 
....................    if(input(pin_A1)) 
0182:  BSF    03.5
0183:  BSF    05.1
0184:  BCF    03.5
0185:  BTFSS  05.1
0186:  GOTO   191
....................    { 
....................       up1=0; 
0187:  CLRF   20
....................       up2=1; 
0188:  MOVLW  01
0189:  MOVWF  21
....................       plus=0; 
018A:  CLRF   22
....................       z++; 
018B:  INCF   26,F
....................       while(input(pin_A1)); 
018C:  BSF    03.5
018D:  BSF    05.1
018E:  BCF    03.5
018F:  BTFSC  05.1
0190:  GOTO   18C
....................    } 
0191:  RETURN
.................... } 
....................  
.................... void button_plus() 
.................... { 
....................    if(input(pin_A2)) 
0192:  BSF    03.5
0193:  BSF    05.2
0194:  BCF    03.5
0195:  BTFSS  05.2
0196:  GOTO   1A3
....................    { 
....................       up1=0; 
0197:  CLRF   20
....................       up2=0; 
0198:  CLRF   21
....................       plus=1; 
0199:  MOVLW  01
019A:  MOVWF  22
....................       x = z+i; 
019B:  MOVF   23,W
019C:  ADDWF  26,W
019D:  MOVWF  25
....................       while(input(pin_A2)); 
019E:  BSF    03.5
019F:  BSF    05.2
01A0:  BCF    03.5
01A1:  BTFSC  05.2
01A2:  GOTO   19E
....................    } 
01A3:  RETURN
.................... } 
....................  
.................... void delay_button() 
.................... { 
....................    for(k=0;k<20;k++) 
*
0267:  CLRF   24
0268:  MOVF   24,W
0269:  SUBLW  13
026A:  BTFSS  03.0
026B:  GOTO   274
....................    { 
....................    button_up1(); 
026C:  CALL   172
....................    button_up2(); 
026D:  CALL   182
....................    button_plus(); 
026E:  CALL   192
....................    delay_ms(5); 
026F:  MOVLW  05
0270:  MOVWF  2E
0271:  CALL   037
0272:  INCF   24,F
0273:  GOTO   268
....................    } 
0274:  RETURN
....................  
.................... } 
....................  
.................... void main() 
0275:  MOVF   03,W
0276:  ANDLW  1F
0277:  MOVWF  03
0278:  CLRF   22
0279:  BSF    03.5
027A:  BSF    1F.0
027B:  BSF    1F.1
027C:  BSF    1F.2
027D:  BCF    1F.3
027E:  MOVLW  07
027F:  MOVWF  1C
0280:  BCF    03.7
.................... { 
....................    set_tris_b(0x00); 
0281:  MOVLW  00
0282:  MOVWF  06
....................    lcd_init(); 
0283:  BCF    03.5
0284:  GOTO   09E
....................    printf(lcd_putc,"\f Butona Basiniz!",); 
0285:  MOVLW  04
0286:  BSF    03.6
0287:  MOVWF  0D
0288:  MOVLW  00
0289:  MOVWF  0F
028A:  BCF    03.6
028B:  GOTO   11A
....................     
....................    while(TRUE) 
....................    {      
....................         button_up1(); 
028C:  CALL   172
....................         button_up2(); 
028D:  CALL   182
....................         button_plus();  
028E:  CALL   192
....................  
....................         if(up1==1 && up2==0 && plus==0) 
028F:  DECFSZ 20,W
0290:  GOTO   2B6
0291:  MOVF   21,F
0292:  BTFSS  03.2
0293:  GOTO   2B6
0294:  MOVF   22,F
0295:  BTFSS  03.2
0296:  GOTO   2B6
....................         { 
....................         printf(lcd_putc,"\fBirinci Sayi= %d",i);  
0297:  MOVLW  0D
0298:  BSF    03.6
0299:  MOVWF  0D
029A:  MOVLW  00
029B:  MOVWF  0F
029C:  BCF    03.0
029D:  MOVLW  0F
029E:  BCF    03.6
029F:  MOVWF  27
02A0:  CALL   1A4
02A1:  MOVF   23,W
02A2:  MOVWF  27
02A3:  MOVLW  18
02A4:  MOVWF  28
02A5:  CALL   210
....................         printf(lcd_putc,"\nIkinci Sayi= %d",z); 
02A6:  MOVLW  16
02A7:  BSF    03.6
02A8:  MOVWF  0D
02A9:  MOVLW  00
02AA:  MOVWF  0F
02AB:  BCF    03.0
02AC:  MOVLW  0E
02AD:  BCF    03.6
02AE:  MOVWF  27
02AF:  CALL   1A4
02B0:  MOVF   26,W
02B1:  MOVWF  27
02B2:  MOVLW  18
02B3:  MOVWF  28
02B4:  CALL   210
....................         delay_button(); 
02B5:  CALL   267
....................         } 
....................          
....................         if(up1==0 && up2==1 && plus==0) 
02B6:  MOVF   20,F
02B7:  BTFSS  03.2
02B8:  GOTO   2DD
02B9:  DECFSZ 21,W
02BA:  GOTO   2DD
02BB:  MOVF   22,F
02BC:  BTFSS  03.2
02BD:  GOTO   2DD
....................         { 
....................         printf(lcd_putc,"\fBirinci Sayi= %d",i);  
02BE:  MOVLW  1F
02BF:  BSF    03.6
02C0:  MOVWF  0D
02C1:  MOVLW  00
02C2:  MOVWF  0F
02C3:  BCF    03.0
02C4:  MOVLW  0F
02C5:  BCF    03.6
02C6:  MOVWF  27
02C7:  CALL   1A4
02C8:  MOVF   23,W
02C9:  MOVWF  27
02CA:  MOVLW  18
02CB:  MOVWF  28
02CC:  CALL   210
....................         printf(lcd_putc,"\nIkinci Sayi= %d",z); 
02CD:  MOVLW  28
02CE:  BSF    03.6
02CF:  MOVWF  0D
02D0:  MOVLW  00
02D1:  MOVWF  0F
02D2:  BCF    03.0
02D3:  MOVLW  0E
02D4:  BCF    03.6
02D5:  MOVWF  27
02D6:  CALL   1A4
02D7:  MOVF   26,W
02D8:  MOVWF  27
02D9:  MOVLW  18
02DA:  MOVWF  28
02DB:  CALL   210
....................         delay_button(); 
02DC:  CALL   267
....................         } 
....................          
....................         if(up1==0 && up2==0 && plus==1) 
02DD:  MOVF   20,F
02DE:  BTFSS  03.2
02DF:  GOTO   2F5
02E0:  MOVF   21,F
02E1:  BTFSS  03.2
02E2:  GOTO   2F5
02E3:  DECFSZ 22,W
02E4:  GOTO   2F5
....................         { 
....................         printf(lcd_putc,"\fTOPLAM= %d",x); 
02E5:  MOVLW  31
02E6:  BSF    03.6
02E7:  MOVWF  0D
02E8:  MOVLW  00
02E9:  MOVWF  0F
02EA:  BCF    03.0
02EB:  MOVLW  09
02EC:  BCF    03.6
02ED:  MOVWF  27
02EE:  CALL   1A4
02EF:  MOVF   25,W
02F0:  MOVWF  27
02F1:  MOVLW  18
02F2:  MOVWF  28
02F3:  CALL   210
....................         delay_button(); 
02F4:  CALL   267
....................         } 
02F5:  GOTO   28C
....................    } 
....................  
.................... } 
02F6:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
