CCS PCM C Compiler, Version 5.015, 5967               03-May-23 02:12

               Filename:   E:\Okul\Mikro\mikro lab\odev 8\LCD Sayma Uygulamasi\Kod\main.lst

               ROM used:   672 words (8%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           25 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   24E
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,10
0005:  DATA C2,3A
0006:  DATA F4,37
0007:  DATA EE,30
0008:  DATA 20,21
0009:  DATA E1,39
000A:  DATA 69,37
000B:  DATA 69,3D
000C:  DATA 21,00
000D:  DATA 0C,10
000E:  DATA F3,30
000F:  DATA F9,34
0010:  DATA 3D,10
0011:  DATA 25,32
0012:  DATA 00,00
0013:  DATA 0C,10
0014:  DATA F3,30
0015:  DATA F9,34
0016:  DATA 3D,10
0017:  DATA 25,32
0018:  DATA 00,00
*
00FC:  MOVF   0B,W
00FD:  MOVWF  24
00FE:  BCF    0B.7
00FF:  BSF    03.5
0100:  BSF    03.6
0101:  BSF    0C.7
0102:  BSF    0C.0
0103:  NOP
0104:  NOP
0105:  BCF    03.5
0106:  BCF    03.6
0107:  BTFSC  24.7
0108:  BSF    0B.7
0109:  BSF    03.6
010A:  MOVF   0C,W
010B:  ANDLW  7F
010C:  BTFSC  03.2
010D:  GOTO   150
010E:  BCF    03.6
010F:  MOVWF  24
0110:  BSF    03.6
0111:  MOVF   0D,W
0112:  BCF    03.6
0113:  MOVWF  25
0114:  BSF    03.6
0115:  MOVF   0F,W
0116:  BCF    03.6
0117:  MOVWF  26
0118:  MOVF   24,W
0119:  MOVWF  2A
011A:  CALL   0D0
011B:  MOVF   25,W
011C:  BSF    03.6
011D:  MOVWF  0D
011E:  BCF    03.6
011F:  MOVF   26,W
0120:  BSF    03.6
0121:  MOVWF  0F
0122:  BCF    03.6
0123:  MOVF   0B,W
0124:  MOVWF  27
0125:  BCF    0B.7
0126:  BSF    03.5
0127:  BSF    03.6
0128:  BSF    0C.7
0129:  BSF    0C.0
012A:  NOP
012B:  NOP
012C:  BCF    03.5
012D:  BCF    03.6
012E:  BTFSC  27.7
012F:  BSF    0B.7
0130:  BSF    03.6
0131:  RLF    0C,W
0132:  RLF    0E,W
0133:  ANDLW  7F
0134:  BTFSC  03.2
0135:  GOTO   150
0136:  BCF    03.6
0137:  MOVWF  24
0138:  BSF    03.6
0139:  MOVF   0D,W
013A:  BCF    03.6
013B:  MOVWF  25
013C:  BSF    03.6
013D:  MOVF   0F,W
013E:  BCF    03.6
013F:  MOVWF  26
0140:  MOVF   24,W
0141:  MOVWF  2A
0142:  CALL   0D0
0143:  MOVF   25,W
0144:  BSF    03.6
0145:  MOVWF  0D
0146:  BCF    03.6
0147:  MOVF   26,W
0148:  BSF    03.6
0149:  MOVWF  0F
014A:  INCF   0D,F
014B:  BTFSC  03.2
014C:  INCF   0F,F
014D:  BCF    03.6
014E:  GOTO   0FC
014F:  BSF    03.6
0150:  BCF    03.6
0151:  BCF    0A.3
0152:  BCF    0A.4
0153:  GOTO   265 (RETURN)
*
017D:  MOVF   0B,W
017E:  MOVWF  25
017F:  BCF    0B.7
0180:  BSF    03.5
0181:  BSF    03.6
0182:  BSF    0C.7
0183:  BSF    0C.0
0184:  NOP
0185:  NOP
0186:  BCF    03.5
0187:  BCF    03.6
0188:  BTFSC  25.7
0189:  BSF    0B.7
018A:  BTFSC  03.0
018B:  GOTO   1B4
018C:  BSF    03.6
018D:  MOVF   0C,W
018E:  ANDLW  7F
018F:  BCF    03.6
0190:  MOVWF  25
0191:  BSF    03.6
0192:  MOVF   0D,W
0193:  BCF    03.6
0194:  MOVWF  26
0195:  BSF    03.6
0196:  MOVF   0F,W
0197:  BCF    03.6
0198:  MOVWF  27
0199:  MOVF   25,W
019A:  MOVWF  2A
019B:  CALL   0D0
019C:  MOVF   26,W
019D:  BSF    03.6
019E:  MOVWF  0D
019F:  BCF    03.6
01A0:  MOVF   27,W
01A1:  BSF    03.6
01A2:  MOVWF  0F
01A3:  BCF    03.6
01A4:  MOVF   0B,W
01A5:  MOVWF  28
01A6:  BCF    0B.7
01A7:  BSF    03.5
01A8:  BSF    03.6
01A9:  BSF    0C.7
01AA:  BSF    0C.0
01AB:  NOP
01AC:  NOP
01AD:  BCF    03.5
01AE:  BCF    03.6
01AF:  BTFSC  28.7
01B0:  BSF    0B.7
01B1:  DECFSZ 24,F
01B2:  GOTO   1B4
01B3:  GOTO   1D3
01B4:  BSF    03.6
01B5:  RLF    0C,W
01B6:  RLF    0E,W
01B7:  ANDLW  7F
01B8:  BCF    03.6
01B9:  MOVWF  25
01BA:  BSF    03.6
01BB:  MOVF   0D,W
01BC:  BCF    03.6
01BD:  MOVWF  26
01BE:  BSF    03.6
01BF:  MOVF   0F,W
01C0:  BCF    03.6
01C1:  MOVWF  27
01C2:  MOVF   25,W
01C3:  MOVWF  2A
01C4:  CALL   0D0
01C5:  MOVF   26,W
01C6:  BSF    03.6
01C7:  MOVWF  0D
01C8:  BCF    03.6
01C9:  MOVF   27,W
01CA:  BSF    03.6
01CB:  MOVWF  0F
01CC:  INCF   0D,F
01CD:  BTFSC  03.2
01CE:  INCF   0F,F
01CF:  BCF    03.0
01D0:  BCF    03.6
01D1:  DECFSZ 24,F
01D2:  GOTO   17D
01D3:  RETURN
01D4:  MOVF   2B,W
01D5:  CLRF   78
01D6:  SUBWF  2A,W
01D7:  BTFSC  03.0
01D8:  GOTO   1DC
01D9:  MOVF   2A,W
01DA:  MOVWF  77
01DB:  GOTO   1E8
01DC:  CLRF   77
01DD:  MOVLW  08
01DE:  MOVWF  2C
01DF:  RLF    2A,F
01E0:  RLF    77,F
01E1:  MOVF   2B,W
01E2:  SUBWF  77,W
01E3:  BTFSC  03.0
01E4:  MOVWF  77
01E5:  RLF    78,F
01E6:  DECFSZ 2C,F
01E7:  GOTO   1DF
01E8:  RETURN
01E9:  MOVLW  20
01EA:  BTFSS  25.4
01EB:  MOVLW  30
01EC:  MOVWF  26
01ED:  MOVF   24,W
01EE:  MOVWF  77
01EF:  BTFSS  24.7
01F0:  GOTO   1F9
01F1:  COMF   77,F
01F2:  INCF   77,F
01F3:  MOVF   77,W
01F4:  MOVWF  24
01F5:  MOVLW  2D
01F6:  MOVWF  26
01F7:  BSF    25.7
01F8:  BSF    25.0
01F9:  MOVF   24,W
01FA:  MOVWF  2A
01FB:  MOVLW  64
01FC:  MOVWF  2B
01FD:  CALL   1D4
01FE:  MOVF   77,W
01FF:  MOVWF  24
0200:  MOVLW  30
0201:  ADDWF  78,W
0202:  MOVWF  27
0203:  MOVF   24,W
0204:  MOVWF  2A
0205:  MOVLW  0A
0206:  MOVWF  2B
0207:  CALL   1D4
0208:  MOVLW  30
0209:  ADDWF  77,W
020A:  MOVWF  29
020B:  MOVLW  30
020C:  ADDWF  78,W
020D:  MOVWF  28
020E:  MOVF   26,W
020F:  MOVWF  77
0210:  MOVLW  30
0211:  SUBWF  27,W
0212:  BTFSC  03.2
0213:  GOTO   218
0214:  BSF    25.1
0215:  BTFSC  25.7
0216:  BSF    25.2
0217:  GOTO   22C
0218:  MOVF   26,W
0219:  MOVWF  27
021A:  MOVLW  20
021B:  MOVWF  26
021C:  MOVLW  30
021D:  SUBWF  28,W
021E:  BTFSC  03.2
021F:  GOTO   224
0220:  BSF    25.0
0221:  BTFSC  25.7
0222:  BSF    25.1
0223:  GOTO   22C
0224:  BTFSS  03.2
0225:  BSF    25.0
0226:  BTFSS  03.2
0227:  GOTO   22C
0228:  MOVF   27,W
0229:  MOVWF  28
022A:  MOVLW  20
022B:  MOVWF  27
022C:  BTFSC  25.2
022D:  GOTO   233
022E:  BTFSC  25.1
022F:  GOTO   236
0230:  BTFSC  25.0
0231:  GOTO   239
0232:  GOTO   23C
0233:  MOVF   26,W
0234:  MOVWF  2A
0235:  CALL   0D0
0236:  MOVF   27,W
0237:  MOVWF  2A
0238:  CALL   0D0
0239:  MOVF   28,W
023A:  MOVWF  2A
023B:  CALL   0D0
023C:  MOVF   29,W
023D:  MOVWF  2A
023E:  CALL   0D0
023F:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #use delay(clock = 4000000) 
*
0019:  MOVLW  2B
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02D
001F:  MOVLW  01
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  4A
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  GOTO   02B
002B:  DECFSZ 00,F
002C:  GOTO   01F
002D:  RETURN
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0046:  MOVLW  0F
0047:  BSF    03.5
0048:  ANDWF  06,W
0049:  IORLW  F0
004A:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004B:  BCF    03.5
004C:  BSF    06.2
....................    delay_cycles(1); 
004D:  NOP
....................    lcd_output_enable(1); 
004E:  BSF    06.0
....................    delay_cycles(1); 
004F:  NOP
....................    high = lcd_read_nibble(); 
0050:  CALL   03A
0051:  MOVF   78,W
0052:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
0053:  BCF    06.0
....................    delay_cycles(1); 
0054:  NOP
....................    lcd_output_enable(1); 
0055:  BSF    06.0
....................    delay_us(1); 
0056:  NOP
....................    low = lcd_read_nibble(); 
0057:  CALL   03A
0058:  MOVF   78,W
0059:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
005A:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005B:  MOVLW  0F
005C:  BSF    03.5
005D:  ANDWF  06,W
005E:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005F:  BCF    03.5
0060:  SWAPF  32,W
0061:  MOVWF  77
0062:  MOVLW  F0
0063:  ANDWF  77,F
0064:  MOVF   77,W
0065:  IORWF  31,W
0066:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003A:  MOVF   06,W
003B:  MOVWF  77
003C:  SWAPF  06,W
003D:  ANDLW  0F
003E:  MOVWF  78
....................   #endif 
003F:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002E:  SWAPF  32,W
002F:  ANDLW  F0
0030:  MOVWF  77
0031:  MOVLW  0F
0032:  ANDWF  06,W
0033:  IORWF  77,W
0034:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0035:  NOP
....................    lcd_output_enable(1); 
0036:  BSF    06.0
....................    delay_us(2); 
0037:  GOTO   038
....................    lcd_output_enable(0); 
0038:  BCF    06.0
0039:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0040:  BSF    03.5
0041:  BCF    06.0
....................    lcd_rs_tris(); 
0042:  BCF    06.1
....................    lcd_rw_tris(); 
0043:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0044:  BCF    03.5
0045:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0067:  MOVF   78,W
0068:  MOVWF  31
0069:  BTFSC  31.7
006A:  GOTO   046
....................    lcd_output_rs(address); 
006B:  BTFSS  2F.0
006C:  BCF    06.1
006D:  BTFSC  2F.0
006E:  BSF    06.1
....................    delay_cycles(1); 
006F:  NOP
....................    lcd_output_rw(0); 
0070:  BCF    06.2
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_enable(0); 
0072:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0073:  SWAPF  30,W
0074:  MOVWF  31
0075:  MOVLW  0F
0076:  ANDWF  31,F
0077:  MOVF   31,W
0078:  MOVWF  32
0079:  CALL   02E
....................    lcd_send_nibble(n & 0xf); 
007A:  MOVF   30,W
007B:  ANDLW  0F
007C:  MOVWF  31
007D:  MOVWF  32
007E:  CALL   02E
007F:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0080:  MOVLW  28
0081:  MOVWF  25
0082:  MOVLW  0C
0083:  MOVWF  26
0084:  MOVLW  01
0085:  MOVWF  27
0086:  MOVLW  06
0087:  MOVWF  28
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0088:  BCF    06.0
....................    lcd_output_rs(0); 
0089:  BCF    06.1
....................    lcd_output_rw(0); 
008A:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008B:  MOVLW  0F
008C:  BSF    03.5
008D:  ANDWF  06,W
008E:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
008F:  BCF    06.0
....................    lcd_rs_tris(); 
0090:  BCF    06.1
....................    lcd_rw_tris(); 
0091:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0092:  MOVLW  0F
0093:  BCF    03.5
0094:  MOVWF  2B
0095:  CALL   019
....................    for(i=1;i<=3;++i) 
0096:  MOVLW  01
0097:  MOVWF  24
0098:  MOVF   24,W
0099:  SUBLW  03
009A:  BTFSS  03.0
009B:  GOTO   0A4
....................    { 
....................        lcd_send_nibble(3); 
009C:  MOVLW  03
009D:  MOVWF  32
009E:  CALL   02E
....................        delay_ms(5); 
009F:  MOVLW  05
00A0:  MOVWF  2B
00A1:  CALL   019
00A2:  INCF   24,F
00A3:  GOTO   098
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A4:  MOVLW  02
00A5:  MOVWF  32
00A6:  CALL   02E
....................    delay_ms(5); 
00A7:  MOVLW  05
00A8:  MOVWF  2B
00A9:  CALL   019
....................    for(i=0;i<=3;++i) 
00AA:  CLRF   24
00AB:  MOVF   24,W
00AC:  SUBLW  03
00AD:  BTFSS  03.0
00AE:  GOTO   0BB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AF:  MOVLW  25
00B0:  ADDWF  24,W
00B1:  MOVWF  04
00B2:  BCF    03.7
00B3:  MOVF   00,W
00B4:  MOVWF  29
00B5:  CLRF   2F
00B6:  MOVF   29,W
00B7:  MOVWF  30
00B8:  CALL   040
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B9:  INCF   24,F
00BA:  GOTO   0AB
00BB:  BCF    0A.3
00BC:  BCF    0A.4
00BD:  GOTO   25E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00BE:  DECFSZ 2C,W
00BF:  GOTO   0C1
00C0:  GOTO   0C4
....................       address=LCD_LINE_TWO; 
00C1:  MOVLW  40
00C2:  MOVWF  2D
00C3:  GOTO   0C5
....................    else 
....................       address=0; 
00C4:  CLRF   2D
....................       
....................    address+=x-1; 
00C5:  MOVLW  01
00C6:  SUBWF  2B,W
00C7:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address); 
00C8:  MOVF   2D,W
00C9:  IORLW  80
00CA:  MOVWF  2E
00CB:  CLRF   2F
00CC:  MOVF   2E,W
00CD:  MOVWF  30
00CE:  CALL   040
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CF:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D0:  MOVF   2A,W
00D1:  XORLW  07
00D2:  BTFSC  03.2
00D3:  GOTO   0DE
00D4:  XORLW  0B
00D5:  BTFSC  03.2
00D6:  GOTO   0E3
00D7:  XORLW  06
00D8:  BTFSC  03.2
00D9:  GOTO   0EB
00DA:  XORLW  02
00DB:  BTFSC  03.2
00DC:  GOTO   0F1
00DD:  GOTO   0F6
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00DE:  MOVLW  01
00DF:  MOVWF  2B
00E0:  MOVWF  2C
00E1:  CALL   0BE
00E2:  GOTO   0FB
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E3:  CLRF   2F
00E4:  MOVLW  01
00E5:  MOVWF  30
00E6:  CALL   040
....................                      delay_ms(2); 
00E7:  MOVLW  02
00E8:  MOVWF  2B
00E9:  CALL   019
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00EA:  GOTO   0FB
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00EB:  MOVLW  01
00EC:  MOVWF  2B
00ED:  MOVLW  02
00EE:  MOVWF  2C
00EF:  CALL   0BE
00F0:  GOTO   0FB
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F1:  CLRF   2F
00F2:  MOVLW  10
00F3:  MOVWF  30
00F4:  CALL   040
00F5:  GOTO   0FB
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F6:  MOVLW  01
00F7:  MOVWF  2F
00F8:  MOVF   2A,W
00F9:  MOVWF  30
00FA:  CALL   040
....................      #endif 
....................    } 
00FB:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... int number,up,down = 0; 
.................... int i; 
....................  
.................... void button_up() 
.................... { 
....................    if(input(pin_A0)) 
*
0154:  BSF    03.5
0155:  BSF    05.0
0156:  BCF    03.5
0157:  BTFSS  05.0
0158:  GOTO   161
....................    { 
....................       up=1; 
0159:  MOVLW  01
015A:  MOVWF  21
....................       down=0; 
015B:  CLRF   22
....................       while(input(pin_A0)); 
015C:  BSF    03.5
015D:  BSF    05.0
015E:  BCF    03.5
015F:  BTFSC  05.0
0160:  GOTO   15C
....................    } 
0161:  RETURN
.................... } 
....................  
.................... void button_down() 
.................... { 
....................    if(input(pin_A1)) 
0162:  BSF    03.5
0163:  BSF    05.1
0164:  BCF    03.5
0165:  BTFSS  05.1
0166:  GOTO   16F
....................    { 
....................       up=0; 
0167:  CLRF   21
....................       down=1; 
0168:  MOVLW  01
0169:  MOVWF  22
....................       while(input(pin_A1)); 
016A:  BSF    03.5
016B:  BSF    05.1
016C:  BCF    03.5
016D:  BTFSC  05.1
016E:  GOTO   16A
....................    } 
016F:  RETURN
.................... } 
....................  
.................... void button_stop() 
.................... { 
....................    if(input(pin_A2)) 
0170:  BSF    03.5
0171:  BSF    05.2
0172:  BCF    03.5
0173:  BTFSS  05.2
0174:  GOTO   17C
....................    { 
....................       up=0; 
0175:  CLRF   21
....................       down=0; 
0176:  CLRF   22
....................       while(input(pin_A2)); 
0177:  BSF    03.5
0178:  BSF    05.2
0179:  BCF    03.5
017A:  BTFSC  05.2
017B:  GOTO   177
....................    } 
017C:  RETURN
.................... } 
....................  
.................... void delay_button() 
.................... { 
....................    for(i=0;i<20;i++) 
*
0240:  CLRF   23
0241:  MOVF   23,W
0242:  SUBLW  13
0243:  BTFSS  03.0
0244:  GOTO   24D
....................    { 
....................    button_up(); 
0245:  CALL   154
....................    button_down(); 
0246:  CALL   162
....................    button_stop(); 
0247:  CALL   170
....................    delay_ms(5); 
0248:  MOVLW  05
0249:  MOVWF  2B
024A:  CALL   019
024B:  INCF   23,F
024C:  GOTO   241
....................    } 
024D:  RETURN
....................  
.................... } 
....................  
.................... void main() 
024E:  MOVF   03,W
024F:  ANDLW  1F
0250:  MOVWF  03
0251:  CLRF   22
0252:  BSF    03.5
0253:  BSF    1F.0
0254:  BSF    1F.1
0255:  BSF    1F.2
0256:  BCF    1F.3
0257:  MOVLW  07
0258:  MOVWF  1C
0259:  BCF    03.7
.................... { 
....................    set_tris_b(0x00); 
025A:  MOVLW  00
025B:  MOVWF  06
....................    lcd_init(); 
025C:  BCF    03.5
025D:  GOTO   080
....................    printf(lcd_putc,"\f Butona Basiniz!",); 
025E:  MOVLW  04
025F:  BSF    03.6
0260:  MOVWF  0D
0261:  MOVLW  00
0262:  MOVWF  0F
0263:  BCF    03.6
0264:  GOTO   0FC
....................     
....................    while(TRUE) 
....................    {      
....................         button_up(); 
0265:  CALL   154
....................         button_down(); 
0266:  CALL   162
....................         button_stop();  
0267:  CALL   170
....................          
....................         if(up==0 && down==0) 
0268:  MOVF   21,F
0269:  BTFSS  03.2
026A:  GOTO   272
026B:  MOVF   22,F
026C:  BTFSS  03.2
026D:  GOTO   272
....................         { 
....................         lcd_send_byte(0,0x0d); 
026E:  CLRF   2F
026F:  MOVLW  0D
0270:  MOVWF  30
0271:  CALL   040
....................         } 
....................          
....................         if(up==1 && down==0) 
0272:  DECFSZ 21,W
0273:  GOTO   288
0274:  MOVF   22,F
0275:  BTFSS  03.2
0276:  GOTO   288
....................         { 
....................         number++; 
0277:  INCF   20,F
....................         printf(lcd_putc,"\f sayi= %d",number);    
0278:  MOVLW  0D
0279:  BSF    03.6
027A:  MOVWF  0D
027B:  MOVLW  00
027C:  MOVWF  0F
027D:  BCF    03.0
027E:  MOVLW  08
027F:  BCF    03.6
0280:  MOVWF  24
0281:  CALL   17D
0282:  MOVF   20,W
0283:  MOVWF  24
0284:  MOVLW  18
0285:  MOVWF  25
0286:  CALL   1E9
....................         delay_button(); 
0287:  CALL   240
....................         } 
....................          
....................         if(up==0 && down==1) 
0288:  MOVF   21,F
0289:  BTFSS  03.2
028A:  GOTO   29E
028B:  DECFSZ 22,W
028C:  GOTO   29E
....................         { 
....................         number--; 
028D:  DECF   20,F
....................         printf(lcd_putc,"\f sayi= %d",number); 
028E:  MOVLW  13
028F:  BSF    03.6
0290:  MOVWF  0D
0291:  MOVLW  00
0292:  MOVWF  0F
0293:  BCF    03.0
0294:  MOVLW  08
0295:  BCF    03.6
0296:  MOVWF  24
0297:  CALL   17D
0298:  MOVF   20,W
0299:  MOVWF  24
029A:  MOVLW  18
029B:  MOVWF  25
029C:  CALL   1E9
....................         delay_button(); 
029D:  CALL   240
....................         } 
029E:  GOTO   265
....................    } 
....................  
.................... } 
029F:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
