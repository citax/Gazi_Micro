CCS PCM C Compiler, Version 5.015, 5967               28-Mar-23 15:16

               Filename:   E:\Okul\Mikro\mikro\Odev4\KOD_V3\main.lst

               ROM used:   354 words (4%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           30 (8%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   09D
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0088:  MOVF   37,W
0089:  CLRF   78
008A:  SUBWF  36,W
008B:  BTFSC  03.0
008C:  GOTO   090
008D:  MOVF   36,W
008E:  MOVWF  77
008F:  GOTO   09C
0090:  CLRF   77
0091:  MOVLW  08
0092:  MOVWF  38
0093:  RLF    36,F
0094:  RLF    77,F
0095:  MOVF   37,W
0096:  SUBWF  77,W
0097:  BTFSC  03.0
0098:  MOVWF  77
0099:  RLF    78,F
009A:  DECFSZ 38,F
009B:  GOTO   093
009C:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses HS, NOWDT, NOPROTECT  
.................... #use delay(clock=4000000) 
*
0004:  MOVLW  36
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
.................... #define pin_up   pin_A0 
.................... #define pin_down pin_A1 
.................... #define pin_stop pin_A2 
.................... #define display1 pin_C0 
.................... #define display2 pin_C1 
....................  
.................... int i,x,a,j = 0; 
.................... int first_digit, overflow, digit = 0; 
.................... int down, up, stop= 0; 
.................... int number[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 0x7F, 0x6F}; 
*
00AD:  MOVLW  3F
00AE:  BCF    03.5
00AF:  MOVWF  2A
00B0:  MOVLW  06
00B1:  MOVWF  2B
00B2:  MOVLW  5B
00B3:  MOVWF  2C
00B4:  MOVLW  4F
00B5:  MOVWF  2D
00B6:  MOVLW  66
00B7:  MOVWF  2E
00B8:  MOVLW  6D
00B9:  MOVWF  2F
00BA:  MOVLW  7C
00BB:  MOVWF  30
00BC:  MOVLW  07
00BD:  MOVWF  31
00BE:  MOVLW  7F
00BF:  MOVWF  32
00C0:  MOVLW  6F
00C1:  MOVWF  33
....................  
.................... void button_up() 
.................... { 
....................     if(!input(pin_stop) && input(pin_up) && !input(pin_down)) 
*
0019:  BSF    03.5
001A:  BSF    05.2
001B:  BCF    03.5
001C:  BTFSC  05.2
001D:  GOTO   037
001E:  BSF    03.5
001F:  BSF    05.0
0020:  BCF    03.5
0021:  BTFSS  05.0
0022:  GOTO   037
0023:  BSF    03.5
0024:  BSF    05.1
0025:  BCF    03.5
0026:  BTFSC  05.1
0027:  GOTO   037
....................    { 
....................       delay_ms(15); 
0028:  MOVLW  0F
0029:  MOVWF  36
002A:  CALL   004
....................       up = 1; 
002B:  MOVLW  01
002C:  MOVWF  28
....................       down, stop = 0; 
002D:  CLRF   29
....................       if (digit==99) 
002E:  MOVF   26,W
002F:  SUBLW  63
0030:  BTFSC  03.2
....................       digit=0; 
0031:  CLRF   26
....................       while(input(pin_up)); 
0032:  BSF    03.5
0033:  BSF    05.0
0034:  BCF    03.5
0035:  BTFSC  05.0
0036:  GOTO   032
....................    } 
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   0EB (RETURN)
.................... } 
....................  
.................... void button_down() 
.................... { 
....................    if(!input(pin_stop) && !input(pin_up) && input(pin_down)) 
003A:  BSF    03.5
003B:  BSF    05.2
003C:  BCF    03.5
003D:  BTFSC  05.2
003E:  GOTO   059
003F:  BSF    03.5
0040:  BSF    05.0
0041:  BCF    03.5
0042:  BTFSC  05.0
0043:  GOTO   059
0044:  BSF    03.5
0045:  BSF    05.1
0046:  BCF    03.5
0047:  BTFSS  05.1
0048:  GOTO   059
....................    { 
....................       delay_ms(15); 
0049:  MOVLW  0F
004A:  MOVWF  36
004B:  CALL   004
....................       down = 1; 
004C:  MOVLW  01
004D:  MOVWF  27
....................       up , stop = 0; 
004E:  CLRF   29
....................       if(digit==0) 
004F:  MOVF   26,F
0050:  BTFSS  03.2
0051:  GOTO   054
....................       digit = 99; 
0052:  MOVLW  63
0053:  MOVWF  26
....................       while(input(pin_down)); 
0054:  BSF    03.5
0055:  BSF    05.1
0056:  BCF    03.5
0057:  BTFSC  05.1
0058:  GOTO   054
....................    } 
0059:  BCF    0A.3
005A:  BCF    0A.4
005B:  GOTO   0EC (RETURN)
.................... } 
....................  
.................... void button_stop() 
.................... { 
....................    if(input(pin_stop) && !input(pin_up) && !input(pin_down)) 
005C:  BSF    03.5
005D:  BSF    05.2
005E:  BCF    03.5
005F:  BTFSS  05.2
0060:  GOTO   087
0061:  BSF    03.5
0062:  BSF    05.0
0063:  BCF    03.5
0064:  BTFSC  05.0
0065:  GOTO   087
0066:  BSF    03.5
0067:  BSF    05.1
0068:  BCF    03.5
0069:  BTFSC  05.1
006A:  GOTO   087
....................    { 
....................      i,x,a = 0; 
006B:  CLRF   22
....................      first_digit, overflow = 0; 
006C:  CLRF   25
....................      down, up= 0;    
006D:  CLRF   28
....................      stop = 1; 
006E:  MOVLW  01
006F:  MOVWF  29
....................      up, down = 0; 
0070:  CLRF   27
....................      output_b(0x00); 
0071:  BSF    03.5
0072:  CLRF   06
0073:  BCF    03.5
0074:  CLRF   06
....................      output_high(display1); 
0075:  BCF    34.0
0076:  MOVF   34,W
0077:  BSF    03.5
0078:  MOVWF  07
0079:  BCF    03.5
007A:  BSF    07.0
....................      output_high(display2); 
007B:  BCF    34.1
007C:  MOVF   34,W
007D:  BSF    03.5
007E:  MOVWF  07
007F:  BCF    03.5
0080:  BSF    07.1
....................      digit=0; 
0081:  CLRF   26
....................      while(input(pin_stop)); 
0082:  BSF    03.5
0083:  BSF    05.2
0084:  BCF    03.5
0085:  BTFSC  05.2
0086:  GOTO   082
....................    } 
0087:  RETURN
....................  
.................... } 
....................  
....................  
.................... void main() 
*
009D:  MOVF   03,W
009E:  ANDLW  1F
009F:  MOVWF  03
00A0:  CLRF   23
00A1:  CLRF   26
00A2:  CLRF   29
00A3:  MOVLW  FF
00A4:  MOVWF  34
00A5:  BSF    03.5
00A6:  BSF    1F.0
00A7:  BSF    1F.1
00A8:  BSF    1F.2
00A9:  BCF    1F.3
00AA:  MOVLW  07
00AB:  MOVWF  1C
00AC:  BCF    03.7
.................... { 
....................     
....................    set_tris_a(0xFF); 
*
00C2:  MOVLW  FF
00C3:  BSF    03.5
00C4:  MOVWF  05
....................    set_tris_b(0x00); 
00C5:  MOVLW  00
00C6:  MOVWF  06
....................    set_tris_c(0x00); 
00C7:  MOVWF  07
00C8:  BCF    03.5
00C9:  MOVWF  34
....................    output_b(0x00); 
00CA:  BSF    03.5
00CB:  CLRF   06
00CC:  BCF    03.5
00CD:  CLRF   06
....................    output_high(display1); 
00CE:  BCF    34.0
00CF:  MOVF   34,W
00D0:  BSF    03.5
00D1:  MOVWF  07
00D2:  BCF    03.5
00D3:  BSF    07.0
....................    output_high(display2); 
00D4:  BCF    34.1
00D5:  MOVF   34,W
00D6:  BSF    03.5
00D7:  MOVWF  07
00D8:  BCF    03.5
00D9:  BSF    07.1
....................  
....................    while(TRUE) 
....................    {   
....................       output_b(0x00); 
00DA:  BSF    03.5
00DB:  CLRF   06
00DC:  BCF    03.5
00DD:  CLRF   06
....................       output_high(display1); 
00DE:  BCF    34.0
00DF:  MOVF   34,W
00E0:  BSF    03.5
00E1:  MOVWF  07
00E2:  BCF    03.5
00E3:  BSF    07.0
....................       output_high(display2); 
00E4:  BCF    34.1
00E5:  MOVF   34,W
00E6:  BSF    03.5
00E7:  MOVWF  07
00E8:  BCF    03.5
00E9:  BSF    07.1
....................       button_up(); 
00EA:  GOTO   019
....................       button_down(); 
00EB:  GOTO   03A
....................       button_stop(); 
00EC:  CALL   05C
....................        while(up == 1 || down == 1) 
00ED:  DECFSZ 28,W
00EE:  GOTO   0F0
00EF:  GOTO   0F2
00F0:  DECFSZ 27,W
00F1:  GOTO   160
....................       {      
....................              
....................             i = digit % 10 ; //birler 
00F2:  MOVF   26,W
00F3:  MOVWF  36
00F4:  MOVLW  0A
00F5:  MOVWF  37
00F6:  CALL   088
00F7:  MOVF   77,W
00F8:  MOVWF  20
....................             j = digit / 10 ; //onlar 
00F9:  MOVF   26,W
00FA:  MOVWF  36
00FB:  MOVLW  0A
00FC:  MOVWF  37
00FD:  CALL   088
00FE:  MOVF   78,W
00FF:  MOVWF  23
....................              
....................             if(up==1){ 
0100:  DECFSZ 28,W
0101:  GOTO   107
....................             digit++;  
0102:  INCF   26,F
....................             if(digit == 100) 
0103:  MOVF   26,W
0104:  SUBLW  64
0105:  BTFSC  03.2
....................             digit=0; 
0106:  CLRF   26
....................             } 
....................              
....................             if(down==1){ 
0107:  DECFSZ 27,W
0108:  GOTO   10D
....................             digit--; 
0109:  DECFSZ 26,F
....................             if(digit == 0) 
010A:  GOTO   10D
....................             digit=99;           
010B:  MOVLW  63
010C:  MOVWF  26
....................             } 
....................             for(int k=0; k<5 ; k++) 
010D:  CLRF   35
010E:  MOVF   35,W
010F:  SUBLW  04
0110:  BTFSS  03.0
0111:  GOTO   15C
....................                { 
....................                   output_high(display1); 
0112:  BCF    34.0
0113:  MOVF   34,W
0114:  BSF    03.5
0115:  MOVWF  07
0116:  BCF    03.5
0117:  BSF    07.0
....................                   output_b(number[i]); 
0118:  MOVLW  2A
0119:  ADDWF  20,W
011A:  MOVWF  04
011B:  BCF    03.7
011C:  MOVF   00,W
011D:  MOVWF  36
011E:  BSF    03.5
011F:  CLRF   06
0120:  BCF    03.5
0121:  MOVF   36,W
0122:  MOVWF  06
....................                   delay_ms(10); 
0123:  MOVLW  0A
0124:  MOVWF  36
0125:  CALL   004
....................                   output_low(display1); 
0126:  BCF    34.0
0127:  MOVF   34,W
0128:  BSF    03.5
0129:  MOVWF  07
012A:  BCF    03.5
012B:  BCF    07.0
....................                   output_high(display2); 
012C:  BCF    34.1
012D:  MOVF   34,W
012E:  BSF    03.5
012F:  MOVWF  07
0130:  BCF    03.5
0131:  BSF    07.1
....................                    
....................                   output_b(number[j]); 
0132:  MOVLW  2A
0133:  ADDWF  23,W
0134:  MOVWF  04
0135:  BCF    03.7
0136:  MOVF   00,W
0137:  MOVWF  36
0138:  BSF    03.5
0139:  CLRF   06
013A:  BCF    03.5
013B:  MOVF   36,W
013C:  MOVWF  06
....................                   delay_ms(10); 
013D:  MOVLW  0A
013E:  MOVWF  36
013F:  CALL   004
....................                   output_low(display2); 
0140:  BCF    34.1
0141:  MOVF   34,W
0142:  BSF    03.5
0143:  MOVWF  07
0144:  BCF    03.5
0145:  BCF    07.1
....................                    
....................                   button_stop(); 
0146:  CALL   05C
....................                   if(input(pin_down)) 
0147:  BSF    03.5
0148:  BSF    05.1
0149:  BCF    03.5
014A:  BTFSS  05.1
014B:  GOTO   14F
....................                   { 
....................                   down=1; 
014C:  MOVLW  01
014D:  MOVWF  27
....................                   up = 0; 
014E:  CLRF   28
....................                   } 
....................                   if(input(pin_up)) 
014F:  BSF    03.5
0150:  BSF    05.0
0151:  BCF    03.5
0152:  BTFSS  05.0
0153:  GOTO   157
....................                   { 
....................                   down=0; 
0154:  CLRF   27
....................                   up = 1; 
0155:  MOVLW  01
0156:  MOVWF  28
....................                   } 
....................                    
....................                    
....................                   if(stop == 1) 
0157:  DECFSZ 29,W
0158:  GOTO   15A
....................                   { 
....................                      break; 
0159:  GOTO   15C
....................                   } 
015A:  INCF   35,F
015B:  GOTO   10E
....................                } 
....................                         
....................              if(stop == 1) 
015C:  DECFSZ 29,W
015D:  GOTO   15F
....................              { 
....................                break; 
015E:  GOTO   160
....................              } 
015F:  GOTO   0ED
....................         } 
0160:  GOTO   0DA
....................  
....................          
....................    } 
.................... } 
....................  
0161:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
