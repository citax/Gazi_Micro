CCS PCM C Compiler, Version 5.015, 5967               27-Mar-23 16:19

               Filename:   E:\Okul\Mikro\mikro\Odev4\Kod\main.lst

               ROM used:   284 words (3%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           26 (7%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   071
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses HS, NOWDT, NOPROTECT  
.................... #use delay(clock=4000000) 
*
0042:  MOVLW  34
0043:  MOVWF  04
0044:  BCF    03.7
0045:  MOVF   00,W
0046:  BTFSC  03.2
0047:  GOTO   056
0048:  MOVLW  01
0049:  MOVWF  78
004A:  CLRF   77
004B:  DECFSZ 77,F
004C:  GOTO   04B
004D:  DECFSZ 78,F
004E:  GOTO   04A
004F:  MOVLW  4A
0050:  MOVWF  77
0051:  DECFSZ 77,F
0052:  GOTO   051
0053:  GOTO   054
0054:  DECFSZ 00,F
0055:  GOTO   048
0056:  RETURN
....................  
.................... #define pin_up pin_A0 
.................... #define pin_down pin_A1 
.................... #define pin_stop pin_A2 
....................  
.................... int i,x,a = 0; 
.................... int first_digit, overflow = 0; 
.................... int down, up, stop= 0; 
.................... int number[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 0x7F, 0x6F}; 
*
0081:  MOVLW  3F
0082:  BCF    03.5
0083:  MOVWF  28
0084:  MOVLW  06
0085:  MOVWF  29
0086:  MOVLW  5B
0087:  MOVWF  2A
0088:  MOVLW  4F
0089:  MOVWF  2B
008A:  MOVLW  66
008B:  MOVWF  2C
008C:  MOVLW  6D
008D:  MOVWF  2D
008E:  MOVLW  7C
008F:  MOVWF  2E
0090:  MOVLW  07
0091:  MOVWF  2F
0092:  MOVLW  7F
0093:  MOVWF  30
0094:  MOVLW  6F
0095:  MOVWF  31
....................  
....................  
.................... void button_up() 
.................... { 
....................     if(!input(pin_stop) && input(pin_up) && !input(pin_down)) 
*
0004:  BSF    03.5
0005:  BSF    05.2
0006:  BCF    03.5
0007:  BTFSC  05.2
0008:  GOTO   01B
0009:  BSF    03.5
000A:  BSF    05.0
000B:  BCF    03.5
000C:  BTFSS  05.0
000D:  GOTO   01B
000E:  BSF    03.5
000F:  BSF    05.1
0010:  BCF    03.5
0011:  BTFSC  05.1
0012:  GOTO   01B
....................    { 
....................       up = 1; 
0013:  MOVLW  01
0014:  MOVWF  26
....................       down, stop = 0; 
0015:  CLRF   27
....................       while(input(pin_up)); 
0016:  BSF    03.5
0017:  BSF    05.0
0018:  BCF    03.5
0019:  BTFSC  05.0
001A:  GOTO   016
....................    } 
001B:  RETURN
.................... } 
....................  
.................... void button_down() 
.................... { 
....................    if(!input(pin_stop) && !input(pin_up) && input(pin_down)) 
*
0057:  BSF    03.5
0058:  BSF    05.2
0059:  BCF    03.5
005A:  BTFSC  05.2
005B:  GOTO   06E
005C:  BSF    03.5
005D:  BSF    05.0
005E:  BCF    03.5
005F:  BTFSC  05.0
0060:  GOTO   06E
0061:  BSF    03.5
0062:  BSF    05.1
0063:  BCF    03.5
0064:  BTFSS  05.1
0065:  GOTO   06E
....................    { 
....................       down = 1; 
0066:  MOVLW  01
0067:  MOVWF  25
....................       up , stop = 0; 
0068:  CLRF   27
....................       while(input(pin_down)); 
0069:  BSF    03.5
006A:  BSF    05.1
006B:  BCF    03.5
006C:  BTFSC  05.1
006D:  GOTO   069
....................    } 
006E:  BCF    0A.3
006F:  BCF    0A.4
0070:  GOTO   0FB (RETURN)
.................... } 
....................  
.................... void button_stop() 
.................... { 
....................    if(input(pin_stop) && !input(pin_up) && !input(pin_down)) 
*
001C:  BSF    03.5
001D:  BSF    05.2
001E:  BCF    03.5
001F:  BTFSS  05.2
0020:  GOTO   041
0021:  BSF    03.5
0022:  BSF    05.0
0023:  BCF    03.5
0024:  BTFSC  05.0
0025:  GOTO   041
0026:  BSF    03.5
0027:  BSF    05.1
0028:  BCF    03.5
0029:  BTFSC  05.1
002A:  GOTO   041
....................    { 
....................      i,x,a = 0; 
002B:  CLRF   22
....................      first_digit, overflow = 0; 
002C:  CLRF   24
....................      down, up= 0;    
002D:  CLRF   26
....................      stop = 1; 
002E:  MOVLW  01
002F:  MOVWF  27
....................      up, down = 0; 
0030:  CLRF   25
....................      output_b(0x00); 
0031:  BSF    03.5
0032:  CLRF   06
0033:  BCF    03.5
0034:  CLRF   06
....................      output_c(0x03); 
0035:  MOVLW  00
0036:  MOVWF  32
0037:  BSF    03.5
0038:  CLRF   07
0039:  MOVLW  03
003A:  BCF    03.5
003B:  MOVWF  07
....................      while(input(pin_stop)); 
003C:  BSF    03.5
003D:  BSF    05.2
003E:  BCF    03.5
003F:  BTFSC  05.2
0040:  GOTO   03C
....................    } 
0041:  RETURN
....................  
.................... } 
....................  
....................  
.................... void main() 
*
0071:  MOVF   03,W
0072:  ANDLW  1F
0073:  MOVWF  03
0074:  CLRF   22
0075:  CLRF   24
0076:  CLRF   27
0077:  MOVLW  FF
0078:  MOVWF  32
0079:  BSF    03.5
007A:  BSF    1F.0
007B:  BSF    1F.1
007C:  BSF    1F.2
007D:  BCF    1F.3
007E:  MOVLW  07
007F:  MOVWF  1C
0080:  BCF    03.7
.................... { 
....................     
....................    set_tris_a(0xFF); 
*
0096:  MOVLW  FF
0097:  BSF    03.5
0098:  MOVWF  05
....................    set_tris_b(0x00); 
0099:  MOVLW  00
009A:  MOVWF  06
....................    set_tris_c(0x00); 
009B:  MOVWF  07
009C:  BCF    03.5
009D:  MOVWF  32
....................    output_b(0x00); 
009E:  BSF    03.5
009F:  CLRF   06
00A0:  BCF    03.5
00A1:  CLRF   06
....................    output_c(0x03); 
00A2:  MOVWF  32
00A3:  BSF    03.5
00A4:  CLRF   07
00A5:  MOVLW  03
00A6:  BCF    03.5
00A7:  MOVWF  07
....................  
....................    while(TRUE) 
....................    {   
....................       output_b(0x00); 
00A8:  BSF    03.5
00A9:  CLRF   06
00AA:  BCF    03.5
00AB:  CLRF   06
....................       output_c(0x03); 
00AC:  MOVLW  00
00AD:  MOVWF  32
00AE:  BSF    03.5
00AF:  CLRF   07
00B0:  MOVLW  03
00B1:  BCF    03.5
00B2:  MOVWF  07
....................       button_up(); 
00B3:  CALL   004
....................       button_stop(); 
00B4:  CALL   01C
....................        while(up == 1) 
00B5:  DECFSZ 26,W
00B6:  GOTO   11A
....................       { 
....................           
....................          for(i=0 ; i<11; i++) 
00B7:  CLRF   20
00B8:  MOVF   20,W
00B9:  SUBLW  0A
00BA:  BTFSS  03.0
00BB:  GOTO   113
....................          {   
....................              
....................             if(first_digit == 10) 
00BC:  MOVF   23,W
00BD:  SUBLW  0A
00BE:  BTFSS  03.2
00BF:  GOTO   0C6
....................             { 
....................                overflow++; 
00C0:  INCF   24,F
....................                first_digit=0; 
00C1:  CLRF   23
....................                if (overflow == 10) 
00C2:  MOVF   24,W
00C3:  SUBLW  0A
00C4:  BTFSC  03.2
....................                overflow = 0; 
00C5:  CLRF   24
....................             } 
....................              
....................             if(0 < overflow < 10) 
00C6:  MOVF   24,W
00C7:  SUBLW  00
00C8:  BTFSS  03.0
00C9:  GOTO   0CC
00CA:  MOVLW  00
00CB:  GOTO   0CD
00CC:  MOVLW  01
00CD:  SUBLW  09
00CE:  BTFSS  03.0
00CF:  GOTO   0D6
....................             {   
....................                a = number[overflow]; 
00D0:  MOVLW  28
00D1:  ADDWF  24,W
00D2:  MOVWF  04
00D3:  BCF    03.7
00D4:  MOVF   00,W
00D5:  MOVWF  22
....................             } 
....................                for(int k=0; k<10 ; k++) 
00D6:  CLRF   33
00D7:  MOVF   33,W
00D8:  SUBLW  09
00D9:  BTFSS  03.0
00DA:  GOTO   104
....................                { 
....................                   output_c(0x01); 
00DB:  MOVLW  00
00DC:  MOVWF  32
00DD:  BSF    03.5
00DE:  CLRF   07
00DF:  MOVLW  01
00E0:  BCF    03.5
00E1:  MOVWF  07
....................                   output_b(x); 
00E2:  BSF    03.5
00E3:  CLRF   06
00E4:  BCF    03.5
00E5:  MOVF   21,W
00E6:  MOVWF  06
....................                   delay_ms(10); 
00E7:  MOVLW  0A
00E8:  MOVWF  34
00E9:  CALL   042
....................                   output_c(0x02); 
00EA:  MOVLW  00
00EB:  MOVWF  32
00EC:  BSF    03.5
00ED:  CLRF   07
00EE:  MOVLW  02
00EF:  BCF    03.5
00F0:  MOVWF  07
....................                   output_b(a); 
00F1:  BSF    03.5
00F2:  CLRF   06
00F3:  BCF    03.5
00F4:  MOVF   22,W
00F5:  MOVWF  06
....................                   delay_ms(10); 
00F6:  MOVLW  0A
00F7:  MOVWF  34
00F8:  CALL   042
....................                   button_stop(); 
00F9:  CALL   01C
....................                   button_down(); 
00FA:  GOTO   057
....................                   button_up(); 
00FB:  CALL   004
....................                   if(stop == 1 || down == 1) 
00FC:  DECFSZ 27,W
00FD:  GOTO   0FF
00FE:  GOTO   101
00FF:  DECFSZ 25,W
0100:  GOTO   102
....................                   { 
....................                      break; 
0101:  GOTO   104
....................                   } 
0102:  INCF   33,F
0103:  GOTO   0D7
....................                } 
....................                 
....................             if(stop == 1 || down == 1) 
0104:  DECFSZ 27,W
0105:  GOTO   107
0106:  GOTO   109
0107:  DECFSZ 25,W
0108:  GOTO   10A
....................             { 
....................                break; 
0109:  GOTO   113
....................             } 
....................              
....................             x = number[i];  
010A:  MOVLW  28
010B:  ADDWF  20,W
010C:  MOVWF  04
010D:  BCF    03.7
010E:  MOVF   00,W
010F:  MOVWF  21
....................             first_digit++;  
0110:  INCF   23,F
0111:  INCF   20,F
0112:  GOTO   0B8
....................  
....................          } 
....................          if(stop == 1 || down == 1) 
0113:  DECFSZ 27,W
0114:  GOTO   116
0115:  GOTO   118
0116:  DECFSZ 25,W
0117:  GOTO   119
....................             { 
....................                break; 
0118:  GOTO   11A
....................             } 
0119:  GOTO   0B5
....................       } 
011A:  GOTO   0A8
....................    } 
.................... } 
....................  
011B:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
