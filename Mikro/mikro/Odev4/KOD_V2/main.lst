CCS PCM C Compiler, Version 5.015, 5967               27-Mar-23 20:21

               Filename:   E:\Okul\Mikro\mikro\Odev4\KOD_V2\main.lst

               ROM used:   421 words (5%)
                           Largest free fragment is 2048
               RAM used:   29 (8%) at main() level
                           33 (9%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   093
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0069:  MOVF   3A,W
006A:  CLRF   78
006B:  SUBWF  39,W
006C:  BTFSC  03.0
006D:  GOTO   071
006E:  MOVF   39,W
006F:  MOVWF  77
0070:  GOTO   07D
0071:  CLRF   77
0072:  MOVLW  08
0073:  MOVWF  3B
0074:  RLF    39,F
0075:  RLF    77,F
0076:  MOVF   3A,W
0077:  SUBWF  77,W
0078:  BTFSC  03.0
0079:  MOVWF  77
007A:  RLF    78,F
007B:  DECFSZ 3B,F
007C:  GOTO   074
007D:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses HS, NOWDT, NOPROTECT  
.................... #use delay(clock=4000000) 
007E:  MOVLW  39
007F:  MOVWF  04
0080:  BCF    03.7
0081:  MOVF   00,W
0082:  BTFSC  03.2
0083:  GOTO   092
0084:  MOVLW  01
0085:  MOVWF  78
0086:  CLRF   77
0087:  DECFSZ 77,F
0088:  GOTO   087
0089:  DECFSZ 78,F
008A:  GOTO   086
008B:  MOVLW  4A
008C:  MOVWF  77
008D:  DECFSZ 77,F
008E:  GOTO   08D
008F:  GOTO   090
0090:  DECFSZ 00,F
0091:  GOTO   084
0092:  RETURN
....................  
.................... #define pin_up   pin_A0 
.................... #define pin_down pin_A1 
.................... #define pin_stop pin_A2 
.................... #define display1 pin_C0 
.................... #define display2 pin_C1 
....................  
.................... int i,x,a,j,w,e = 0; 
.................... int first_digit, overflow, digit = 0; 
.................... int down, up, stop= 0; 
.................... int number[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 0x7F, 0x6F}; 
*
00A3:  MOVLW  3F
00A4:  BCF    03.5
00A5:  MOVWF  2C
00A6:  MOVLW  06
00A7:  MOVWF  2D
00A8:  MOVLW  5B
00A9:  MOVWF  2E
00AA:  MOVLW  4F
00AB:  MOVWF  2F
00AC:  MOVLW  66
00AD:  MOVWF  30
00AE:  MOVLW  6D
00AF:  MOVWF  31
00B0:  MOVLW  7C
00B1:  MOVWF  32
00B2:  MOVLW  07
00B3:  MOVWF  33
00B4:  MOVLW  7F
00B5:  MOVWF  34
00B6:  MOVLW  6F
00B7:  MOVWF  35
....................  
.................... void button_up() 
.................... { 
....................     if(!input(pin_stop) && input(pin_up) && !input(pin_down)) 
*
0004:  BSF    03.5
0005:  BSF    05.2
0006:  BCF    03.5
0007:  BTFSC  05.2
0008:  GOTO   01F
0009:  BSF    03.5
000A:  BSF    05.0
000B:  BCF    03.5
000C:  BTFSS  05.0
000D:  GOTO   01F
000E:  BSF    03.5
000F:  BSF    05.1
0010:  BCF    03.5
0011:  BTFSC  05.1
0012:  GOTO   01F
....................    { 
....................       up = 1; 
0013:  MOVLW  01
0014:  MOVWF  2A
....................       down, stop = 0; 
0015:  CLRF   2B
....................       if (digit==99) 
0016:  MOVF   28,W
0017:  SUBLW  63
0018:  BTFSC  03.2
....................       digit=0; 
0019:  CLRF   28
....................       while(input(pin_up)); 
001A:  BSF    03.5
001B:  BSF    05.0
001C:  BCF    03.5
001D:  BTFSC  05.0
001E:  GOTO   01A
....................    } 
001F:  RETURN
.................... } 
....................  
.................... void button_down() 
.................... { 
....................    if(!input(pin_stop) && !input(pin_up) && input(pin_down)) 
0020:  BSF    03.5
0021:  BSF    05.2
0022:  BCF    03.5
0023:  BTFSC  05.2
0024:  GOTO   03C
0025:  BSF    03.5
0026:  BSF    05.0
0027:  BCF    03.5
0028:  BTFSC  05.0
0029:  GOTO   03C
002A:  BSF    03.5
002B:  BSF    05.1
002C:  BCF    03.5
002D:  BTFSS  05.1
002E:  GOTO   03C
....................    { 
....................       down = 1; 
002F:  MOVLW  01
0030:  MOVWF  29
....................       up , stop = 0; 
0031:  CLRF   2B
....................       if(digit==0) 
0032:  MOVF   28,F
0033:  BTFSS  03.2
0034:  GOTO   037
....................       digit = 99; 
0035:  MOVLW  63
0036:  MOVWF  28
....................       while(input(pin_down)); 
0037:  BSF    03.5
0038:  BSF    05.1
0039:  BCF    03.5
003A:  BTFSC  05.1
003B:  GOTO   037
....................    } 
003C:  RETURN
.................... } 
....................  
.................... void button_stop() 
.................... { 
....................    if(input(pin_stop) && !input(pin_up) && !input(pin_down)) 
003D:  BSF    03.5
003E:  BSF    05.2
003F:  BCF    03.5
0040:  BTFSS  05.2
0041:  GOTO   068
0042:  BSF    03.5
0043:  BSF    05.0
0044:  BCF    03.5
0045:  BTFSC  05.0
0046:  GOTO   068
0047:  BSF    03.5
0048:  BSF    05.1
0049:  BCF    03.5
004A:  BTFSC  05.1
004B:  GOTO   068
....................    { 
....................      i,x,a = 0; 
004C:  CLRF   22
....................      first_digit, overflow = 0; 
004D:  CLRF   27
....................      down, up= 0;    
004E:  CLRF   2A
....................      stop = 1; 
004F:  MOVLW  01
0050:  MOVWF  2B
....................      up, down = 0; 
0051:  CLRF   29
....................      output_b(0x00); 
0052:  BSF    03.5
0053:  CLRF   06
0054:  BCF    03.5
0055:  CLRF   06
....................      output_high(display1); 
0056:  BCF    36.0
0057:  MOVF   36,W
0058:  BSF    03.5
0059:  MOVWF  07
005A:  BCF    03.5
005B:  BSF    07.0
....................      output_high(display2); 
005C:  BCF    36.1
005D:  MOVF   36,W
005E:  BSF    03.5
005F:  MOVWF  07
0060:  BCF    03.5
0061:  BSF    07.1
....................      digit=0; 
0062:  CLRF   28
....................      while(input(pin_stop)); 
0063:  BSF    03.5
0064:  BSF    05.2
0065:  BCF    03.5
0066:  BTFSC  05.2
0067:  GOTO   063
....................    } 
0068:  RETURN
....................  
.................... } 
....................  
....................  
.................... void main() 
*
0093:  MOVF   03,W
0094:  ANDLW  1F
0095:  MOVWF  03
0096:  CLRF   25
0097:  CLRF   28
0098:  CLRF   2B
0099:  MOVLW  FF
009A:  MOVWF  36
009B:  BSF    03.5
009C:  BSF    1F.0
009D:  BSF    1F.1
009E:  BSF    1F.2
009F:  BCF    1F.3
00A0:  MOVLW  07
00A1:  MOVWF  1C
00A2:  BCF    03.7
.................... { 
....................     
....................    set_tris_a(0xFF); 
*
00B8:  MOVLW  FF
00B9:  BSF    03.5
00BA:  MOVWF  05
....................    set_tris_b(0x00); 
00BB:  MOVLW  00
00BC:  MOVWF  06
....................    set_tris_c(0x00); 
00BD:  MOVWF  07
00BE:  BCF    03.5
00BF:  MOVWF  36
....................    output_b(0x00); 
00C0:  BSF    03.5
00C1:  CLRF   06
00C2:  BCF    03.5
00C3:  CLRF   06
....................    output_high(display1); 
00C4:  BCF    36.0
00C5:  MOVF   36,W
00C6:  BSF    03.5
00C7:  MOVWF  07
00C8:  BCF    03.5
00C9:  BSF    07.0
....................    output_high(display2); 
00CA:  BCF    36.1
00CB:  MOVF   36,W
00CC:  BSF    03.5
00CD:  MOVWF  07
00CE:  BCF    03.5
00CF:  BSF    07.1
....................  
....................    while(TRUE) 
....................    {   
....................       output_b(0x00); 
00D0:  BSF    03.5
00D1:  CLRF   06
00D2:  BCF    03.5
00D3:  CLRF   06
....................       output_high(display1); 
00D4:  BCF    36.0
00D5:  MOVF   36,W
00D6:  BSF    03.5
00D7:  MOVWF  07
00D8:  BCF    03.5
00D9:  BSF    07.0
....................       output_high(display2); 
00DA:  BCF    36.1
00DB:  MOVF   36,W
00DC:  BSF    03.5
00DD:  MOVWF  07
00DE:  BCF    03.5
00DF:  BSF    07.1
....................       button_up(); 
00E0:  CALL   004
....................       button_down(); 
00E1:  CALL   020
....................       button_stop(); 
00E2:  CALL   03D
....................        while(up == 1) 
00E3:  DECFSZ 2A,W
00E4:  GOTO   142
....................       { 
....................             if(digit == 100) 
00E5:  MOVF   28,W
00E6:  SUBLW  64
00E7:  BTFSC  03.2
....................             digit=0; 
00E8:  CLRF   28
....................             i = digit % 10 ; //birler 
00E9:  MOVF   28,W
00EA:  MOVWF  39
00EB:  MOVLW  0A
00EC:  MOVWF  3A
00ED:  CALL   069
00EE:  MOVF   77,W
00EF:  MOVWF  20
....................             j = digit / 10 ; //onlar 
00F0:  MOVF   28,W
00F1:  MOVWF  39
00F2:  MOVLW  0A
00F3:  MOVWF  3A
00F4:  CALL   069
00F5:  MOVF   78,W
00F6:  MOVWF  23
....................              
....................             digit++;  
00F7:  INCF   28,F
....................      
....................             for(int k=0; k<5 ; k++) 
00F8:  CLRF   37
00F9:  MOVF   37,W
00FA:  SUBLW  04
00FB:  BTFSS  03.0
00FC:  GOTO   13B
....................                { 
....................                   output_high(display1); 
00FD:  BCF    36.0
00FE:  MOVF   36,W
00FF:  BSF    03.5
0100:  MOVWF  07
0101:  BCF    03.5
0102:  BSF    07.0
....................                   output_b(number[i]); 
0103:  MOVLW  2C
0104:  ADDWF  20,W
0105:  MOVWF  04
0106:  BCF    03.7
0107:  MOVF   00,W
0108:  MOVWF  39
0109:  BSF    03.5
010A:  CLRF   06
010B:  BCF    03.5
010C:  MOVF   39,W
010D:  MOVWF  06
....................                   delay_ms(10); 
010E:  MOVLW  0A
010F:  MOVWF  39
0110:  CALL   07E
....................                   output_low(display1); 
0111:  BCF    36.0
0112:  MOVF   36,W
0113:  BSF    03.5
0114:  MOVWF  07
0115:  BCF    03.5
0116:  BCF    07.0
....................                   output_high(display2); 
0117:  BCF    36.1
0118:  MOVF   36,W
0119:  BSF    03.5
011A:  MOVWF  07
011B:  BCF    03.5
011C:  BSF    07.1
....................                    
....................                   output_b(number[j]); 
011D:  MOVLW  2C
011E:  ADDWF  23,W
011F:  MOVWF  04
0120:  BCF    03.7
0121:  MOVF   00,W
0122:  MOVWF  39
0123:  BSF    03.5
0124:  CLRF   06
0125:  BCF    03.5
0126:  MOVF   39,W
0127:  MOVWF  06
....................                   delay_ms(10); 
0128:  MOVLW  0A
0129:  MOVWF  39
012A:  CALL   07E
....................                   output_low(display2); 
012B:  BCF    36.1
012C:  MOVF   36,W
012D:  BSF    03.5
012E:  MOVWF  07
012F:  BCF    03.5
0130:  BCF    07.1
....................                    
....................                   button_stop(); 
0131:  CALL   03D
....................                   button_down(); 
0132:  CALL   020
....................                 
....................                    
....................                   if(stop == 1 || down == 1) 
0133:  DECFSZ 2B,W
0134:  GOTO   136
0135:  GOTO   138
0136:  DECFSZ 29,W
0137:  GOTO   139
....................                   { 
....................                      break; 
0138:  GOTO   13B
....................                   } 
0139:  INCF   37,F
013A:  GOTO   0F9
....................                } 
....................                         
....................              if(stop == 1 || down == 1) 
013B:  DECFSZ 2B,W
013C:  GOTO   13E
013D:  GOTO   140
013E:  DECFSZ 29,W
013F:  GOTO   141
....................              { 
....................                break; 
0140:  GOTO   142
....................              } 
0141:  GOTO   0E3
....................         } 
....................         /////////////////////////////////////////////////// 
....................         /////////////////////////////////////////////////// 
....................          
....................                while(down == 1) 
0142:  DECFSZ 29,W
0143:  GOTO   1A3
....................       { 
....................              if(digit == 0) 
0144:  MOVF   28,F
0145:  BTFSS  03.2
0146:  GOTO   149
....................              digit=99; 
0147:  MOVLW  63
0148:  MOVWF  28
....................              
....................             w = digit % 10 ; //birler 
0149:  MOVF   28,W
014A:  MOVWF  39
014B:  MOVLW  0A
014C:  MOVWF  3A
014D:  CALL   069
014E:  MOVF   77,W
014F:  MOVWF  24
....................             e = digit / 10 ; //onlar 
0150:  MOVF   28,W
0151:  MOVWF  39
0152:  MOVLW  0A
0153:  MOVWF  3A
0154:  CALL   069
0155:  MOVF   78,W
0156:  MOVWF  25
....................              
....................             digit= digit - 1; 
0157:  MOVLW  01
0158:  SUBWF  28,F
....................              
....................             for(int p=0; p<5 ; p++) 
0159:  CLRF   38
015A:  MOVF   38,W
015B:  SUBLW  04
015C:  BTFSS  03.0
015D:  GOTO   19C
....................                { 
....................                   output_high(display1); 
015E:  BCF    36.0
015F:  MOVF   36,W
0160:  BSF    03.5
0161:  MOVWF  07
0162:  BCF    03.5
0163:  BSF    07.0
....................                   output_b(number[w]); 
0164:  MOVLW  2C
0165:  ADDWF  24,W
0166:  MOVWF  04
0167:  BCF    03.7
0168:  MOVF   00,W
0169:  MOVWF  39
016A:  BSF    03.5
016B:  CLRF   06
016C:  BCF    03.5
016D:  MOVF   39,W
016E:  MOVWF  06
....................                   delay_ms(10); 
016F:  MOVLW  0A
0170:  MOVWF  39
0171:  CALL   07E
....................                   output_low(display1); 
0172:  BCF    36.0
0173:  MOVF   36,W
0174:  BSF    03.5
0175:  MOVWF  07
0176:  BCF    03.5
0177:  BCF    07.0
....................                   output_high(display2); 
0178:  BCF    36.1
0179:  MOVF   36,W
017A:  BSF    03.5
017B:  MOVWF  07
017C:  BCF    03.5
017D:  BSF    07.1
....................                    
....................                   output_b(number[e]); 
017E:  MOVLW  2C
017F:  ADDWF  25,W
0180:  MOVWF  04
0181:  BCF    03.7
0182:  MOVF   00,W
0183:  MOVWF  39
0184:  BSF    03.5
0185:  CLRF   06
0186:  BCF    03.5
0187:  MOVF   39,W
0188:  MOVWF  06
....................                   delay_ms(10); 
0189:  MOVLW  0A
018A:  MOVWF  39
018B:  CALL   07E
....................                   output_low(display2); 
018C:  BCF    36.1
018D:  MOVF   36,W
018E:  BSF    03.5
018F:  MOVWF  07
0190:  BCF    03.5
0191:  BCF    07.1
....................                    
....................                   button_stop(); 
0192:  CALL   03D
....................                   button_up(); 
0193:  CALL   004
....................                    
....................                   if(stop == 1 || up == 1) 
0194:  DECFSZ 2B,W
0195:  GOTO   197
0196:  GOTO   199
0197:  DECFSZ 2A,W
0198:  GOTO   19A
....................                   { 
....................                      break; 
0199:  GOTO   19C
....................                   } 
019A:  INCF   38,F
019B:  GOTO   15A
....................                } 
....................                
....................              
....................               
....................              if(stop == 1 || up == 1) 
019C:  DECFSZ 2B,W
019D:  GOTO   19F
019E:  GOTO   1A1
019F:  DECFSZ 2A,W
01A0:  GOTO   1A2
....................              { 
....................                break; 
01A1:  GOTO   1A3
....................              } 
01A2:  GOTO   142
....................         } 
01A3:  GOTO   0D0
....................          
....................          
....................          
....................          
....................          
....................    } 
.................... } 
....................  
01A4:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
