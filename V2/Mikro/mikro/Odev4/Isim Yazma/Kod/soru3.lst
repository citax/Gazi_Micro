CCS PCM C Compiler, Version 5.015, 5967               29-Mar-23 05:30

               Filename:   C:\Users\Nikola\Desktop\soru3\soru3.lst

               ROM used:   382 words (5%)
                           Largest free fragment is 2048
               RAM used:   59 (16%) at main() level
                           65 (18%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0A2
0003:  NOP
.................... #include <soru3.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0054:  BCF    0A.0
0055:  BCF    0A.1
0056:  BCF    0A.2
0057:  ADDWF  02,F
0058:  GOTO   04E
0059:  GOTO   04A
005A:  GOTO   046
005B:  GOTO   042
005C:  GOTO   03E
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
....................  
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #use delay(clock=4000000) 
*
0080:  MOVLW  5B
0081:  MOVWF  04
0082:  BCF    03.7
0083:  MOVF   00,W
0084:  BTFSC  03.2
0085:  GOTO   094
0086:  MOVLW  01
0087:  MOVWF  78
0088:  CLRF   77
0089:  DECFSZ 77,F
008A:  GOTO   089
008B:  DECFSZ 78,F
008C:  GOTO   088
008D:  MOVLW  4A
008E:  MOVWF  77
008F:  DECFSZ 77,F
0090:  GOTO   08F
0091:  GOTO   092
0092:  DECFSZ 00,F
0093:  GOTO   086
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #define name pin_A0 
.................... #define number pin_A1 
.................... #define stop pin_A2 
.................... int A[]={0x03, 0x75, 0x76,0x75, 0x03};  
*
00B1:  MOVLW  03
00B2:  BCF    03.5
00B3:  MOVWF  20
00B4:  MOVLW  75
00B5:  MOVWF  21
00B6:  MOVLW  76
00B7:  MOVWF  22
00B8:  MOVLW  75
00B9:  MOVWF  23
00BA:  MOVLW  03
00BB:  MOVWF  24
.................... int H[]={0x00,0XF7,0XF7,0xF7,0X00}; 
00BC:  CLRF   25
00BD:  MOVLW  F7
00BE:  MOVWF  26
00BF:  MOVWF  27
00C0:  MOVWF  28
00C1:  CLRF   29
.................... int M[]={0x00, 0xFD, 0xFB, 0xFD, 0x00};  
00C2:  CLRF   2A
00C3:  MOVLW  FD
00C4:  MOVWF  2B
00C5:  MOVLW  FB
00C6:  MOVWF  2C
00C7:  MOVLW  FD
00C8:  MOVWF  2D
00C9:  CLRF   2E
.................... int E[]={0x00, 0xB6, 0xB6, 0xB6,0xBE };  
00CA:  CLRF   2F
00CB:  MOVLW  B6
00CC:  MOVWF  30
00CD:  MOVWF  31
00CE:  MOVWF  32
00CF:  MOVLW  BE
00D0:  MOVWF  33
.................... int T[]={0xFE,0xFE,0x00,0xFE,0xFE};  
00D1:  MOVLW  FE
00D2:  MOVWF  34
00D3:  MOVWF  35
00D4:  CLRF   36
00D5:  MOVWF  37
00D6:  MOVWF  38
.................... int ZERO[]={0xC1,0XBE,0XBE,0XBE,0XC1}; 
00D7:  MOVLW  C1
00D8:  MOVWF  39
00D9:  MOVLW  BE
00DA:  MOVWF  3A
00DB:  MOVWF  3B
00DC:  MOVWF  3C
00DD:  MOVLW  C1
00DE:  MOVWF  3D
.................... int ONE[] = {0XFF,0XFF,0XFB,0XFD,0X00}; 
00DF:  MOVLW  FF
00E0:  MOVWF  3E
00E1:  MOVWF  3F
00E2:  MOVLW  FB
00E3:  MOVWF  40
00E4:  MOVLW  FD
00E5:  MOVWF  41
00E6:  CLRF   42
.................... int TWO[] = {0xBD,0x9E,0xAE,0xB6,0xB9}; 
00E7:  MOVLW  BD
00E8:  MOVWF  43
00E9:  MOVLW  9E
00EA:  MOVWF  44
00EB:  MOVLW  AE
00EC:  MOVWF  45
00ED:  MOVLW  B6
00EE:  MOVWF  46
00EF:  MOVLW  B9
00F0:  MOVWF  47
.................... int THREE[] = {0xDD,0XBE,0XB6,0XB6,0XC9}; 
00F1:  MOVLW  DD
00F2:  MOVWF  48
00F3:  MOVLW  BE
00F4:  MOVWF  49
00F5:  MOVLW  B6
00F6:  MOVWF  4A
00F7:  MOVWF  4B
00F8:  MOVLW  C9
00F9:  MOVWF  4C
.................... int EIGHT[] = {0XC9,0XB6,0XB6,0XB6,0XC9}; 
00FA:  MOVWF  4D
00FB:  MOVLW  B6
00FC:  MOVWF  4E
00FD:  MOVWF  4F
00FE:  MOVWF  50
00FF:  MOVLW  C9
0100:  MOVWF  51
....................  
.................... int stp =0; 
.................... int nm,nmbr =0; 
....................  
.................... int sutunsec (int s)  
.................... { switch (s) 
*
0038:  MOVF   5B,W
0039:  ADDLW  FB
003A:  BTFSC  03.0
003B:  GOTO   051
003C:  ADDLW  05
003D:  GOTO   054
....................    {  
....................       case 4: return (0x10); break; 
003E:  MOVLW  10
003F:  MOVWF  78
0040:  GOTO   051
0041:  GOTO   051
....................       case 3: return (0x08); break;  
0042:  MOVLW  08
0043:  MOVWF  78
0044:  GOTO   051
0045:  GOTO   051
....................       case 2: return (0x04); break; 
0046:  MOVLW  04
0047:  MOVWF  78
0048:  GOTO   051
0049:  GOTO   051
....................       case 1: return (0x02); break; 
004A:  MOVLW  02
004B:  MOVWF  78
004C:  GOTO   051
004D:  GOTO   051
....................       case 0: return (0x01); break; 
004E:  MOVLW  01
004F:  MOVWF  78
0050:  GOTO   051
....................  
....................    } 
0051:  BCF    0A.3
0052:  BCF    0A.4
0053:  GOTO   06D (RETURN)
.................... } 
.................... void button_name() 
.................... { 
....................  
....................    if(input(name)) 
*
0016:  BTFSS  05.0
0017:  GOTO   025
....................       { 
....................          output_b(0x00); 
0018:  CLRF   06
....................          output_c(0x00); 
0019:  MOVLW  00
001A:  MOVWF  55
001B:  BSF    03.5
001C:  CLRF   07
001D:  BCF    03.5
001E:  CLRF   07
....................          stp=0;   
001F:  CLRF   52
....................          nm=1; 
0020:  MOVLW  01
0021:  MOVWF  53
....................          nmbr=0; 
0022:  CLRF   54
....................          while(input(name)); 
0023:  BTFSC  05.0
0024:  GOTO   023
....................       } 
0025:  BCF    0A.3
0026:  BCF    0A.4
0027:  GOTO   111 (RETURN)
....................       
.................... } 
.................... void button_number() 
.................... { 
....................  
....................    if(input(number)) 
*
0004:  BTFSS  05.1
0005:  GOTO   013
....................       { 
....................          output_b(0x00); 
0006:  CLRF   06
....................          output_c(0x00); 
0007:  MOVLW  00
0008:  MOVWF  55
0009:  BSF    03.5
000A:  CLRF   07
000B:  BCF    03.5
000C:  CLRF   07
....................          stp=0;   
000D:  CLRF   52
....................          nm=0; 
000E:  CLRF   53
....................          nmbr=1; 
000F:  MOVLW  01
0010:  MOVWF  54
....................          while(input(number)); 
0011:  BTFSC  05.1
0012:  GOTO   011
....................       } 
0013:  BCF    0A.3
0014:  BCF    0A.4
0015:  GOTO   110 (RETURN)
....................       
.................... } 
....................  
.................... void button_stop() 
.................... { 
....................  
....................    if(input(stop)) 
*
0028:  BTFSS  05.2
0029:  GOTO   037
....................       { 
....................          output_b(0x00); 
002A:  CLRF   06
....................          output_c(0x00); 
002B:  MOVLW  00
002C:  MOVWF  55
002D:  BSF    03.5
002E:  CLRF   07
002F:  BCF    03.5
0030:  CLRF   07
....................          stp=1;   
0031:  MOVLW  01
0032:  MOVWF  52
....................          nm=0; 
0033:  CLRF   53
....................          nmbr=0; 
0034:  CLRF   54
....................          while(input(stop)); 
0035:  BTFSC  05.2
0036:  GOTO   035
....................       } 
0037:  RETURN
....................   
.................... } 
....................  
.................... void matris_karakter_gonder (char harf[], int tekrar) 
.................... { 
....................    int i,j;  
....................    if(stp==1) 
*
005D:  DECFSZ 52,W
005E:  GOTO   05F
....................          break; 
....................           
....................       for (i=1;i<tekrar;i++)  
005F:  MOVLW  01
0060:  MOVWF  59
0061:  MOVF   58,W
0062:  SUBWF  59,W
0063:  BTFSC  03.0
0064:  GOTO   09F
....................          { 
....................          for(j=0;j<5;j++)  
0065:  CLRF   5A
0066:  MOVF   5A,W
0067:  SUBLW  04
0068:  BTFSS  03.0
0069:  GOTO   09A
....................             { 
....................                output_b(sutunsec(j));  
006A:  MOVF   5A,W
006B:  MOVWF  5B
006C:  GOTO   038
006D:  MOVF   78,W
006E:  MOVWF  06
....................                output_c(harf[j]); 
006F:  MOVF   5A,W
0070:  ADDWF  56,W
0071:  MOVWF  04
0072:  BCF    03.7
0073:  BTFSC  57.0
0074:  BSF    03.7
0075:  MOVF   00,W
0076:  MOVWF  5B
0077:  MOVLW  00
0078:  MOVWF  55
0079:  BSF    03.5
007A:  CLRF   07
007B:  BCF    03.5
007C:  MOVF   5B,W
007D:  MOVWF  07
....................                delay_ms(10); 
007E:  MOVLW  0A
007F:  MOVWF  5B
....................                button_stop(); 
*
0094:  CALL   028
....................                 if(stp==1) 
0095:  DECFSZ 52,W
0096:  GOTO   098
....................          break; 
0097:  GOTO   09A
0098:  INCF   5A,F
0099:  GOTO   066
....................             } 
....................          if(stp==1) 
009A:  DECFSZ 52,W
009B:  GOTO   09D
....................          break; 
009C:  GOTO   09F
009D:  INCF   59,F
009E:  GOTO   061
....................           
....................             
....................          } 
....................            if(stp==1) 
009F:  DECFSZ 52,W
00A0:  GOTO   0A1
....................          break; 
00A1:  RETURN
....................           
.................... } 
....................  
....................  
.................... void main() 
00A2:  MOVF   03,W
00A3:  ANDLW  1F
00A4:  MOVWF  03
00A5:  CLRF   52
00A6:  CLRF   54
00A7:  MOVLW  FF
00A8:  MOVWF  55
00A9:  BSF    03.5
00AA:  BSF    1F.0
00AB:  BSF    1F.1
00AC:  BSF    1F.2
00AD:  BCF    1F.3
00AE:  MOVLW  07
00AF:  MOVWF  1C
00B0:  BCF    03.7
.................... { 
.................... set_tris_a(0x07); 
*
0101:  MOVLW  07
0102:  BSF    03.5
0103:  MOVWF  05
.................... set_tris_b(0x00);  
0104:  MOVLW  00
0105:  MOVWF  06
.................... set_tris_c(0x00);  
0106:  MOVWF  07
0107:  BCF    03.5
0108:  MOVWF  55
.................... output_b(0x00); 
0109:  CLRF   06
.................... output_c(0x00); 
010A:  MOVWF  55
010B:  BSF    03.5
010C:  CLRF   07
010D:  BCF    03.5
010E:  CLRF   07
....................    while(TRUE) 
....................     
....................     { 
....................       button_number(); 
010F:  GOTO   004
....................       button_name(); 
0110:  GOTO   016
....................       button_stop(); 
0111:  CALL   028
....................       while(nm==1) 
0112:  DECFSZ 53,W
0113:  GOTO   13B
....................       { 
....................          matris_karakter_gonder (A, 25);  
0114:  CLRF   57
0115:  MOVLW  20
0116:  MOVWF  56
0117:  MOVLW  19
0118:  MOVWF  58
0119:  CALL   05D
....................          matris_karakter_gonder (H,25); 
011A:  CLRF   57
011B:  MOVLW  25
011C:  MOVWF  56
011D:  MOVLW  19
011E:  MOVWF  58
011F:  CALL   05D
....................          matris_karakter_gonder (M, 25);  
0120:  CLRF   57
0121:  MOVLW  2A
0122:  MOVWF  56
0123:  MOVLW  19
0124:  MOVWF  58
0125:  CALL   05D
....................          matris_karakter_gonder (E,25);  
0126:  CLRF   57
0127:  MOVLW  2F
0128:  MOVWF  56
0129:  MOVLW  19
012A:  MOVWF  58
012B:  CALL   05D
....................          matris_karakter_gonder (T,25);  
012C:  CLRF   57
012D:  MOVLW  34
012E:  MOVWF  56
012F:  MOVLW  19
0130:  MOVWF  58
0131:  CALL   05D
....................          output_c(0x00); 
0132:  MOVLW  00
0133:  MOVWF  55
0134:  BSF    03.5
0135:  CLRF   07
0136:  BCF    03.5
0137:  CLRF   07
....................          output_b(0x00); 
0138:  CLRF   06
....................          nm=0; 
0139:  CLRF   53
013A:  GOTO   112
....................       } 
....................       while(nmbr==1) 
013B:  DECFSZ 54,W
013C:  GOTO   17C
....................       { 
....................          matris_karakter_gonder (TWO, 25);  
013D:  CLRF   57
013E:  MOVLW  43
013F:  MOVWF  56
0140:  MOVLW  19
0141:  MOVWF  58
0142:  CALL   05D
....................          matris_karakter_gonder (ZERO,25); 
0143:  CLRF   57
0144:  MOVLW  39
0145:  MOVWF  56
0146:  MOVLW  19
0147:  MOVWF  58
0148:  CALL   05D
....................          matris_karakter_gonder (ONE, 25);  
0149:  CLRF   57
014A:  MOVLW  3E
014B:  MOVWF  56
014C:  MOVLW  19
014D:  MOVWF  58
014E:  CALL   05D
....................          matris_karakter_gonder (EIGHT,25);  
014F:  CLRF   57
0150:  MOVLW  4D
0151:  MOVWF  56
0152:  MOVLW  19
0153:  MOVWF  58
0154:  CALL   05D
....................          matris_karakter_gonder (ZERO,25);  
0155:  CLRF   57
0156:  MOVLW  39
0157:  MOVWF  56
0158:  MOVLW  19
0159:  MOVWF  58
015A:  CALL   05D
....................          matris_karakter_gonder (THREE,25);  
015B:  CLRF   57
015C:  MOVLW  48
015D:  MOVWF  56
015E:  MOVLW  19
015F:  MOVWF  58
0160:  CALL   05D
....................          matris_karakter_gonder (ZERO,25);  
0161:  CLRF   57
0162:  MOVLW  39
0163:  MOVWF  56
0164:  MOVLW  19
0165:  MOVWF  58
0166:  CALL   05D
....................          matris_karakter_gonder (ONE,25);  
0167:  CLRF   57
0168:  MOVLW  3E
0169:  MOVWF  56
016A:  MOVLW  19
016B:  MOVWF  58
016C:  CALL   05D
....................          matris_karakter_gonder (ZERO,25);  
016D:  CLRF   57
016E:  MOVLW  39
016F:  MOVWF  56
0170:  MOVLW  19
0171:  MOVWF  58
0172:  CALL   05D
....................          output_c(0x00); 
0173:  MOVLW  00
0174:  MOVWF  55
0175:  BSF    03.5
0176:  CLRF   07
0177:  BCF    03.5
0178:  CLRF   07
....................          output_b(0x00); 
0179:  CLRF   06
....................          nmbr=0; 
017A:  CLRF   54
017B:  GOTO   13B
....................       } 
017C:  GOTO   10F
....................        
....................    } 
.................... } 
017D:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
